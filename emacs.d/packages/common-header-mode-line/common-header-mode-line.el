;;; common-header-mode-line.el --- common header-mode-line.

;; Copyright (C) 2017 Constantin Kulikov
;;
;; Author: Constantin Kulikov (Bad_ptr) <zxnotdead@gmail.com>
;; Version: 0.5.6
;; Package-Requires: ()
;; Date: 02/04/2017 16:48
;; License: GPL either version 3 or any later version
;; Keywords: header-line, mode-line, convenience, frames, windows
;; URL: http://github.com/Bad-ptr/common-header-mode-line.el

;;; License:

;; This file is not part of GNU Emacs.

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3, or (at your option)
;; any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program; if not, write to the Free Software
;; Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

;;; Commentary:

;; This file is autogenerated. Do not edit manually.

;; This file is the part of the common-header-mode-line package

;; Draw common header-mode-line.

;; Install common-header-mode-line package, then:

;; (require 'common-header-mode-line)
;; (common-header-mode-line-mode)

;; which is equivalent to
;; (common-header-line-mode)
;; (common-mode-line-mode)

;; which is equivalent to
;; (per-frame-header-mode-line-mode)
;; (per-window-header-mode-line-mode)

;; which is equivalent to
;; (per-frame-header-line-mode)
;; (per-frame-mode-line-mode)
;; (per-window-header-line-mode)
;; (per-window-mode-line-mode)

;; M-x customize-group RET common-header-mode-line RET
;; M-x customize-group RET common-header-line RET
;; M-x customize-group RET common-mode-line RET

;;; Code:

(defvar common-mode-line-mode nil)

(defvar common-header-line-mode nil)

(defvar common-header-mode-line-mode nil)

(defgroup common-header-mode-line nil "Customize common-header-mode-line." :prefix "common-header-mode-line-" :group 'convenience :link
  '(url-link :tag "Github page" "https://github.com/Bad-ptr/common-header-mode-line.el"))

(defvar common-header-mode-line--delayed-update-timer nil "Timer used to delay updates.")

(defcustom common-header-mode-line-update-delay 0.5 "Time to delay updates." :group 'common-header-mode-line :type 'float)

(defadvice force-mode-line-update
    (after common-header-mode-line--delayed-update-adv)
  (common-header-mode-line--delayed-update)
  nil)

(defun common-header-mode-line--activate-delayed-update-hooks nil
  (add-hook 'post-command-hook #'common-header-mode-line--delayed-update)
  (add-hook 'window-configuration-change-hook #'common-header-mode-line--delayed-update)
  (ad-activate #'force-mode-line-update))

(defun common-header-mode-line--deactivate-delayed-update-hooks nil
  (remove-hook 'post-command-hook #'common-header-mode-line--delayed-update)
  (remove-hook 'window-configuration-change-hook #'common-header-mode-line--delayed-update)
  (ad-deactivate #'force-mode-line-update)
  (when
      (timerp common-header-mode-line--delayed-update-timer)
    (cancel-timer common-header-mode-line--delayed-update-timer)
    (setq common-header-mode-line--delayed-update-timer nil)))

(defun common-header-mode-line-set-delayed-update-functions
    (funs)
  (when
      (and
       (null common-header-mode-line-delayed-update-functions)
       funs)
    (common-header-mode-line--activate-delayed-update-hooks))
  (when
      (null funs)
    (common-header-mode-line--deactivate-delayed-update-hooks))
  (setq common-header-mode-line-delayed-update-functions funs))

(defcustom common-header-mode-line-delayed-update-functions nil "List of functions to call to update header-mode-lines." :group 'common-header-mode-line :type 'hook :set
  #'(lambda
      (sym val)
      (unless
	  (boundp 'common-header-mode-line-delayed-update-functions)
	(setq common-header-mode-line-delayed-update-functions nil))
      (common-header-mode-line-set-delayed-update-functions val)
      (custom-set-default sym val)))

(defun common-header-mode-line--update nil
  (run-hook-with-args-until-failure 'common-header-mode-line-delayed-update-functions))

(defun common-header-mode-line--delayed-update
    (&rest args)
  (unless
      (timerp common-header-mode-line--delayed-update-timer)
    (setq common-header-mode-line--delayed-update-timer
	  (run-with-idle-timer common-header-mode-line-update-delay nil
			       #'(lambda nil
				   (unwind-protect
				       (common-header-mode-line--update)
				     (setq common-header-mode-line--delayed-update-timer nil)))))))

;;;###autoload
(defun common-header-mode-line-add-delayed-update-function
    (fun)
  (unless
      (memq fun common-header-mode-line-delayed-update-functions)
    (common-header-mode-line-set-delayed-update-functions
     (cons fun common-header-mode-line-delayed-update-functions))))

;;;###autoload
(defun common-header-mode-line-rem-delayed-update-function
    (fun)
  (common-header-mode-line-set-delayed-update-functions
   (delq fun common-header-mode-line-delayed-update-functions)))

(defun common-mode-line--activate nil
  (per-frame-mode-line-mode 1)
  (per-window-mode-line-mode 1))

(defun common-header-line--activate nil
  (per-frame-header-line-mode 1)
  (per-window-header-line-mode 1))

(defun common-mode-line--deactivate nil
  (per-frame-mode-line-mode -1)
  (per-window-mode-line-mode -1))

(defun common-header-line--deactivate nil
  (per-frame-header-line-mode -1)
  (per-window-header-line-mode -1))

;;;###autoload
(define-minor-mode common-mode-line-mode "`per-window-mode-line-mode' + `per-frame-mode-line-mode'" :require 'common-header-mode-line :group 'common-header-mode-line :init-value nil :global t
  (if common-mode-line-mode
      (common-mode-line--activate)
    (common-mode-line--deactivate)))

;;;###autoload
(define-minor-mode common-header-line-mode "`per-window-header-line-mode' + `per-frame-header-line-mode'" :require 'common-header-mode-line :group 'common-header-mode-line :init-value nil :global t
  (if common-header-line-mode
      (common-header-line--activate)
    (common-header-line--deactivate)))

;;;###autoload
(define-minor-mode common-header-mode-line-mode "`common-header-line-mode' + `common-mode-line-mode'" :require 'common-header-mode-line :group 'common-header-mode-line :init-value nil :global t
  (if common-header-mode-line-mode
      (progn
	(progn
	  (common-mode-line-mode 1)
	  (common-header-line-mode 1)))
    (progn
      (progn
	(common-mode-line-mode -1)
	(common-header-line-mode -1)))))

(provide 'common-header-mode-line)


;;; common-header-mode-line.el ends here
