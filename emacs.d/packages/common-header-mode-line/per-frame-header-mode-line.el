;;; per-frame-header-mode-line.el --- per-frame header-mode-line.

;; Copyright (C) 2017 Constantin Kulikov
;;
;; Author: Constantin Kulikov (Bad_ptr) <zxnotdead@gmail.com>
;; Date: 02/04/2017 16:48
;; License: GPL either version 3 or any later version
;; URL: http://github.com/Bad-ptr/common-header-mode-line.el

;;; License:

;; This file is not part of GNU Emacs.

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3, or (at your option)
;; any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program; if not, write to the Free Software
;; Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

;;; Commentary:

;; This file is autogenerated. Do not edit manually.
;; This file is the part of the common-header-mode-line package

;; Draws per-frame header-mode-line.

;; To use it, first install common-header-mode-line package, then:

;; (require 'per-frame-header-mode-line)
;; (per-frame-header-line-mode)
;; (per-frame-mode-line-mode)

;; M-x customize-group RET per-frame-header-header-mode-line RET
;; M-x customize-group RET per-frame-header-line RET
;; M-x customize-group RET per-frame-mode-line RET

;;; Code:

(require 'advice)

(defvar per-frame-mode-line-mode nil)

(defvar per-frame-header-line-mode nil)

(defvar per-frame-header-mode-line-mode nil)

(defgroup per-frame-header-mode-line nil "Customize per-frame-mode-line." :prefix "per-frame-header-mode-line-" :group 'common-header-mode-line)

(defgroup per-frame-header-mode-line nil "Customize per-frame-header-line." :prefix "per-frame-header-mode-line-" :group 'common-header-mode-line)

(defvar per-frame-header-mode-line--selected-window nil "Used to track current window.")

(defvar per-frame-header-mode-line--inhibit-delete-window-advice nil "Used to locally allow deleting any window.")

(defvar per-frame-header-mode-line--inhibit-window-conf-get-advices nil "Temporarily disable window-configuration advices.")

(defgroup per-frame-mode-line nil "Customize per-frame-mode-line." :prefix "per-frame-mode-line-" :group 'per-frame-header-mode-line)

(defgroup per-frame-header-line nil "Customize per-frame-header-line." :prefix "per-frame-header-line-" :group 'per-frame-header-mode-line)

(defcustom per-frame-mode-line-display-type nil "How to draw per-frame-mode-line." :group 'per-frame-mode-line :type
  '(choice
    (const :tag "Use ordinary window" :value nil)
    (const :tag "Use side window" :value side-window)
    (function :tag "Use this function to get or create a display for mode-line" :value
	      (lambda nil nil))))

(defcustom per-frame-header-line-display-type nil "How to draw per-frame-header-line." :group 'per-frame-header-line :type
  '(choice
    (const :tag "Use ordinary window" :value nil)
    (const :tag "Use side window" :value side-window)
    (function :tag "Use this function to get or create a display for header-line" :value
	      (lambda nil nil))))

(defcustom per-frame-mode-line-window-side 'bottom "Side of the frame where mode-line will be displayed." :group 'per-frame-mode-line :type
  '(choice
    (const :tag "At the bottom" :value bottom)
    (const :tag "At the top" :value top)))

(defcustom per-frame-header-line-window-side 'top "Side of the frame where header-line will be displayed." :group 'per-frame-header-line :type
  '(choice
    (const :tag "At the bottom" :value bottom)
    (const :tag "At the top" :value top)))

(defcustom per-frame-mode-line-window-slot
  (cond
   ((eq 'bottom per-frame-mode-line-window-side)
    1)
   (t -1))
  "Slot to use for side window." :group 'per-frame-mode-line :type
  '(choice
    (const :tag "Middle slot" :value nil)
    (iteger :tag "See doc for `display-buffer-in-side-window'" :value 0)))

(defcustom per-frame-header-line-window-slot
  (cond
   ((eq 'bottom per-frame-header-line-window-side)
    1)
   (t -1))
  "Slot to use for side window." :group 'per-frame-header-line :type
  '(choice
    (const :tag "Middle slot" :value nil)
    (iteger :tag "See doc for `display-buffer-in-side-window'" :value 0)))

(defvar per-frame-mode-line--buffer nil "Buffer used to display mode-line.")

(defvar per-frame-header-line--buffer nil "Buffer used to display header-line.")

(defcustom per-frame-mode-line-buffer-name " *per-frame-mode-line*" "Name of the buffer used to display mode-line." :group 'per-frame-mode-line :type 'string :set
  #'(lambda
      (sym val)
      (custom-set-default sym val)
      (when
	  (buffer-live-p per-frame-mode-line--buffer)
	(with-current-buffer per-frame-mode-line--buffer
	  (rename-buffer val)))))

(defcustom per-frame-header-line-buffer-name " *per-frame-header-line*" "Name of the buffer used to display header-line." :group 'per-frame-header-line :type 'string :set
  #'(lambda
      (sym val)
      (custom-set-default sym val)
      (when
	  (buffer-live-p per-frame-header-line--buffer)
	(with-current-buffer per-frame-header-line--buffer
	  (rename-buffer val)))))

(defcustom per-frame-mode-line-get-create-display-function #'per-frame-mode-line--get-create-display-function "Function to create display. Optional argument -- frame." :group 'per-frame-mode-line :type 'function)

(defcustom per-frame-header-line-get-create-display-function #'per-frame-header-line--get-create-display-function "Function to create display. Optional argument -- frame." :group 'per-frame-header-line :type 'function)

(defcustom per-frame-mode-line-update-display-function #'per-frame-mode-line--update-display-function "Function to update display. Display is the argument." :group 'per-frame-mode-line :type 'function)

(defcustom per-frame-header-line-update-display-function #'per-frame-header-line--update-display-function "Function to update display. Display is the argument." :group 'per-frame-header-line :type 'function)

(defcustom per-frame-mode-line-kill-display-function #'per-frame-mode-line--kill-display-function "Function to kill display passed as argument." :group 'per-frame-mode-line :type 'function)

(defcustom per-frame-header-line-kill-display-function #'per-frame-header-line--kill-display-function "Function to kill display passed as argument." :group 'per-frame-header-line :type 'function)

(defface per-frame-mode-line-face
  '((default :inherit mode-line))
  "Face for common mode-line." :group 'per-frame-mode-line)

(defface per-frame-header-line-face
  '((default :inherit header-line))
  "Face for common header-line." :group 'per-frame-header-line)

(defun per-frame-header-mode-line--init-buffer
    (b)
  (with-current-buffer b
    (jit-lock-mode nil)
    (font-lock-mode -1)
    (buffer-disable-undo)
    (progn
      (progn
	(setq-local mode-line-format nil)
	(setq-local header-line-format nil)))
    (setq-local cursor-type nil)
    (setq-local cursor-in-non-selected-windows nil)
    (setq-local overflow-newline-into-fringe nil)
    (setq-local word-wrap nil)
    (setq-local show-trailing-whitespace nil)
    (current-buffer)))

(defun per-frame-mode-line--get-create-buffer nil
  (if
      (buffer-live-p per-frame-mode-line--buffer)
      per-frame-mode-line--buffer
    (setq per-frame-mode-line--buffer
	  (per-frame-header-mode-line--init-buffer
	   (with-current-buffer
	       (get-buffer-create per-frame-mode-line-buffer-name)
	     (face-remap-add-relative 'default 'per-frame-mode-line-face)
	     (current-buffer))))))

(defun per-frame-header-line--get-create-buffer nil
  (if
      (buffer-live-p per-frame-header-line--buffer)
      per-frame-header-line--buffer
    (setq per-frame-header-line--buffer
	  (per-frame-header-mode-line--init-buffer
	   (with-current-buffer
	       (get-buffer-create per-frame-header-line-buffer-name)
	     (face-remap-add-relative 'default 'per-frame-header-line-face)
	     (current-buffer))))))

(defun per-frame-mode-line--kill-buffer
    (&optional buf)
  (unless buf
    (setq buf per-frame-mode-line--buffer))
  (when
      (buffer-live-p buf)
    (kill-buffer buf)))

(defun per-frame-header-line--kill-buffer
    (&optional buf)
  (unless buf
    (setq buf per-frame-header-line--buffer))
  (when
      (buffer-live-p buf)
    (kill-buffer buf)))

(defun per-frame-header-mode-line--init-window-with-buffer
    (win buf)
  (with-selected-window win
    (with-current-buffer buf
      (set-window-buffer win buf)
      (set-window-dedicated-p win t)
      (set-window-parameter win 'no-other-window t)
      (set-window-margins win 0 0)
      (set-window-fringes win 0 0)
      (set-window-scroll-bars win 0 nil 0 nil)
      (setq-local window-min-height 1)
      (setq-local window-safe-min-height 1)
      (let
	  (window-size-fixed)
	(fit-window-to-buffer win 1))
      (setq-local window-size-fixed t)
      (when
	  (fboundp 'window-preserve-size)
	(window-preserve-size win nil t)))
    win))

(defun per-frame-mode-line--create-window-1
    (&optional frame buf)
  (let
      (win)
    (with-selected-frame
	(or frame
	    (selected-frame))
      (setq win
	    (if per-frame-mode-line-display-type
		(display-buffer-in-side-window
		 (or buf
		     (current-buffer))
		 `((side \, per-frame-mode-line-window-side)
		   (slot \, per-frame-mode-line-window-slot)
		   (window-height . 1)))
	      (split-window
	       (frame-root-window)
	       nil
	       (if
		   (eq 'bottom per-frame-mode-line-window-side)
		   'below 'above)))))
    win))

(defun per-frame-header-line--create-window-1
    (&optional frame buf)
  (let
      (win)
    (with-selected-frame
	(or frame
	    (selected-frame))
      (setq win
	    (if per-frame-header-line-display-type
		(display-buffer-in-side-window
		 (or buf
		     (current-buffer))
		 `((side \, per-frame-header-line-window-side)
		   (slot \, per-frame-header-line-window-slot)
		   (window-height . 1)))
	      (split-window
	       (frame-root-window)
	       nil
	       (if
		   (eq 'bottom per-frame-header-line-window-side)
		   'below 'above)))))
    win))

(defun per-frame-mode-line--create-window
    (&optional frame)
  (let*
      (window-configuration-change-hook
       (split-width-threshold 2)
       (split-height-threshold 2)
       (window-safe-min-height 1)
       (window-safe-min-width 1)
       (window-min-height 1)
       (window-min-width 1)
       (window-resize-pixelwise t)
       (buf
	(per-frame-mode-line--get-create-buffer))
       (win
	(per-frame-mode-line--create-window-1 frame buf))
       (golden-ratio-mode nil))
    (set-frame-parameter frame 'per-frame-mode-line-window win)
    (set-window-parameter win 'per-frame-mode-line-window t)
    (per-frame-header-mode-line--init-window-with-buffer win buf)))

(defun per-frame-header-line--create-window
    (&optional frame)
  (let*
      (window-configuration-change-hook
       (split-width-threshold 2)
       (split-height-threshold 2)
       (window-safe-min-height 1)
       (window-safe-min-width 1)
       (window-min-height 1)
       (window-min-width 1)
       (window-resize-pixelwise t)
       (buf
	(per-frame-header-line--get-create-buffer))
       (win
	(per-frame-header-line--create-window-1 frame buf))
       (golden-ratio-mode nil))
    (set-frame-parameter frame 'per-frame-header-line-window win)
    (set-window-parameter win 'per-frame-header-line-window t)
    (per-frame-header-mode-line--init-window-with-buffer win buf)))

(defun per-frame-mode-line--get-create-window
    (&optional frame)
  (let
      ((win
	(frame-parameter frame 'per-frame-mode-line-window)))
    (unless
	(window-live-p win)
      (setq win
	    (window-with-parameter 'per-frame-mode-line-window t frame)))
    (unless
	(window-live-p win)
      (setq win
	    (per-frame-mode-line--create-window frame)))
    win))

(defun per-frame-header-line--get-create-window
    (&optional frame)
  (let
      ((win
	(frame-parameter frame 'per-frame-header-line-window)))
    (unless
	(window-live-p win)
      (setq win
	    (window-with-parameter 'per-frame-header-line-window t frame)))
    (unless
	(window-live-p win)
      (setq win
	    (per-frame-header-line--create-window frame)))
    win))

(defun per-frame-mode-line--kill-window
    (&optional frame win)
  (let
      ((win
	(or
	 (and
	  (window-live-p win)
	  win)
	 (frame-parameter frame 'per-frame-mode-line-window)))
       (per-frame-header-mode-line--inhibit-delete-window-advice t))
    (when
	(window-live-p win)
      (delete-window win))
    (set-frame-parameter frame 'per-frame-mode-line-window nil)))

(defun per-frame-header-line--kill-window
    (&optional frame win)
  (let
      ((win
	(or
	 (and
	  (window-live-p win)
	  win)
	 (frame-parameter frame 'per-frame-header-line-window)))
       (per-frame-header-mode-line--inhibit-delete-window-advice t))
    (when
	(window-live-p win)
      (delete-window win))
    (set-frame-parameter frame 'per-frame-header-line-window nil)))

(defun per-frame-mode-line--kill-display-function
    (display)
  (when display
    (let
	((winc
	  (assq 'win display))
	 (bufc
	  (assq 'buf display))
	 (frame
	  (cdr
	   (assq 'frame display))))
      (per-frame-mode-line--kill-window frame
					(cdr winc))
      (per-frame-mode-line--kill-buffer
       (cdr bufc))
      (setcdr winc nil)
      (setcdr bufc nil)
      (set-frame-parameter frame 'per-frame-mode-line-display nil)
      display)))

(defun per-frame-header-line--kill-display-function
    (display)
  (when display
    (let
	((winc
	  (assq 'win display))
	 (bufc
	  (assq 'buf display))
	 (frame
	  (cdr
	   (assq 'frame display))))
      (per-frame-header-line--kill-window frame
					  (cdr winc))
      (per-frame-header-line--kill-buffer
       (cdr bufc))
      (setcdr winc nil)
      (setcdr bufc nil)
      (set-frame-parameter frame 'per-frame-header-line-display nil)
      display)))

(defun per-frame-mode-line--kill-display
    (display)
  (funcall per-frame-mode-line-kill-display-function display))

(defun per-frame-header-line--kill-display
    (display)
  (funcall per-frame-header-line-kill-display-function display))

(defun per-frame-mode-line--display-valid-p
    (display)
  (let
      ((win
	(cdr
	 (assq 'win display)))
       (buf
	(cdr
	 (assq 'buf display))))
    (and
     (window-live-p win)
     (buffer-live-p buf))))

(defun per-frame-header-line--display-valid-p
    (display)
  (let
      ((win
	(cdr
	 (assq 'win display)))
       (buf
	(cdr
	 (assq 'buf display))))
    (and
     (window-live-p win)
     (buffer-live-p buf))))

(defun per-frame-mode-line--get-create-display-function
    (&optional frame)
  (let
      ((display
	(frame-parameter frame 'per-frame-mode-line-display)))
    (if
	(per-frame-mode-line--display-valid-p display)
	display
      (let*
	  ((buf
	    (per-frame-mode-line--get-create-buffer))
	   (win
	    (per-frame-mode-line--get-create-window frame))
	   (display
	    (cons
	     (cons 'buf buf)
	     (cons
	      (cons 'win win)
	      (cons
	       (cons 'frame
		     (or frame
			 (selected-frame)))
	       nil)))))
	(set-frame-parameter frame 'per-frame-mode-line-display display)
	display))))

(defun per-frame-header-line--get-create-display-function
    (&optional frame)
  (let
      ((display
	(frame-parameter frame 'per-frame-header-line-display)))
    (if
	(per-frame-header-line--display-valid-p display)
	display
      (let*
	  ((buf
	    (per-frame-header-line--get-create-buffer))
	   (win
	    (per-frame-header-line--get-create-window frame))
	   (display
	    (cons
	     (cons 'buf buf)
	     (cons
	      (cons 'win win)
	      (cons
	       (cons 'frame
		     (or frame
			 (selected-frame)))
	       nil)))))
	(set-frame-parameter frame 'per-frame-header-line-display display)
	display))))

(defun per-frame-mode-line--get-create-display
    (&optional frame)
  (funcall per-frame-mode-line-get-create-display-function frame))

(defun per-frame-header-line--get-create-display
    (&optional frame)
  (funcall per-frame-header-line-get-create-display-function frame))

(defun per-frame-mode-line--update-display-function
    (display)
  (let
      ((buf
	(cdr
	 (assq 'buf display))))
    (with-current-buffer buf
      (setq-local buffer-read-only nil)
      (erase-buffer)
      (let*
	  ((mode-l-str
	    (format-mode-line
	     (list ""
		   '(eldoc-mode-line-string
		     (" " eldoc-mode-line-string " "))
		   (default-value 'mode-line-format))
	     'per-frame-mode-line-face per-frame-header-mode-line--selected-window)))
	(insert mode-l-str))
      (progn
	(progn
	  (setq-local mode-line-format nil)
	  (setq-local header-line-format nil)))
      (goto-char
       (point-min))
      (setq-local buffer-read-only t))))

(defun per-frame-header-line--update-display-function
    (display)
  (let
      ((buf
	(cdr
	 (assq 'buf display))))
    (with-current-buffer buf
      (setq-local buffer-read-only nil)
      (erase-buffer)
      (let*
	  ((header-l-str
	    (format-mode-line
	     (default-value 'header-line-format)
	     'per-frame-header-line-face per-frame-header-mode-line--selected-window)))
	(insert header-l-str))
      (progn
	(progn
	  (setq-local mode-line-format nil)
	  (setq-local header-line-format nil)))
      (goto-char
       (point-min))
      (setq-local buffer-read-only t))))

(defun per-frame-mode-line--update-display
    (display)
  (funcall per-frame-mode-line-update-display-function display))

(defun per-frame-header-line--update-display
    (display)
  (funcall per-frame-header-line-update-display-function display))

(defun per-frame-mode-line--update nil
  (let*
      ((display
	(per-frame-mode-line--get-create-display))
       (win
	(cdr
	 (assq 'win display)))
       (cwin
	(selected-window)))
    (unless
	(eq win cwin)
      (setq per-frame-header-mode-line--selected-window
	    (if
		(minibuffer-window-active-p cwin)
		(minibuffer-selected-window)
	      cwin)))
    (per-frame-mode-line--update-display display)))

(defun per-frame-header-line--update nil
  (let*
      ((display
	(per-frame-header-line--get-create-display))
       (win
	(cdr
	 (assq 'win display)))
       (cwin
	(selected-window)))
    (unless
	(eq win cwin)
      (setq per-frame-header-mode-line--selected-window
	    (if
		(minibuffer-window-active-p cwin)
		(minibuffer-selected-window)
	      cwin)))
    (per-frame-header-line--update-display display)))

(defun per-frame-header-mode-line--update nil
  (progn
    (progn
      (when per-frame-mode-line-mode
	(per-frame-mode-line--update))
      (when per-frame-header-line-mode
	(per-frame-header-line--update))))
  t)

(defun per-frame-mode-line--display-buffer-p
    (b)
  (eq b per-frame-mode-line--buffer))

(defun per-frame-header-line--display-buffer-p
    (b)
  (eq b per-frame-header-line--buffer))

(defun per-frame-header-mode-line--sleep nil
  (common-header-mode-line-rem-delayed-update-function #'per-frame-header-mode-line--update)
  (setq per-frame-header-mode-line--inhibit-delete-window-advice t per-frame-header-mode-line--inhibit-window-conf-get-advices t))

(defun per-frame-header-mode-line--wake nil
  (common-header-mode-line-add-delayed-update-function #'per-frame-header-mode-line--update)
  (setq per-frame-header-mode-line--inhibit-delete-window-advice nil per-frame-header-mode-line--inhibit-window-conf-get-advices nil))

(defun per-frame-mode-line--activate
    (&optional frames)
  (unless
      (listp frames)
    (setq frames
	  (list frames)))
  (unless frames
    (setq frames
	  (if
	      (and
	       (fboundp 'daemonp)
	       (daemonp))
	      (filtered-frame-list
	       #'(lambda
		   (f)
		   (and
		    (frame-live-p f)
		    (not
		     (eq f terminal-frame)))))
	    (frame-list))))
  (dolist
      (frame frames)
    (per-frame-mode-line--get-create-display frame))
  (add-to-list 'window-persistent-parameters
	       '(per-frame-mode-line-window . writable))
  (add-to-list 'window-persistent-parameters
	       '(no-other-window . writable))
  (ad-enable-advice #'delete-window 'around 'per-frame-header-mode-line--delete-window-adv)
  (ad-activate #'delete-window)
  (ad-enable-advice #'window-state-get 'around 'per-frame-header-mode-line--window-state-get-adv)
  (ad-activate #'window-state-get)
  (add-hook 'per-window-header-mode-line-ignore-buffer-functions #'per-frame-mode-line--display-buffer-p)
  (per-frame-header-mode-line--wake))

(defun per-frame-header-line--activate
    (&optional frames)
  (unless
      (listp frames)
    (setq frames
	  (list frames)))
  (unless frames
    (setq frames
	  (if
	      (and
	       (fboundp 'daemonp)
	       (daemonp))
	      (filtered-frame-list
	       #'(lambda
		   (f)
		   (and
		    (frame-live-p f)
		    (not
		     (eq f terminal-frame)))))
	    (frame-list))))
  (dolist
      (frame frames)
    (per-frame-header-line--get-create-display frame))
  (add-to-list 'window-persistent-parameters
	       '(per-frame-header-line-window . writable))
  (add-to-list 'window-persistent-parameters
	       '(no-other-window . writable))
  (ad-enable-advice #'delete-window 'around 'per-frame-header-mode-line--delete-window-adv)
  (ad-activate #'delete-window)
  (ad-enable-advice #'window-state-get 'around 'per-frame-header-mode-line--window-state-get-adv)
  (ad-activate #'window-state-get)
  (add-hook 'per-window-header-mode-line-ignore-buffer-functions #'per-frame-header-line--display-buffer-p)
  (per-frame-header-mode-line--wake))

(defun per-frame-mode-line--deactivate
    (&optional frames)
  (per-frame-header-mode-line--sleep)
  (unless
      (listp frames)
    (setq frames
	  (list frames)))
  (let
      (all-frames win all)
    (unless frames
      (setq frames
	    (frame-list)
	    all-frames t))
    (dolist
	(frame frames)
      (per-frame-mode-line--kill-display
       (frame-parameter frame 'per-frame-mode-line-display)))
    (unless
	(window-with-parameter 'per-frame-mode-line-window t)
      (setq all-frames t))
    (if all-frames
	(progn
	  (unless
	      (or per-frame-header-line-mode per-frame-mode-line-mode)
	    (ad-disable-advice #'delete-window 'around 'per-frame-header-mode-line--delete-window-adv)
	    (ad-activate #'delete-window)
	    (ad-disable-advice #'window-state-get 'around 'per-frame-header-mode-line--window-state-get-adv)
	    (ad-activate #'window-state-get)
	    (remove-hook 'per-window-header-mode-line-ignore-buffer-functions #'per-frame-mode-line--display-buffer-p)))
      (per-frame-header-mode-line--wake))))

(defun per-frame-header-line--deactivate
    (&optional frames)
  (per-frame-header-mode-line--sleep)
  (unless
      (listp frames)
    (setq frames
	  (list frames)))
  (let
      (all-frames win all)
    (unless frames
      (setq frames
	    (frame-list)
	    all-frames t))
    (dolist
	(frame frames)
      (per-frame-header-line--kill-display
       (frame-parameter frame 'per-frame-header-line-display)))
    (unless
	(window-with-parameter 'per-frame-header-line-window t)
      (setq all-frames t))
    (if all-frames
	(progn
	  (unless
	      (or per-frame-header-line-mode per-frame-mode-line-mode)
	    (ad-disable-advice #'delete-window 'around 'per-frame-header-mode-line--delete-window-adv)
	    (ad-activate #'delete-window)
	    (ad-disable-advice #'window-state-get 'around 'per-frame-header-mode-line--window-state-get-adv)
	    (ad-activate #'window-state-get)
	    (remove-hook 'per-window-header-mode-line-ignore-buffer-functions #'per-frame-header-line--display-buffer-p)))
      (per-frame-header-mode-line--wake))))

(defun per-frame-header-mode-line--can-delete-window-p
    (win)
  (if
      (or per-frame-header-line-mode per-frame-mode-line-mode)
      (not
       (or
	(window-parameter win 'per-frame-header-line-window)
	(window-parameter win 'per-frame-mode-line-window)
	(<
	 (length
	  (window-list nil 0 win))
	 3)))
    t))

(defadvice delete-window
    (around per-frame-header-mode-line--delete-window-adv)
  (if
      (and
       (not per-frame-header-mode-line--inhibit-delete-window-advice)
       (not
	(per-frame-header-mode-line--can-delete-window-p
	 (or
	  (ad-get-arg 0)
	  (selected-window)))))
      nil ad-do-it))

(defmacro with-suspended-per-frame-header-mode-line
    (&rest body)
  `(let
       (header-mode-lines-to-reactivate window-configuration-change-hook)
     (per-frame-header-mode-line--sleep)
     (unwind-protect
	 (progn ,@body)
       (per-frame-header-mode-line--wake))))

(defadvice window-state-get
    (around per-frame-header-mode-line--window-state-get-adv)
  (if
      (and
       (or per-frame-header-line-mode per-frame-mode-line-mode)
       (not per-frame-header-mode-line--inhibit-window-conf-get-advices))
      (with-suspended-per-frame-header-mode-line
       (let*
	   ((win
	     (ad-get-arg 0))
	    (frame
	     (window-frame win))
	    window-configuration-change-hook)
	 (progn
	   (progn
	     (per-frame-mode-line--kill-display
	      (frame-parameter frame 'per-frame-mode-line-display))
	     (per-frame-header-line--kill-display
	      (frame-parameter frame 'per-frame-header-line-display))))
	 (unless
	     (window-live-p win)
	   (setq win
		 (frame-root-window frame))
	   (ad-set-arg 0 win))
	 ad-do-it))
    ad-do-it))

;;;###autoload
(define-minor-mode per-frame-mode-line-mode "Toggle the `per-frame-mode-line-mode'.\nWhen active it draws a `mode-line' at the bottom(or top) of\nthe frame." :require 'per-frame-header-mode-line :group 'per-frame-mode-line :init-value nil :global t
  (if per-frame-mode-line-mode
      (per-frame-mode-line--activate)
    (per-frame-mode-line--deactivate)))

;;;###autoload
(define-minor-mode per-frame-header-line-mode "Toggle the `per-frame-header-line-mode'.\nWhen active it draws a `header-line' at the bottom(or top) of\nthe frame." :require 'per-frame-header-mode-line :group 'per-frame-header-line :init-value nil :global t
  (if per-frame-header-line-mode
      (per-frame-header-line--activate)
    (per-frame-header-line--deactivate)))

;;;###autoload
(define-minor-mode per-frame-header-mode-line-mode "`per-frame-header-line-mode' + `per-frame-mode-line-mode'." :require 'per-frame-header-mode-line :group 'per-frame-header-mode-line :init-value nil :global t
  (if per-frame-header-mode-line-mode
      (progn
	(progn
	  (per-frame-mode-line-mode 1)
	  (per-frame-header-line-mode 1)))
    (progn
      (progn
	(per-frame-mode-line-mode -1)
	(per-frame-header-line-mode -1)))))

(provide 'per-frame-header-mode-line)


;;; per-frame-header-mode-line.el ends here
