;;; Compiled snippets and support files for `typescript-mode'
;;; Snippet definitions:
;;;
(yas-define-snippets 'typescript-mode
                     '(("ng2-subscribe" "this.${1:service}.${2:function}(),\n	.subscribe(${3:arg} => this.${4:property} = ${3:arg});\n$5\n" "Angular 2 observable subscribe snippet" nil nil nil "/Users/cesc/src/emacs-angular2-snippets/typescript-mode/ng2-subscribe.yasnippet" nil nil)
                       ("ng2-service" "import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class ${1:ServiceName}Service {\n	$2\n	constructor() { }\n\n}\n" "Angular 2 service snippet" nil nil nil "/Users/cesc/src/emacs-angular2-snippets/typescript-mode/ng2-service.yasnippet" nil nil)
                       ("ng2-routes" "@Routes([\n    { path: '/${1:path}', component: ${2:component}Component }$3\n])\n" "Angular 2 route config snippet" nil nil nil "/Users/cesc/src/emacs-angular2-snippets/typescript-mode/ng2-routes.yasnippet" nil nil)
                       ("ng2-routerLink" "      [routerLink]=\"['${routeName}']\"\n    " "Angular 2 routerLink snippet" nil nil nil "/Users/cesc/src/emacs-angular2-snippets/typescript-mode/ng2-routerLink.yasnippet" nil nil)
                       ("ng2-route-path" "{ path: '/${1:path}', component: ${2:component}Component }$3\n" "Angular 2 route path snippet" nil nil nil "/Users/cesc/src/emacs-angular2-snippets/typescript-mode/ng2-route-path.yasnippet" nil nil)
                       ("ng2-pipe" "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n	name: '${1:name}'\n})\nexport class ${2:PipeName}Pipe implements PipeTransform {\n	transform(value: any, args: any[]): any {\n		$3\n	}\n}\n\n" "Angular 2 pipe snippet" nil nil nil "/Users/cesc/src/emacs-angular2-snippets/typescript-mode/ng2-pipe.yasnippet" nil nil)
                       ("ng2-module" "import { NgModule } from '@angular/core';\nimport { ${1:Name}Component }   from './${2:name}.component';\n\n@NgModule({\n      imports: [],\n      exports: [],\n      declarations: [${1:Name}Component],\n      providers: [],\n})\nexport class ${1:Name}Module { ${3:classCode} }\n" "Angular 2 Module snippet" nil nil nil "/Users/cesc/src/emacs-angular2-snippets/typescript-mode/ng2-module.yasnippet" nil nil)
                       ("ng2-module-routing" "import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { ${1:Name}Component } from './${2:name}.component';\n\nconst routes: Routes = [\n  { path: 'path', component: ${1:Name}Component },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ${1:Name}RoutingModule { }\n\nexport const routedComponents = [${1:Name}Component];\n" "Angular routing module file (forChild)" nil nil nil "/Users/cesc/src/emacs-angular2-snippets/typescript-mode/ng2-module-routing.yasnippet" nil nil)
                       ("ng2-module-root" "import { NgModule } from '@angular/core';\nimport { BrowserModule  } from '@angular/platform-browser';\nimport { HttpModule } from '@angular/http';\n\nimport { ${1:App}Component } from './${2:app}.component';\nimport { routing } from './${2:app}.routing'; //TODO: Create ${2:app}.routing, \n\n@NgModule({\n  imports: [\n    BrowserModule,\n    HttpModule,\n    routing\n  ],\n  declarations: [${1:App}Component],\n  providers: [/* TODO: Providers go here */],\n  bootstrap: [${1:App}Component],\n}),\nexport class ${1:App}Module { }\n" "Angular 2 Root Module snippet" nil nil nil "/Users/cesc/src/emacs-angular2-snippets/typescript-mode/ng2-module-root.yasnippet" nil nil)
                       ("ng2-httpclient-get" "return this.httpClient.get('url');\n" "Angular HttpClient.get" nil nil nil "/Users/cesc/src/emacs-angular2-snippets/typescript-mode/ng2-httpclient-get.yasnippet" nil nil)
                       ("ng2-http-get" "return this.http.get('${1:url}')\n	.map((res: Response) => res.json()$2);\n" "Angular 2 Http.get snippet" nil nil nil "/Users/cesc/src/emacs-angular2-snippets/typescript-mode/ng2-http-get.yasnippet" nil nil)
                       ("ng2-guard-can-load" "import { Injectable } from '@angular/core';\nimport { CanLoad, Route } from '@angular/router';\n\n@Injectable()\nexport class ${1:NameGuard} implements CanLoad {\n  constructor() { }\n\n  canLoad(route: Route) {\n    return true;\n  }\n}\n" "Angular CanLoad guard" nil nil nil "/Users/cesc/src/emacs-angular2-snippets/typescript-mode/ng2-guard-can-load.yasnippet" nil nil)
                       ("ng2-guard-can-deactivate" "import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanDeactivate, RouterStateSnapshot } from '@angular/router';\nimport { Observable } from 'rxjs/Observable';\n\nimport { ${2:NameComponent} } from './${2:nameComponent}.component';\n\n// Consider using this interface for all CanDeactivate guards,\n// and have your components implement this interface, too.\n//\n//   e.g. export class CanDeactivateGuard implements CanDeactivate<CanComponentDeactivate> {\n//\n// export interface CanComponentDeactivate {\n// canDeactivate: () => any;\n// }\n\n@Injectable()\nexport class ${1:NameGuard} implements CanDeactivate<${2:NameComponent}> {\n  canDeactivate(\n    component: ${2:NameComponent},\n    currentRoute: ActivatedRouteSnapshot, \n    currentState: RouterStateSnapshot\n  ): Observable<boolean>|Promise<boolean>|boolean {\n    return false;\n  }\n}\n" "Angular CanDeactivate guard" nil nil nil "/Users/cesc/src/emacs-angular2-snippets/typescript-mode/ng2-guard-can-deactivate.yasnippet" nil nil)
                       ("ng2-guard-can-activate" "import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot } from '@angular/router';\n\n@Injectable()\nexport class ${1:Name}Guard implements CanActivate {\n  constructor() { }\n\n  canActivate(route: ActivatedRouteSnapshot state: RouterStateSnapshot) {\n    return true${2:Code};\n  }\n}\n" "Angular CanActivate guard" nil nil nil "/Users/cesc/src/emacs-angular2-snippets/typescript-mode/ng2-guard-can-activate.yasnippet" nil nil)
                       ("ng2-guard-can-activate-child" "import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivateChild, RouterStateSnapshot } from '@angular/router';\n\n@Injectable()\nexport class ${1:NameGuard} implements CanActivateChild {\n  constructor() { }\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    return true${2:Code};\n  }\n}\n" "Angular CanActivateChild guard" nil nil nil "/Users/cesc/src/emacs-angular2-snippets/typescript-mode/ng2-guard-can-activate-child.yasnippet" nil nil)
                       ("ng2-directive" "import { Directive } from '@angular/core';\n\n@Directive({ selector: '[${1:selector-name}]' })\nexport class ${2:Name}Directive {\n  constructor() { }\n}\n" "Angular Directive" nil nil nil "/Users/cesc/src/emacs-angular2-snippets/typescript-mode/ng2-directive.yasnippet" nil nil)
                       ("ng2-component" "import { Component, OnInit } from '@angular/core';\n      \n@Component({\n	moduleId: module.id,\n	selector: '${1:selector}',\n	templateUrl: '${1:selector}.component.html'\n})\nexport class ${3:ComponentName}Component implements OnInit {\n	constructor() { }\n\n	ngOnInit() { }\n\n	$4\n}\n" "Angular 2 component snippet" nil nil nil "/Users/cesc/src/emacs-angular2-snippets/typescript-mode/ng2-component.yasnippet" nil nil)
                       ("ng2-component-root" "import { Component } from '@angular/core';\nimport { HTTP_PROVIDERS } from '@angular/http';\nimport { Routes, ROUTER_DIRECTIVES, ROUTER_PROVIDERS } from '@angular/router';\nimport 'rxjs/Rx'; // load the full rxjs\n\n@Component({\n	moduleId: module.id,\n	selector: '${1:selector}',\n	templateUrl: '${2:name}.component.html',\n	directives: [ROUTER_DIRECTIVES],\n	providers: [\n	  HTTP_PROVIDERS,\n	  ROUTER_PROVIDERS\n	]\n})\n@Routes([\n	$3\n])\nexport class AppComponent {}\n" "Angular 2 App root component snippet" nil nil nil "/Users/cesc/src/emacs-angular2-snippets/typescript-mode/ng2-component-root.yasnippet" nil nil)
                       ("ng2-bootstrap" "import { enableProdMode } from '@angular/core';\nimport { bootstrap } from '@angular/platform-browser-dynamic';\n\nimport { ${1:AppComponent} } from './${2:name}.component';\n\n// enableProdMode();\n\nbootstrap(${1:AppComponent})\n	.then(success => console.log(`Bootstrap success`))\n	.catch(error => console.log(error));\n$3\n" "Angular 2 bootstrap snippet" nil nil nil "/Users/cesc/src/emacs-angular2-snippets/typescript-mode/ng2-bootstrap.yasnippet" nil nil)))


;;; Do not edit! File generated at Thu Feb 15 15:52:40 2018
