* snails

Keymap:
| Key         | Description               |
| C-n         | Select next candidate     |
| C-p         | Select previous candidate |
| M-n         | Select next candidate     |
| M-p         | Select previous candidate |
| C-v         | Select next backend       |
| M-v         | Select previous backend   |
| M-j         | Select next backend       |
| M-k         | Select previous backend   |
| C-m         | Confirm candiate          |
| RET         | Confirm candiate          |
| M-w         | Copy candidate            |
| C-g         | Quit snails               |
| ESC ESC ESC | Quit snails               |
| M-h         | Quit snails               |

#+BEGIN_SRC emacs-lisp :tangle init.el
  (use-package snails
  :ensure nil
  :load-path "packages/snails"
  :if window-system
  :bind
  ("M-s s" . snails)
  ("M-s g" . snails-current-project)
  ("M-s b" . snails-active-recent-buffers)
  ("M-s e" . snails-everywhere)
  :custom-face
  (snails-content-buffer-face ((t (:background "#111" :height 110))))
  (snails-input-buffer-face ((t (:background "#222" :foreground "gold" :height 110))))
  (snails-header-line-face ((t (:inherit font-lock-function-name-face :underline t :height 1.1))))
  :config
  (use-package exec-path-from-shell
    :if (featurep 'cocoa) :defer t)

  ;; Functions for specific backends
  (defun snails-current-project ()
    (interactive)
    (snails '(snails-backend-projectile snails-backend-rg snails-backend-fd)))
  (defun snails-active-recent-buffers ()
    (interactive)
    (snails '(snails-backend-buffer snails-backend-recentf)))
  (defun snails-everywhere ()
    (interactive)
    (snails '(snails-backend-everything snails-backend-mdfind)))
)
#+END_SRC

#+RESULTS:
: snails-everywhere



* PDF Tools

** Install pdf-tools if its not already installed
   #+BEGIN_SRC emacs-lisp :tangle init.el
  ;; (pdf-tools-install)
  ;; the docs say if i care about startup time, i should use pdf-loader-install instead of pdf-tools-install, but doenst say why
  ;; (pdf-loader-install)
   #+END_SRC

** Make buffer refresh every 1 second to PDF-tools updates the changed pdf
   #+BEGIN_SRC emacs-lisp :tangle init.el
  (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)
  ;; (add-hook 'pdf-view-mode-hook 'auto-revert-mode)
  ;; (add-hook 'doc-view-mode-hook 'auto-revert-mode)
   #+END_SRC

** PDF tools evil keybindings
   #+BEGIN_SRC emacs-lisp :tangle init.el
  (evil-define-key 'normal pdf-view-mode-map
    "h" 'pdf-view-previous-page-command
    "j" (lambda () (interactive) (pdf-view-next-line-or-next-page 5))
    "k" (lambda () (interactive) (pdf-view-previous-line-or-previous-page 5))
    "l" 'pdf-view-next-page-command)
   #+END_SRC




* Browsers integrations

** edit-server

Edit stuff in browsers with emacs
Used in adition with the Edit in Emacs plugin for Chrome
#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package edit-server
  :if (and window-system
           (not alternate-emacs))
  ;; :if window-system
  :ensure t
  :defer 5
  :disabled
  :config
  (edit-server-start)
)
#+END_SRC

** atomic-chrome

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package atomic-chrome
  :ensure t
  :disabled
  :config
  (atomic-chrome-start-server)
)
#+END_SRC

* ace jump mode

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package ace-jump-mode
  :disabled
  :ensure t
  :bind
  ("C-." . ace-jump-mode)
)
#+END_SRC


* flycheck inline

: Quick peek is an extension that embelishes flycheck inline messages

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package quick-peek
  :ensure t
  :disabled
)
#+END_SRC

   #+BEGIN_SRC emacs-lisp :tangle init.el
(use-package flycheck-inline
  :ensure t
  :disabled
  :hook
  (flycheck-mode . flycheck-inline-mode)
  :config
  ;; Set fringe style
  (setq flycheck-indication-mode 'right-fringe)

  (setq flycheck-mode-line-prefix "Syntax")

  ;; (global-flycheck-inline-mode)
  (setq flycheck-inline-display-function
        (lambda (msg pos)
          (let* ((ov (quick-peek-overlay-ensure-at pos))
                 (contents (quick-peek-overlay-contents ov)))
            (setf (quick-peek-overlay-contents ov)
                  (concat contents (when contents "\n") msg))
            (quick-peek-update ov)))
        flycheck-inline-clear-function #'quick-peek-hide))
#+END_SRC

* flycheck-pos-tip (show flycheck messages in tooltip)

;;; Show Flycheck errors in tooltip

: appearently depends on cask

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package flycheck-pos-tip
  :ensure t
  :disabled
  :defines flycheck-pos-tip-timeout
  :after flycheck
  :hook
  (global-flycheck-mode . flycheck-pos-tip-mode)
  :config
  (setq flycheck-pos-tip-timeout 30)
  (flycheck-pos-tip-mode)
)
#+END_SRC

* flycheck-popup-tip (show flycheck messages in tooltip)

There is another official flycheck-pos-tip extension for displaying errors under point. However, it does not display popup if you run Emacs under TTY. It displays message on echo area and that is often used for ELDoc. Also, popups made by pos-tip library does not always look good, especially on macOS and Windows.
: appearently depends on cask

#+BEGIN_SRC emacs-lisp :tangle init.el
;;; Show Flycheck errors in tooltip
(use-package flycheck-popup-tip
  :ensure t
  :disabled
  :after flycheck
  :hook
  (flycheck-mode . flycheck-popup-tip-mode)
  :config
  (setq flycheck-popup-tip-error-prefix "\u27a4") ;;  display arrow like this: `âž¤'
  ;; (setq flycheck-popup-tip-error-prefix "* ")
)
#+END_SRC


* ox-confluence

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package ox-confluence
  :defer 3
  :ensure nil
  :after org
)
#+END_SRC

* corral - intelligent surround text with auto-guess suggestions
#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package corral
  :ensure t
  :bind
  ("M-9" . corral-parentheses-backward)
  :config
  (setq corral-preserve-point t)
  ;;(global-set-key (kbd "M-9") 'corral-parentheses-backward)
  (global-set-key (kbd "M-0") 'corral-parentheses-forward)
  (global-set-key (kbd "M-[") 'corral-brackets-backward)
  (global-set-key (kbd "M-]") 'corral-brackets-forward)
  (global-set-key (kbd "M-{") 'corral-braces-backward)
  (global-set-key (kbd "M-}") 'corral-braces-forward)
  (global-set-key (kbd "M-\"") 'corral-double-quotes-backward)
)
#+END_SRC

* parinfer-mode

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package parinfer
  :ensure t
  :bind
  ("C-," . parinfer-toggle-mode)
  :init
  (progn
    (setq parinfer-extensions
          '(defaults       ; should be included.
            pretty-parens  ; different paren styles for different modes.
            evil           ; If you use Evil.
            ;lispy          ; If you use Lispy. With this extension, you should install Lispy and do not enable lispy-mode directly.
            paredit        ; Introduce some paredit commands.
            smart-tab      ; C-b & C-f jump positions and smart shift with tab & S-tab.
            smart-yank))   ; Yank behavior depend on mode.
    (add-hook 'clojure-mode-hook #'parinfer-mode)
    (add-hook 'emacs-lisp-mode-hook #'parinfer-mode)
    (add-hook 'common-lisp-mode-hook #'parinfer-mode)
    (add-hook 'scheme-mode-hook #'parinfer-mode)
    (add-hook 'lisp-mode-hook #'parinfer-mode))
    :config
    ;; auto switch to Indent Mode whenever parens are balance in Paren Mode
    (setq parinfer-auto-switch-indent-mode nil)  ;; default is nil
    (setq parinfer-lighters '(" Parinfer:Indent" . "Parinfer:Paren"))

)
#+END_SRC


* paredit

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package paredit
  :ensure t
  :config
  (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
  (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
  (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
  (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
  (add-hook 'scheme-mode-hook           #'enable-paredit-mode)
)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle init.el
#+END_SRC

* Disable <RET> for autocomplete and leave on TAB
#+BEGIN_SRC emacs-lisp :tangle init.el
;; (define-key ac-completing-map [return] nil)
;; (define-key ac-completing-map "\r" nil)
#+END_SRC

* pretty icons for company box
  ;; (use-package company-box
  ;;   :ensure t
  ;;   :diminish company-box-mode
  ;;   :functions (my-company-box--make-line
  ;;               my-company-box-icons--elisp)
  ;;   :init (setq company-box-icons-alist 'company-box-icons-all-the-icons)
  ;;   :commands (company-box--get-color
  ;;              company-box--resolve-colors
  ;;              company-box--add-icon
  ;;              company-box--apply-color
  ;;              company-box--make-line
  ;;              company-box-icons--elisp)
  ;;   :hook (company-mode . company-box-mode)
  ;;   :custom
  ;;   (company-box-backends-colors nil)
  ;;   (company-box-show-single-candidate t)
  ;;   (company-box-max-candidates 50)
  ;;   (company-box-doc-delay 0.3)
  ;;   :config
  ;;   ;; Support `company-common'
  ;;   (defun my-company-box--make-line (candidate)
  ;;     (-let* (((candidate annotation len-c len-a backend) candidate)
  ;;             (color (company-box--get-color backend))
  ;;             ((c-color a-color i-color s-color) (company-box--resolve-colors color))
  ;;             (icon-string (and company-box--with-icons-p (company-box--add-icon candidate)))
  ;;             (candidate-string (concat (propertize (or company-common "") 'face 'company-tooltip-common)
  ;;                                       (substring (propertize candidate 'face 'company-box-candidate) (length company-common) nil)))
  ;;             (align-string (when annotation
  ;;                             (concat " " (and company-tooltip-align-annotations
  ;;                                              (propertize " " 'display `(space :align-to (- right-fringe ,(or len-a 0) 1)))))))
  ;;             (space company-box--space)
  ;;             (icon-p company-box-enable-icon)
  ;;             (annotation-string (and annotation (propertize annotation 'face 'company-box-annotation)))
  ;;             (line (concat (unless (or (and (= space 2) icon-p) (= space 0))
  ;;                             (propertize " " 'display `(space :width ,(if (or (= space 1) (not icon-p)) 1 0.75))))
  ;;                           (company-box--apply-color icon-string i-color)
  ;;                           (company-box--apply-color candidate-string c-color)
  ;;                           align-string
  ;;                           (company-box--apply-color annotation-string a-color)))
  ;;             (len (length line)))
  ;;       (add-text-properties 0 len (list 'company-box--len (+ len-c len-a)
  ;;                                        'company-box--color s-color)
  ;;                            line)
  ;;       line))
  ;;   (advice-add #'company-box--make-line :override #'my-company-box--make-line)

  ;;   ;; Prettify icons
  ;;   (defun my-company-box-icons--elisp (candidate)
  ;;     (when (derived-mode-p 'emacs-lisp-mode)
  ;;       (let ((sym (intern candidate)))
  ;;         (cond ((fboundp sym) 'Function)
  ;;               ((featurep sym) 'Module)
  ;;               ((facep sym) 'Color)
  ;;               ((boundp sym) 'Variable)
  ;;               ((symbolp sym) 'Text)
  ;;               (t . nil)))))
  ;;   (advice-add #'company-box-icons--elisp :override #'my-company-box-icons--elisp)

  ;;   (when (and (display-graphic-p)
  ;;              (require 'all-the-icons nil t))
  ;;     (declare-function all-the-icons-faicon 'all-the-icons)
  ;;     (declare-function all-the-icons-material 'all-the-icons)
  ;;     (declare-function all-the-icons-octicon 'all-the-icons)
  ;;     (setq company-box-icons-all-the-icons
  ;;           `((Unknown . ,(all-the-icons-material "find_in_page" :height 0.85 :v-adjust -0.2))
  ;;             (Text . ,(all-the-icons-faicon "text-width" :height 0.8 :v-adjust -0.05))
  ;;             (Method . ,(all-the-icons-faicon "cube" :height 0.8 :v-adjust -0.05 :face 'all-the-icons-purple))
  ;;             (Function . ,(all-the-icons-faicon "cube" :height 0.8 :v-adjust -0.05 :face 'all-the-icons-purple))
  ;;             (Constructor . ,(all-the-icons-faicon "cube" :height 0.8 :v-adjust -0.05 :face 'all-the-icons-purple))
  ;;             (Field . ,(all-the-icons-octicon "tag" :height 0.8 :v-adjust 0 :face 'all-the-icons-lblue))
  ;;             (Variable . ,(all-the-icons-octicon "tag" :height 0.8 :v-adjust 0 :face 'all-the-icons-lblue))
  ;;             (Class . ,(all-the-icons-material "settings_input_component" :height 0.85 :v-adjust -0.2 :face 'all-the-icons-orange))
  ;;             (Interface . ,(all-the-icons-material "share" :height 0.85 :v-adjust -0.2 :face 'all-the-icons-lblue))
  ;;             (Module . ,(all-the-icons-material "view_module" :height 0.85 :v-adjust -0.2 :face 'all-the-icons-lblue))
  ;;             (Property . ,(all-the-icons-faicon "wrench" :height 0.8 :v-adjust -0.05))
  ;;             (Unit . ,(all-the-icons-material "settings_system_daydream" :height 0.85 :v-adjust -0.2))
  ;;             (Value . ,(all-the-icons-material "format_align_right" :height 0.85 :v-adjust -0.2 :face 'all-the-icons-lblue))
  ;;             (Enum . ,(all-the-icons-material "storage" :height 0.85 :v-adjust -0.2 :face 'all-the-icons-orange))
  ;;             (Keyword . ,(all-the-icons-material "filter_center_focus" :height 0.85 :v-adjust -0.2))
  ;;             (Snippet . ,(all-the-icons-material "format_align_center" :height 0.85 :v-adjust -0.2))
  ;;             (Color . ,(all-the-icons-material "palette" :height 0.85 :v-adjust -0.2))
  ;;             (File . ,(all-the-icons-faicon "file-o" :height 0.85 :v-adjust -0.05))
  ;;             (Reference . ,(all-the-icons-material "collections_bookmark" :height 0.85 :v-adjust -0.2))
  ;;             (Folder . ,(all-the-icons-faicon "folder-open" :height 0.85 :v-adjust -0.05))
  ;;             (EnumMember . ,(all-the-icons-material "format_align_right" :height 0.85 :v-adjust -0.2 :face 'all-the-icons-lblue))
  ;;             (Constant . ,(all-the-icons-faicon "square-o" :height 0.85 :v-adjust -0.05))
  ;;             (Struct . ,(all-the-icons-material "settings_input_component" :height 0.85 :v-adjust -0.2 :face 'all-the-icons-orange))
  ;;             (Event . ,(all-the-icons-faicon "bolt" :height 0.8 :v-adjust -0.05 :face 'all-the-icons-orange))
  ;;             (Operator . ,(all-the-icons-material "control_point" :height 0.85 :v-adjust -0.2))
  ;;             (TypeParameter . ,(all-the-icons-faicon "arrows" :height 0.8 :v-adjust -0.05))
  ;;             (Template . ,(all-the-icons-material "format_align_center" :height 0.85 :v-adjust -0.2)))
  ;;           company-box-icons-alist 'company-box-icons-all-the-icons))
  ;; )
