#+OPTIONS: toc:0 num:nil
# #######################################################################
#+TITLE:     gugutz emacs config
#+SUBTITLE:  ORGfied configuration for Emacs
#+AUTHOR:    Gustavo P Borges
#+EMAIL:     gugutz@gmail.com
#+DESCRIPTION: This file is compiled to init.el automatically on every save
# #######################################################################

* Personal information

#+BEGIN_SRC emacs-lisp :tangle init.el
  (setq user-full-name "Gustavo P Borges")
  (setq user-mail-address "gugutz@gmail.com")
  (setq work-mail-address "gugutz@stairs.studio")
  (setq gmail-address "gugutz@gmail.com")
  (setq nickname "gugutz")

  ;; my secrets
(let ((secret.el (expand-file-name ".secret.el" user-emacs-directory)))
  (when (file-exists-p secret.el)
    (load secret.el)))
  ;; (load-library "~/dotfiles/emacs.d/secrets.el.gpg")
#+END_SRC

* Configuration variables

These are values that are used throuhgout this configuration
Put here for convenient editing

#+BEGIN_SRC emacs-lisp :tangle init.el
(defvar tau/erc-nick               nil        "The ERC nick to use.")
(defvar tau/erc-password           nil        "The ERC password to use.")
(defvar tau/erc-port               nil        "The ERC port to use.")
(defvar tau/erc-server             nil        "The ERC server to use.")
(defvar tau/font-family            "Courier"  "The font to use.")
(defvar tau/font-size-default      110        "The font size to use for default text.")
(defvar tau/font-size-header-line  80        "The font size to use for the header-line.")
(defvar tau/font-size-mode-line    100        "The font size to use for the mode-line.")
(defvar tau/font-size-small        100        "The font size to use for smaller text.")
(defvar tau/font-size-title        140        "The font size to use for titles.")
(defvar tau/indent-js                2        "The font size to use for titles.")
(defvar tau/indent-html              4        "The font size to use for titles.")

(setq my-theme 'vscode-default-dark)
#+END_SRC

* Observations about this config
: Keybindings use the <kbd> macro, as recommended in Mastering Emacs:
https://www.masteringemacs.org/article/mastering-key-bindings-emacs

: For native packages that come with emacs, `:ensure nil` must be set or use-package will try to download those packages from melpa and break

Set Face attribute
the argument after the FACE is the FRAME
If its nil, it applied that face customization to existing and all new frames
If its t, it only applies to newly created frames
set-face-attribute face frame &rest arguments

** Posframe position options

| frame-center               | "Center of the frame"                      |
| frame-top-center           | "Centered at the top of the frame"         |
| frame-top-left-corner      | "Left corner at the top of the frame"      |
| frame-top-right-corner     | "Right corner at the top of the frame"     |
| frame-bottom-left-corner   | "Left corner at the bottom of the frame"   |
| frame-bottom-right-corner  | "Right corner at the bottom of the frame"  |
| window-center              | "Center of the window"                     |
| window-top-left-corner     | "Left corner at the top of the window"     |
| window-top-right-corner    | "Right corner at the top of the window"    |
| window-bottom-left-corner  | "Left corner at the bottom of the window"  |
| window-bottom-right-corner | "Right corner at the bottom of the window" |
| point-top-left-corner      | "Top left corner of point"                 |
| point-bottom-left-corner   | "Bottom left corner of point"              |


* Recompile init.el everytime emacs.org is changed and saved

  : Moved this to beggining of the file to avoid it not being parsed when theres an error in the middle of the file
  : It was being recompiled without this function so i had to manually re-copy first-init.el to make it compile first time again and again


  #+BEGIN_SRC emacs-lisp :tangle init.el
(defun /util/tangle-init ()
  (interactive)
  "If the current buffer is init.org' the code-blocks are
tangled, and the tangled file is compiled."
  (when (equal (buffer-file-name)
               (expand-file-name (concat user-emacs-directory "emacs.org")))
    ;; Avoid running hooks when tangling.
    (let ((prog-mode-hook nil))
      (org-babel-tangle)
      (byte-compile-file (concat user-emacs-directory "init.el")))))
  #+END_SRC

  #+BEGIN_SRC emacs-lisp :tangle init.el
  (add-hook 'after-save-hook #'/util/tangle-init)
  #+END_SRC
* Garbage Collection

This part was taken from MEMACS
Source: https://github.com/MatthewZMD/.emacs.d/blob/master/init.el

#+BEGIN_SRC emacs-lisp :tangle init.el
;; BetterGC
(defvar better-gc-cons-threshold 67108864 ; 64mb
  "The default value to use for `gc-cons-threshold'.
If you experience freezing, decrease this.  If you experience stuttering, increase this.")

(add-hook 'emacs-startup-hook
          (lambda ()
            (setq gc-cons-threshold better-gc-cons-threshold)
            (setq file-name-handler-alist file-name-handler-alist-original)
            (makunbound 'file-name-handler-alist-original)))
;; -BetterGC
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle init.el
;; AutoGC
(add-hook 'emacs-startup-hook
          (lambda ()
            (if (boundp 'after-focus-change-function)
                (add-function :after after-focus-change-function
                              (lambda ()
                                (unless (frame-focus-state)
                                  (garbage-collect))))
              (add-hook 'after-focus-change-function 'garbage-collect))
            (defun gc-minibuffer-setup-hook ()
              (setq gc-cons-threshold (* better-gc-cons-threshold 2)))

            (defun gc-minibuffer-exit-hook ()
              (garbage-collect)
              (setq gc-cons-threshold better-gc-cons-threshold))

            (add-hook 'minibuffer-setup-hook #'gc-minibuffer-setup-hook)
            (add-hook 'minibuffer-exit-hook #'gc-minibuffer-exit-hook)))
;; -AutoGC
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle init.el
;; First save the current value of gc-cons-threshold to restore it after the init file is loaded at the very bottom of this file
;;(setq gc-threshold-original gc-cons-threshold)

;; reduce the frequency of garbage collection by making it happen on
;; each 50MB of allocated data (the default is on every 0.76MB)
;;(setq gc-cons-threshold 50000000) ;; 50mb

;; GC only with 500mb of data allocated
;; (setq gc-cons-percentage 0.5)

;; GC after 5s idle time
;; (run-with-idle-timer 5 t #'garbage-collect)

;;(setq garbage-collection-messages t)
;;(setq inhibit-compacting-font-caches t)      ;; Don’t compact font caches during GC (garbage collection).

;; Restore original gc value after init
;; (add-hook 'after-init-hook (lambda () (setq gc-cons-threshold gc-threshold-original)))
#+END_SRC


* Packages

** package repositories

#+BEGIN_SRC emacs-lisp :tangle init.el
(require 'package)
;; add melpa stable emacs package repository
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/"))
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t) ; Org-mode's repository
#+END_SRC

** initialize packages
#+BEGIN_SRC emacs-lisp :tangle init.el
(package-initialize)
#+END_SRC

moved this part to beggining of the file because if the
custom-safe-themes variable is not set before smart-mode-line (sml) activates
emacs asks 2 annoying confirmations on every startup before actually starting

#+BEGIN_SRC emacs-lisp :tangle init.el
(custom-set-variables
;; custom-set-variables was added by Custom.
;; If you edit it by hand, you could mess it up, so be careful.
;; Your init file should contain only one such instance.
;; If there is more than one, they won't work right.
'(custom-safe-themes
   (quote
   ("84d2f9eeb3f82d619ca4bfffe5f157282f4779732f48a5ac1484d94d5ff5b279" "57f95012730e3a03ebddb7f2925861ade87f53d5bbb255398357731a7b1ac0e0" "3c83b3676d796422704082049fc38b6966bcad960f896669dfc21a7a37a748fa" default)))
   '(fci-rule-color "#3E4451")
   '(package-selected-packages
     (quote
     (pdf-tools ox-pandoc ox-reveal org-preview-html latex-preview-pane smart-mode-line-powerline-theme base16-theme gruvbox-theme darktooth-theme rainbow-mode smartscan restclient editorconfig prettier-js pandoc rjsx-mode js2-refactor web-mode evil-org multiple-cursors flycheck smart-mode-line ## evil-leader evil-commentary evil-surround htmlize magit neotree evil json-mode web-serverx org))))
   (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   )
#+END_SRC

** Add the folder 'config' to emacs load-path so i can require stuff from there

#+BEGIN_SRC emacs-lisp :tangle init.el
(add-to-list 'load-path (expand-file-name "config" user-emacs-directory))
;; (add-to-list 'load-path "~/dotfiles/emacs.d/config")
#+END_SRC

** preparing environment to load stuff

#+BEGIN_SRC emacs-lisp :tangle init.el
;; Init time start
(defvar my-init-el-start-time (current-time) "Time when init.el was started")
#+END_SRC

** use-package

*** Install use-package if not already installed
#+BEGIN_SRC emacs-lisp :tangle init.el
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package)
)
#+END_SRC

*** load use-package
#+BEGIN_SRC emacs-lisp :tangle init.el
(eval-when-compile
  (require 'use-package))
#+END_SRC

*** Enable use-package extension `ensure-system-package`
#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package use-package-ensure-system-package
  :ensure t
  :init
  ;; use sudo when needed
  (setq system-packages-use-sudo t)
)
#+END_SRC

*** Set `:ensure t` globally for all packages using use-package

: this is disabled for now as i preffer to specify for each package
#+BEGIN_SRC emacs-lisp :tangle init.el
  (require 'use-package-ensure)
  ;; (setq use-package-always-ensure t)
#+END_SRC

*** Auto update packages
#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package auto-package-update
  :config
  (setq auto-package-update-interval 7) ;; in days
  (setq auto-package-update-prompt-before-update t)
  (setq auto-package-update-delete-old-versions t)
  (setq auto-package-update-hide-results t)
  (auto-package-update-maybe)
)
#+END_SRC

** install diminish

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package diminish
  :ensure t
)
#+END_SRC


* GPG Encryption

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package epa-file
  :config
  (epa-file-enable)
  (setq epa-file-encrypt-to '("gugutz@gmail.com"))

  ;; Control whether or not to pop up the key selection dialog.
  (setq epa-file-select-keys 0)
  ;; Cache passphrase for symmetric encryption.
  (setq epa-file-cache-passphrase-for-symmetric-encryption t)
)
#+END_SRC


* email

#+BEGIN_SRC emacs-lisp :tangle init.el

(use-package gnus
  :ensure nil
  :config
  (setq user-mail-address "gugutz@gmail.com"
        user-full-name "tau")

  (setq gnus-select-method
        '(nnimap "gmail"
           (nnimap-address "imap.gmail.com")
           (nnimap-server-port 993)
           (nnimap-stream ssl)))

  (setq smtpmail-smtp-server "smtp.gmail.com"
        smtpmail-smtp-service 587
        gnus-ignored-newsgroups "^to\\.\\|^[0-9. ]+\\( \\|$\\)\\|^[\"]\"[#'()]")

  (setq gnus-thread-sort-functions
        '(gnus-thread-sort-by-most-recent-date
          (not gnus-thread-sort-by-number)))

  (defun my-gnus-group-list-subscribed-groups ()
    "List all subscribed groups with or without un-read messages"
    (interactive)
    (gnus-group-list-all-groups 5))

  (define-key gnus-group-mode-map
    ;; list all the subscribed groups even they contain zero un-read messages
        (kbd "o") 'my-gnus-group-list-subscribed-groups)
)
#+END_SRC

* General editor settings

** Emacs Server

Allow access from emacsclient

#+BEGIN_SRC emacs-lisp :tangle init.el
  ;; (use-package server
  ;;   :ensure nil
  ;;   :init
  ;;   (unless (or (daemonp) (server-running-p))
  ;;     (server-start))
  ;;   :hook (after-init . server-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle init.el
  (require 'server)
  (unless (or (daemonp) (server-running-p))
    (server-start))
#+END_SRC

** set default font

Find the first font in the list and use it

#+BEGIN_SRC emacs-lisp :tangle init.el
(require 'cl)
(defun font-candidate (&rest fonts)
  "Return existing font which first match."
  (find-if (lambda (f) (find-font (font-spec :name f))) fonts))

;; define list of fonts to be used in the above function
;; the first one found will be used
(set-face-attribute 'default nil :font (font-candidate '"DejaVu Sans Mono-10:weight=normal"
                                                        "Hack-10:weight=normal"
                                                        "Consolas-10:weight=normal"
                                                        "Droid Sans Mono-10:weight=normal"
                                                        "DejaVu Sans Mono-10:weight=normal"
                                                        "Ubuntu Mono-12:weight=normal"))
#+END_SRC

** visual-line-mode (word wrap)
#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package visual-line-mode
  :ensure nil
  :hook
  (prog-mode . turn-on-visual-line-mode)
  (text-mode . turn-on-visual-line-mode)
)
#+END_SRC

** Prevent emacs to create lockfiles (.#files#).

PS: this also stops preventing editing colisions, so watch out
#+BEGIN_SRC emacs-lisp :tangle init.el
(setq create-lockfiles nil)
#+END_SRC

** Use the system clipboard

Enable copy/past-ing from clipboard

#+BEGIN_SRC emacs-lisp :tangle init.el
(setq x-select-enable-clipboard t)
#+END_SRC

** Always follow symbolic links to edit the 'actual' file it points to

#+BEGIN_SRC emacs-lisp :tangle init.el
(setq vc-follow-symlinks t)
#+END_SRC

** Save all tempfiles in $TMPDIR/emacs$UID/

#+BEGIN_SRC emacs-lisp :tangle init.el
(defconst emacs-tmp-dir (expand-file-name (format "emacs%d" (user-uid)) temporary-file-directory))
(setq backup-directory-alist
    `((".*" . ,emacs-tmp-dir)))
(setq auto-save-file-name-transforms
    `((".*" ,emacs-tmp-dir t)))
(setq auto-save-list-file-prefix
    emacs-tmp-dir)
#+END_SRC

** dont make backup files

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package files
  :ensure nil
  :config
  (setq make-backup-files nil)
  ;; dont ask confirmation to kill processes
  ;;(setq confirm-kill-processes nil)
)
#+END_SRC

** dont ask confirmation to kill processes

#+BEGIN_SRC emacs-lisp :tangle init.el
(setq confirm-kill-processes nil)
#+END_SRC

** Disable the annoying Emacs bell ring (beep)

#+BEGIN_SRC emacs-lisp :tangle init.el
(setq ring-bell-function 'ignore)
#+END_SRC

** Create alias to yes-or-no anwsers (y-or-n-p

 #+BEGIN_SRC emacs-lisp :tangle init.el
(defalias 'yes-or-no-p 'y-or-n-p)
(fset 'yes-or-no-p 'y-or-n-p)
 #+END_SRC

** dont ask for confirmation for opening large files

 #+BEGIN_SRC emacs-lisp :tangle init.el
(setq large-file-warning-threshold nil) ;; Don’t warn me about opening large files
 #+END_SRC

** display-line-numbers

Released with Emacs 26 (released in 2018-05)
#+BEGIN_SRC emacs-lisp :tangle init.el

(use-package display-line-numbers
  :if (version<= "26.0.50" emacs-version)
  :ensure nil
  :init
  (setq display-line-numbers-grow-only t)
  (setq display-line-numbers-width-start t)
  ;; old linum-mode variables, check if they work with new display-line-numbers-mode
  ;; (setq linum-format 'dynamic)
  ;; (setq linum-format " %d ") ;; one space separation between the linenumber display and the buffer contents:
  ;; (setq linum-format "%4d “) ;; 4 character and a space for line numbers
  (setq linum-format "%4d \u2502 ") ; 4 chars and a space with solid line separator
  :config
  ;;(global-display-line-numbers-mode)
  ;; for some reason the hooks for diplay line numbers wont work if i put them in use-package `:hook'. it has to be after `:config'
  (add-hook 'prog-mode-hook #'display-line-numbers-mode)
  (add-hook 'text-mode-hook #'display-line-numbers-mode)

  ;; Select lines by click-dragging on the margin. Tested with GNU Emacs 23.3
  (defvar *linum-mdown-line* nil)
  (defun line-at-click ()
    (save-excursion
    (let ((click-y (cdr (cdr (mouse-position))))
        (line-move-visual-store line-move-visual))
      (setq line-move-visual t)
      (goto-char (window-start))
      (next-line (1- click-y))
      (setq line-move-visual line-move-visual-store)
      ;; If you are using tabbar substitute the next line with
      (line-number-at-pos))))

  (defun md-select-linum ()
    (interactive)
    (goto-line (line-at-click))
    (set-mark (point))
    (setq *linum-mdown-line*
      (line-number-at-pos)))

  (defun mu-select-linum ()
    (interactive)
    (when *linum-mdown-line*
    (let (mu-line)
      ;; (goto-line (line-at-click))
      (setq mu-line (line-at-click))
      (goto-line (max *linum-mdown-line* mu-line))
      (set-mark (line-end-position))
      (goto-line (min *linum-mdown-line* mu-line))
      (setq *linum-mdown*
        nil))))

  (global-set-key (kbd "<left-margin> <down-mouse-1>") 'md-select-linum)
  (global-set-key (kbd "<left-margin> <mouse-1>") 'mu-select-linum)
  (global-set-key (kbd "<left-margin> <drag-mouse-1>") 'mu-select-linum)
)

#+END_SRC

** minibuffer history

#+BEGIN_SRC emacs-lisp :tangle init.el
(savehist-mode 1)
#+END_SRC

** Turn on auto-revert mode (auto updates files changed on disk)

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package autorevert
  :ensure nil
  :hook
  (after-init . global-auto-revert-mode)
  :config
  (setq auto-revert-interval 0.5)
  (setq auto-revert-interval 2)
  (setq auto-revert-check-vc-info t)
  (setq auto-revert-verbose nil)
)
#+END_SRC

** C-n insert newlines if the point is at the end of the buffer.

: Useful, as it means you won’t have to reach for the return key to add newlines!
#+BEGIN_SRC emacs-lisp :tangle init.el
(setq next-line-add-newlines t)
#+END_SRC

** Remove the ^M characters from files that contains Unix and DOS line endings

#+BEGIN_SRC emacs-lisp :tangle init.el
(defun remove-dos-eol ()
  "Do not show ^M in files containing mixed UNIX and DOS line endings."
  (interactive)
  (setq buffer-display-table (make-display-table))
  (aset buffer-display-table ?\^M [])
)
#+END_SRC

*** Hook it to text-mode and prog-mode
#+BEGIN_SRC emacs-lisp :tangle init.el
(add-hook 'text-mode-hook 'remove-dos-eol)
(add-hook 'prog-mode-hook 'remove-dos-eol)
#+END_SRC

** Increase, decrease and adjust font size

#+BEGIN_SRC emacs-lisp :tangle init.el
(global-set-key (kbd "C-S-+") #'text-scale-increase)
(global-set-key (kbd "C-S-_") #'text-scale-decrease)
(global-set-key (kbd "C-S-)") #'text-scale-adjust)
#+END_SRC

** expand-region

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package expand-region
  :ensure t
  :defer t
  :bind
  ([(control shift iso-lefttab)] . 'er/expand-region)
)
#+END_SRC

** refresh buffer with F5
#+BEGIN_SRC emacs-lisp :tangle init.el
(global-set-key [f5] '(lambda () (interactive) (revert-buffer nil t nil)))
#+END_SRC
** C-k kills current buffer without having to select which buffer

By default C-x k prompts to select which buffer should be selected.
I almost always want to kill the current buffer, so this snippet helps in that.
#+BEGIN_SRC emacs-lisp :tangle init.el
;; Kill current buffer; prompt only if
;; there are unsaved changes.
(global-set-key (kbd "C-x k")
  '(lambda () (interactive) (kill-buffer (current-buffer)))
)
#+END_SRC

** warn when opening large files

#+BEGIN_SRC emacs-lisp :tangle init.el
;; warn when opening files bigger than 100MB
(setq large-file-warning-threshold 100000000)
#+END_SRC

** add final newline

#+BEGIN_SRC emacs-lisp :tangle init.el
(setq require-final-newline t)
#+END_SRC

** fill column

Sets a 80 character line width

#+BEGIN_SRC emacs-lisp :tangle init.el
 (setq-default fill-column 80)
(setq auto-fill-mode 1)
#+END_SRC

** preffer UTF-8 coding system
#+BEGIN_SRC emacs-lisp :tangle init.el
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
#+END_SRC

** delete selection mode

Delete Selection mode lets you treat an Emacs region much like a typical text selection outside of Emacs: You can replace the active region just by typing text, and you can delete the selected text just by hitting the Backspace key (‘DEL’).

According to the Emacs manual,
#+begin_quote
If you enable Delete Selection mode, a minor mode, then inserting text while the mark is active causes the selected text to be deleted first. This also deactivates the mark. Many graphical applications follow this convention, but Emacs does not.
#+end_quote

#+BEGIN_SRC emacs-lisp :tangle init.el
(delete-selection-mode 1)
#+END_SRC

** auto balance windows on opening and closing frames

#+BEGIN_SRC emacs-lisp :tangle init.el
(setq window-combination-resize t)
#+END_SRC

** set default line spacing

#+BEGIN_SRC emacs-lisp :tangle init.el
;; (setq-default line-spacing 1) ;; A nice line height
(setq-default line-spacing 3)
#+END_SRC

** fix wierd color escape system

#+BEGIN_SRC emacs-lisp :tangle init.el
(setq system-uses-terminfo nil) ;; Fix weird color escape sequences
#+END_SRC

** confirm before closing emacs

#+BEGIN_SRC emacs-lisp :tangle init.el
;; (setq confirm-kill-emacs 'yes-or-no-p) ;; Ask for confirmation before closing emacs
#+END_SRC

** select window for help

#+BEGIN_SRC emacs-lisp :tangle init.el
(setq help-window-select t)
#+END_SRC

* Code editing settings
** subword-mode

: Alt+x subword-mode. It change all cursor movement/edit commands to stop in-between the “camelCase” words.
: subword-mode and superword-mode are mutally exclusive. Turning one on turns off the other.

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package subword
  :ensure nil
  :hook
  (clojure-mode . subword-mode)
  (ruby-mode . subword-mode)
  (enh-ruby-mode . subword-mode)
  (elixir-mode . subword-mode)
)
#+END_SRC

** superword-mode

: Alt+x superword-mode (emacs 24.4) is similar. It treats text like “x_y” as one word. Useful for “snake_case”.
: subword-mode and superword-mode are mutally exclusive. Turning one on turns off the other.

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package superword
  :ensure nil
  :hook
  (js2-mode . superword-mode)
)
#+END_SRC

** default indentation
#+BEGIN_SRC emacs-lisp :tangle init.el
(setq-default indent-tabs-mode nil)
;; C e C-like langs default indent size
(setq-default tab-width 2)
;; Perl default indent size
(setq-default cperl-basic-offset 2)
(setq-default c-basic-offset 2)
#+END_SRC

** Use unix-conf-mode for .*rc files
#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package conf-mode
  :mode
  (;; systemd
    ("\\.service\\'"     . conf-unix-mode)
    ("\\.timer\\'"      . conf-unix-mode)
    ("\\.target\\'"     . conf-unix-mode)
    ("\\.mount\\'"      . conf-unix-mode)
    ("\\.automount\\'"  . conf-unix-mode)
    ("\\.slice\\'"      . conf-unix-mode)
    ("\\.socket\\'"     . conf-unix-mode)
    ("\\.path\\'"       . conf-unix-mode)

    ;; general
    ("conf\\(ig\\)?$"   . conf-mode)
    ("rc$"              . conf-mode))
)
;; (add-to-list 'auto-mode-alist '("\\.*rc$" . conf-unix-mode))
#+END_SRC

** iedit
#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package iedit
  :config
  (set-face-background 'iedit-occurrence "Magenta")
  :bind
  ("C-;" . iedit-mode)
)
#+END_SRC

** eldoc
Enable documentation for programming languages

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package eldoc
  :ensure nil
  :hook
  (prog-mode . eldoc-mode)
  ;;(prog-mode       . turn-on-eldoc-mode)
  ;; (cider-repl-mode . turn-on-eldoc-mode)
  :config
  ;; (global-eldoc-mode -1)
  ;; (add-hook 'prog-mode-hook 'eldoc-mode)
  (setq eldoc-idle-delay 0.4)
)
#+END_SRC

*** eldoc-box

Show eldoc info in a childframe

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package eldoc-box
  :ensure t
  :after eldoc
  :custom-face
  ;;(eldoc-box-border (t (:background "#202020"))))
  ;;(eldoc-box-body (t (:background "#202020"))))
  :config
  ;;(setq eldoc-box-max-pixel-width)
  ;;(setq eldoc-box-max-pixel-height)
  ;;(setq eldoc-box-only-multi-line)   ;;  Set this to non-nil and eldoc-box only display multi-line message in childframe. One line messages are left in minibuffer.
  ;; (eldoc-box-hover-mode)
  (eldoc-box-hover-at-point-mode)
)
#+END_SRC

** aggressive-indent-mode

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package aggressive-indent
  :ensure t
  :defer t
  :custom
  (aggressive-indent-comments-too t)
  :hook
  (emacs-lisp-mode . aggressive-indent-mode)
  :config
)
#+END_SRC

** interactive-align

 Keymap used in the minibuffer when ialign command is executed.
 |---------+--------------------------|
 | Key     | Command                  |
 |---------+--------------------------|
 | C-c C-r | ialign-toggle-repeat     |
 | C-c C-t | ialign-toggle-tabs       |
 | C-c M-c | ialign-toggle-case-fold  |
 | C-c +   | ialign-increment-spacing |
 | C-c -   | ialign-decrement-spacing |
 | C-c [   | ialign-decrement-group   |
 | C-c ]   | ialign-increment-group   |
 | C-c C-f | ialign-set-group         |
 | C-c C-s | ialign-set-spacing       |
 | C-c RET | ialign-commit            |
 | C-c C-c | ialign-update            |
 | C-c ?   | ialign-show-help         |
 |---------+--------------------------|

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package ialign
  :ensure t
  :bind
  ("C-x l" . ialign)
  :config
  ;;(setq ialign-default-spacing 32)
  (setq ialign-align-with-tabs nil) ;; default nil
  (setq ialign-auto-update t) ;; default t
)
#+END_SRC

** align.el

align text to a specific column, by regexp

This mode allows you to align regions in a context-sensitive fashion.
The classic use is to align assignments:

   int a = 1;
   short foo = 2;
   double blah = 4;

becomes

   int    a    = 1;
   short  foo  = 2;
   double blah = 4;

#+BEGIN_SRC emacs-lisp :tangle init.el
(defun align-values (start end)
  "Vertically aligns region based on lengths of the first value of each line.
Example output:

	foo        bar
	foofoo     bar
	foofoofoo  bar"
  (interactive "r")
  (align-regexp start end
				"\\S-+\\(\\s-+\\)"
				1 1 nil))


#+END_SRC

** align-regexp

#+BEGIN_SRC emacs-lisp :tangle init.el
;; align code in a pretty way
(global-set-key (kbd "C-x \\") #'align-regexp)
#+END_SRC

** dumb-jump
Emacs jump to definition tool

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package dumb-jump
  :ensure t
  :after helm
  :preface
  (defhydra dumb-jump-hydra (:color blue :columns 3)
      "Dumb Jump"
      ("j" dumb-jump-go "Go")
      ("o" dumb-jump-go-other-window "Other window")
      ("e" dumb-jump-go-prefer-external "Go external")
      ("x" dumb-jump-go-prefer-external-other-window "Go external other window")
      ("i" dumb-jump-go-prompt "Prompt")
      ("l" dumb-jump-quick-look "Quick look")
      ("b" dumb-jump-back "Back"))
  :bind
  ;;("M-g o" . dumb-jump-go-other-window)
  ;;("M-g j" . dumb-jump-go)
  ;;("M-g b" . dumb-jump-back)
  ;;("M-g i" . dumb-jump-go-prompt)
  ;;("M-g x" . dumb-jump-go-prefer-external)
  ;;("M-g z" . dumb-jump-go-prefer-external-other-window)
  ;;("M-S-h d" . dumb-jump-hydra/body)
  (:map prog-mode-map
  ("C-c C-o" . dumb-jump-go-other-window)
   ("C-c C-j" . dumb-jump-go)
   ("C-c C-i" . dumb-jump-go-prompt))
  :custom
  (dumb-jump-selector 'ivy)
  :config
  (eval-when-compile
    (require 'helm-source nil t))
)
#+END_SRC

* Global Hooks

Delete trailing whitespace on save
#+BEGIN_SRC emacs-lisp :tangle init.el
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

* Native Command Remappings

These remap commands instead of keybindings
This allows to use different functions but preserve the original keybindings
See C-h i g (elisp) Remapping Commands RET

Example: (global-set-key [remap backward-up-list] 'my-backward-up-list)

Keybindings and remaps

Vector is array in other languages. Vector was used for mapping function keys, such as [left], [right], [up], [down], [f1]...[f12]. But now, you can also map function keys in (kbd ...) function using angle brackets:

(global-set-key (kbd "<f3>") 'kmacro-start-macro-or-insert-counter)

Here are common function keys (remember to wrap them in a pair of angle bracket):
| Key                                            | Description                                        |
| left, up, right, down                          | Cursor arrow keys                                  |
| begin, end, home, next, prior                  | Other cursor re-positioning keys                   |
|                                                | prior means PageUp                                 |
|                                                | next means PageDOwn                                |
| select, print, execute, backtab                | Miscellaneous keys                                 |
| insert, undo, redo, clearline                  | backtab means S-TAB or C-iso-tab                   |
| insertline, deleteline, insertchar, deletechar |                                                    |
| f1, f2, ... F35                                | Numbered function keys on top of your keyboard     |
| kp-add, kp-subtract, kp-multiply, kp-divide    | Keypad keys (to the right of the regular keyboard) |
| kp-backtab, kp-space, kp-tab, kp-enter         | , with names or punctuation.                       |
| kp-separator, kp-decimal, kp-equal             |                                                    |
|                                                |                                                    |
|                                                |                                                    |
| kp-0, kp-1, ... kp-9                           | Keypad keys with digits.                           |
|                                                |                                                    |
| kp-f1, kp-f2, kp-f3, kp-f4                     | Keypad PF keys.                                    |

* Text editing settings

** Helper functions for casing words

#+BEGIN_SRC emacs-lisp :tangle init.el
(defun upcase-backward-word (arg)
  (interactive "p")
  (upcase-word (- arg))
)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle init.el
(defun downcase-backward-word (arg)
  (interactive "p")
  (downcase-word (- arg))
)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle init.el
(defun capitalize-backward-word (arg)
  (interactive "p")
  (capitalize-word (- arg))
)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle init.el
(global-set-key (kbd "C-M-u")	 'upcase-backward-word)
(global-set-key (kbd "C-M-l")	 'downcase-backward-WORD)
;; this replaces native capitlize word!
(global-set-key (kbd "C-M-c")	 'capitalize-backward-word)
#+END_SRC

* Spellchecking

#+BEGIN_SRC emacs-lisp :tangle init.el
(defconst *spell-check-support-enabled* nil) ;; Enable with t if you prefer
#+END_SRC

** Flyspell

Change dictionaries with F12

#+BEGIN_SRC emacs-lisp :tangle init.el
;(defun fd-switch-dictionary()
;(interactive)
;(let* ((dic ispell-current-dictionary)
;    (change (if (string= dic "deutsch8") "english" "deutsch8")))
;  (ispell-change-dictionary change)
;  (message "Dictionary switched from %s to %s" dic change)
;  ))

;(global-set-key (kbd "<f12>")   'fd-switch-dictionary)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle init.el
;; Change dictionaries with F12 (teste pt-br)
(let ((langs '("american" "brasileiro")))
  (setq lang-ring (make-ring (length langs)))
  (dolist (elem langs) (ring-insert lang-ring elem))
)

(defun cycle-ispell-languages ()
   (interactive)
   (let ((lang (ring-ref lang-ring -1)))
     (ring-insert lang-ring lang)
     (ispell-change-dictionary lang))
)

(global-set-key (kbd "<f12>")   'cycle-ispell-languages)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package flyspell
  :defer 1
  :disabled
  :hook
  (text-mode . flyspell-mode)
  :config
  ;; ignore org source blocks from spellchecking
  (add-to-list 'ispell-skip-region-alist '(":\\(PROPERTIES\\|LOGBOOK\\):" . ":END:"))
  (add-to-list 'ispell-skip-region-alist '("^#+BEGIN_SRC" . "^#+END_SRC"))

  ;; global ispell settings (disabled in favor of conditional hunspell setup bellow)
  ;; (setenv "LANG" "en_US.UTF-8")
  ;; (setq ispell-program-name "aspell")
  ;; (setq ispell-program-name "hunspell")
  ;; (setq ispell-dictionary "en_US")
  ;; (setq ispell-local-dictionary "pt_BR")
  ;; (setq ispell-local-dictionary "en_US")

  ;; Hunspell settings
  ;; find aspell and hunspell automatically
;;  (cond
;;    ;; try aspell first in case both aspell and hunspell are installed, it will
;;    ;; set `ispell-program-name' to use hunspell
;;    ((executable-find "aspell")
;;      (setq ispell-program-name "aspell")
;;      ;; Please note `ispell-extra-args' contains ACTUAL parameters passed to aspell
;;      (setq ispell-extra-args '("--sug-mode=ultra" "--lang=en_US"))
;;      ;;(setq ispell-local-dictionary "pt_BR")
;;    )
;;   ;; if hunspell is available, use it instead of aspell for multilang support
;;    ((executable-find "hunspell")
;;      (setq ispell-program-name "hunspell")
;;      ;; i could set `ispell-dictionary' instead but `ispell-local-dictionary' has higher priority
;;      (setq ispell-local-dictionary "en_US")
;;      ;; setup both en_US and pt_BR dictionaries in hunspell
;;      (ispell-hunspell-add-multi-dic "en_US,pt_BR")
;;
;;      (setq ispell-local-dictionary-alist
;;         ;; Please note the list `("-d" "en_US")` contains ACTUAL parameters passed to hunspell
;;         ;; You could use `("-d" "en_US,en_US-med")` to check with multiple dictionaries
;;         '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US,pt_BR") nil utf-8))
;;      )
;;    )
;;  )

)
#+END_SRC

** guess-language

Automatic guess the language of the paragraph im writing in
Works with mutilang documents

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package guess-language         ; Automatically detect language for Flyspell
  :ensure t
  :disabled
  :defer t
  :hook
  (text-mode . guess-language-mode)
  ;; :init (add-hook 'text-mode-hook #'guess-language-mode)
  :config
  (setq guess-language-langcodes '((en . ("en_US" "English"))
                                   (pt . ("pt_BR" "Portuguese Brazilian"))))
  (setq guess-language-languages '(en pt))
  (setq guess-language-min-paragraph-length 45)
)
#+END_SRC


** move-text

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package move-text
  :ensure t
  :after evil
  :bind
  ([(meta k)] . move-text-up)
  ([(meta j)] . move-text-down)
  ([(meta shift k)] . move-text-line-up)
  ([(meta shift j)] . move-text-line-down)
  ([(meta shift up)] . move-text-up)
  ([(meta shift down)] . move-text-down)
  :init
  ;; free the bindings used by this plugin from windmove and other areas that use the same keys
  (global-unset-key (kbd "M-j"))
  (global-unset-key (kbd "M-k"))
  (global-unset-key (kbd "C-S-j"))
  (global-unset-key (kbd "C-S-k"))
  :config
  (move-text-default-bindings)
  ;; tried setting these in :bind but use package executes :bind along with init, and i needed to free the keys before
  (define-key evil-normal-state-map (kbd "M-j") 'move-text-down)
  (define-key evil-normal-state-map (kbd "M-k") 'move-text-up)
  (define-key evil-visual-state-map (kbd "M-j") 'move-text-region-up)
  (define-key evil-visual-state-map (kbd "M-k") 'move-text-region-down)
)
#+END_SRC


* exec-path-from-shell

Make emacs use $PATH defined in the systems shell

: snippet taken from oficial use package github page
#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package exec-path-from-shell
  :if (memq window-system '(mac ns x))
  :ensure t
  :init
  ;;(setenv "SHELL" "/bin/zsh")
  ;;(setq explicit-shell-file-name "/bin/zsh")
  ;;(setq shell-file-name "zsh")
  :config
  ;; This sets $MANPATH, $PATH and exec-path from your shell, but only on OS X and Linux.
  (exec-path-from-shell-initialize)
  ;; Its possible to copy values from other SHELL variables using one of the two methods bellow
  ;; either using the `exec-path-from-shell-copy-env' functon or setting the variable `exec-path-from-shell-variables'
  ;; (exec-path-from-shell-copy-env "PYTHONPATH")
  ;; (setq exec-path-from-shell-variables '("PYTHONPATH" "GOPATH"))
)
#+END_SRC

* Mouse configuration
** Enable mouse support in terminal mode

#+BEGIN_SRC emacs-lisp :tangle init.el
(when (eq window-system nil)
  (xterm-mouse-mode 1))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle init.el
  ;; (use-package mouse3
  ;;     :config
  ;; (global-set-key (kbd "<mouse-3>") 'mouse3-popup-menu))
#+END_SRC

** right-click-context-menu

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package right-click-context
  :ensure t
  :config
  (global-set-key (kbd "<menu>") 'right-click-context-menu)
  (global-set-key (kbd "<mouse-3>") 'right-click-context-menu)
  (bind-key "C-c <mouse-3>" 'right-click-context-menu)

  ;; (setq right-click-context-mode-lighter "🐭")

  ;; customize the right-click-context-menu
  (let ((right-click-context-local-menu-tree
       (append right-click-context-global-menu-tree
             '(("Insert"
                ("Go to definition" :call (lsp-goto-type-definition)
                ("FooBar" :call (insert "FooBar"))
                )))))
  (right-click-context-menu)))
)
#+END_SRC

** zoom buffers with Mouse+Scroll<Up/Down> like in the browser

#+BEGIN_SRC emacs-lisp :tangle init.el
;; zoom in/out like we do everywhere else.
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
#+END_SRC

* hippie-expand (native emacs expand function)

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package hippie-exp
  :ensure nil
  :defer t
  :bind
  ("<tab>" . hippie-expand)
  ("<C-return>" . hippie-expand)
  ("C-M-SPC" . hippie-expand)
  (:map evil-insert-state-map
  ("<tab>" . hippie-expand)
  )
  :config
  (setq-default hippie-expand-try-functions-list
        '(yas-hippie-try-expand
          company-indent-or-complete-common
          emmet-expand-yas
          emmet-expand-line
          indent-according-to-mode
          ))
)
#+END_SRC

* Evil

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package evil
  :ensure t
  :custom
  (evil-ex-complete-emacs-commands nil)
  (evil-vsplit-window-right t)
  (evil-split-window-below t)
  (evil-shift-round nil)
  (evil-esc-delay 0)  ;; Don't wait for any other keys after escape is pressed.
  ;; Make Evil look a bit more like (n) vim  (??)
  (evil-search-module 'isearch-regexp)
  ;; (setq evil-search-module 'evil-search)
  (evil-magic 'very-magic)
  (evil-shift-width (symbol-value 'tab-width))
  (evil-regexp-search t)
  (evil-search-wrap t)
  ;; (setq evil-want-C-i-jump t)
  (evil-want-C-u-scroll t)
  (evil-want-fine-undo nil)
  (evil-want-integration nil)
  ;; (setq evil-want-abbrev-on-insert-exit nil)
  (evil-want-abbrev-expand-on-insert-exit nil)
  (evil-mode-line-format '(before . mode-line-front-space)) ;; move evil tag to beginning of modeline
  ;; Cursor is alway black because of evil.
  ;; Here is the workaround
  ;; (@see https://bitbucket.org/lyro/evil/issue/342/evil-default-cursor-setting-should-default)
  (evil-default-cursor t)
  ;; change cursor color according to mode
  (evil-emacs-state-cursor '("#ff0000" box))
  (evil-motion-state-cursor '("#FFFFFF" box))
  (evil-normal-state-cursor '("#00ff00" box))
  (evil-visual-state-cursor '("#abcdef" box))
  (evil-insert-state-cursor '("#e2f00f" bar))
  (evil-replace-state-cursor '("red" hbar))
  (evil-operator-state-cursor '("red" hollow))
  :bind
  (:map evil-normal-state-map
  (", w" . evil-window-vsplit)
  ("C-r" . undo-tree-redo))
  (:map evil-insert-state-map
  ;; this is also defined globally above in the config
  ("C-S-<backtab>" . er/expand-region))
  (:map evil-visual-state-map
  ;; this is also defined globally above in the config
  ("<tab>" . indent-region)
  ("C-/" . comment-line)
  ("C-S-/" . comment-region)
  ("C-S-M-/" . comment-box)
  ("M-=" . #'align-values))

  ;; check if global-set-key also maps to evil insert mode; if yes delete bellow snippets
  :config
  (evil-mode)
  ;; unset evil bindings that conflits with other stuff
  (define-key evil-insert-state-map (kbd "<tab>") nil)
  (define-key evil-normal-state-map (kbd "<tab>") nil)
  (define-key evil-visual-state-map (kbd "<tab>") nil)
  ;; vim-like navigation with C-w hjkl
  (define-prefix-command 'evil-window-map)
  (define-key evil-window-map (kbd "h") 'evil-window-left)
  (define-key evil-window-map (kbd "j") 'evil-window-down)
  (define-key evil-window-map (kbd "k") 'evil-window-up)
  (define-key evil-window-map (kbd "l") 'evil-window-right)
  (define-key evil-window-map (kbd "b") 'evil-window-bottom-right)
  (define-key evil-window-map (kbd "c") 'evil-window-delete)
  (define-key evil-motion-state-map (kbd "M-w") 'evil-window-map)
  ;; make esc quit or cancel everything in Emacs
  (defun minibuffer-keyboard-quit ()
    "Abort recursive edit.
  In Delete Selection mode, if the mark is active, just deactivate it;
  then it takes a second \\[keyboard-quit] to abort the minibuffer."
    (interactive)
    (if (and delete-selection-mode transient-mark-mode mark-active)
        (setq deactivate-mark  t)
      (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
      (abort-recursive-edit)))
  (define-key evil-normal-state-map [escape] 'keyboard-quit)
  (define-key evil-visual-state-map [escape] 'keyboard-quit)
  (define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)
  (global-set-key [escape] 'keyboard-quit)
  ;;-----------------------------------------
  ;; recover native emacs commands that are overriden by evil
  ;; this gives priority to native emacs behaviour rathen than Vim's
  (define-key evil-normal-state-map (kbd "C-e") 'evil-end-of-line)
  (define-key evil-insert-state-map (kbd "C-e") 'move-end-of-line)
  (define-key evil-visual-state-map (kbd "C-e") 'evil-end-of-line)
  (define-key evil-motion-state-map (kbd "C-e") 'evil-end-of-line)
  (define-key evil-insert-state-map (kbd "C-d") 'evil-delete-char)
  (define-key evil-normal-state-map (kbd "C-d") 'evil-delete-char)
  (define-key evil-visual-state-map (kbd "C-d") 'evil-delete-char)
  (define-key evil-normal-state-map (kbd "C-k") 'kill-line)
  (define-key evil-insert-state-map (kbd "C-k") 'kill-line)
  (define-key evil-visual-state-map (kbd "C-k") 'kill-line)
  (define-key evil-insert-state-map (kbd "C-w") 'kill-region)
  (define-key evil-normal-state-map (kbd "C-w") 'kill-region)
  (define-key evil-visual-state-map (kbd "C-w") 'kill-region)
  (define-key evil-normal-state-map (kbd "C-w") 'evil-delete)
  (define-key evil-insert-state-map (kbd "C-w") 'evil-delete)
  (define-key evil-visual-state-map (kbd "C-w") 'evil-delete)
  (define-key evil-normal-state-map (kbd "C-y") 'yank)
  (define-key evil-insert-state-map (kbd "C-y") 'yank)
  (define-key evil-visual-state-map (kbd "C-y") 'yank)
  (define-key evil-normal-state-map (kbd "C-f") 'evil-forward-char)
  (define-key evil-insert-state-map (kbd "C-f") 'evil-forward-char)
  (define-key evil-insert-state-map (kbd "C-f") 'evil-forward-char)
  (define-key evil-normal-state-map (kbd "C-b") 'evil-backward-char)
  (define-key evil-insert-state-map (kbd "C-b") 'evil-backward-char)
  (define-key evil-visual-state-map (kbd "C-b") 'evil-backward-char)
  (define-key evil-normal-state-map (kbd "C-n") 'evil-next-line)
  (define-key evil-insert-state-map (kbd "C-n") 'evil-next-line)
  (define-key evil-visual-state-map (kbd "C-n") 'evil-next-line)
  (define-key evil-normal-state-map (kbd "C-p") 'evil-previous-line)
  (define-key evil-insert-state-map (kbd "C-p") 'evil-previous-line)
  (define-key evil-visual-state-map (kbd "C-p") 'evil-previous-line)
  (define-key evil-normal-state-map (kbd "Q") 'call-last-kbd-macro)
  (define-key evil-visual-state-map (kbd "Q") 'call-last-kbd-macro)
  (define-key evil-insert-state-map (kbd "C-r") 'search-backward)
)
#+END_SRC


* Evil packages / plugins

** Evil-ORG

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package evil-org
  :after org evil
  :hook
  (org-mode . evil-org-mode)
  :config
  (lambda ()
    (evil-org-set-key-theme))
)
#+END_SRC

** evil-numbers
#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package evil-numbers
  :ensure t
  :after evil
  :bind
  (:map evil-normal-state-map
  ("C-c C-+" . evil-numbers/inc-at-pt)
  ("C-c C--" . evil-numbers/dec-at-pt)
  ("<kp-add>" . evil-numbers/inc-at-pt)
  ("<kp-subtract>" . evil-numbers/dec-at-pt))
  :config
  (global-set-key (kbd "C-c C-+") 'evil-numbers/inc-at-pt)
  (global-set-key (kbd "C-c C--") 'evil-numbers/dec-at-pt)
)
#+END_SRC

** evil-leader

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package evil-leader
  :ensure t
  :after evil
  :config
  (global-evil-leader-mode)
  (evil-leader/set-leader ",")
  (evil-leader/set-key
    ;;"e" 'find-file  ;; removed in favor of counsel-find-file
    "q" 'evil-quit
    "w" 'save-buffer
    "d" 'delete-frame
    "k" 'kill-buffer
    "b" 'ivy-switch-buffer
    "-" 'split-window-bellow
    "|" 'split-window-right
    "." 'find-tag
    "t" 'projectile-find-file
    "b" 'ido-switch-buffer
    "vc" 'evilnc-comment-or-uncomment-lines
    "ag" 'projectile-ag
    "," 'switch-to-previous-buffer
    ;;counsel bindings
    "e" 'counsel-find-file
    "f" 'counsel-projectile-find-file
    "cg" 'counsel-ag
    "r" 'counsel-rg
    ; "gg" 'git-gutter+:toggle
    ; "gd" 'git-gutter+:popup-diff
    ; "gp" 'git-gutter+:previous-hunk
    ; "gn" 'git-gutter+:next-hunk
    ; "gr" 'git-gutter+:revert-hunk
    "gb" 'mo-git-blame-current
    "gL" 'magit-log
    "gs" 'magit-status
    "q"  'kill-buffer-and-window
    "u"  'undo-tree-visualize
    "nn" 'neotree-toggle
    "nm" 'next-match
    "nf" 'neotree-find
    ;; windmove bindings
    "gk" 'windmove-up
    "gj" 'windmove-down
    "gl" 'windmove-right
    "gh" 'windmove-left
    "vs" 'split-window-right
    "hs" 'split-window-below
    "s"  'ispell-word
    "ht" 'alchemist-help-search-at-point
    "gt" 'alchemist-goto-definition-at-point
    "mf" 'elixir-format
    "ll" 'longlines-mode
    "x" 'smex)
    "|" 'split-window-right
)
#+END_SRC

** Evil Surround

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package evil-surround
  :config
  (global-evil-surround-mode 1)
)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle init.el
(defun evil-surround-prog-mode-hook-setup ()
  "Documentation string, idk, put something here later."
  (push '(47 . ("/" . "/")) evil-surround-pairs-alist)
  (push '(40 . ("(" . ")")) evil-surround-pairs-alist)
  (push '(41 . ("(" . ")")) evil-surround-pairs-alist)
  (push '(91 . ("[" . "]")) evil-surround-pairs-alist)
  (push '(93 . ("[" . "]")) evil-surround-pairs-alist)
)
(add-hook 'prog-mode-hook 'evil-surround-prog-mode-hook-setup)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle init.el
(defun evil-surround-js-mode-hook-setup ()
  "ES6." ;  this is a documentation string, a feature in Lisp
  ;; I believe this is for auto closing pairs
  (push '(?1 . ("{`" . "`}")) evil-surround-pairs-alist)
  (push '(?2 . ("${" . "}")) evil-surround-pairs-alist)
  (push '(?4 . ("(e) => " . "(e)")) evil-surround-pairs-alist)
  ;; ReactJS
  (push '(?3 . ("classNames(" . ")")) evil-surround-pairs-alist)
)
(add-hook 'js2-mode-hook 'evil-surround-js-mode-hook-setup)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle init.el
(defun evil-surround-emacs-lisp-mode-hook-setup ()
  (push '(?` . ("`" . "'")) evil-surround-pairs-alist)
)
(add-hook 'emacs-lisp-mode-hook 'evil-surround-emacs-lisp-mode-hook-setup)

(defun evil-surround-org-mode-hook-setup ()
  (push '(91 . ("[" . "]")) evil-surround-pairs-alist)
  (push '(93 . ("[" . "]")) evil-surround-pairs-alist)
  (push '(?= . ("=" . "=")) evil-surround-pairs-alist)
)
(add-hook 'org-mode-hook 'evil-surround-org-mode-hook-setup)
   #+END_SRC

** evil-commentary

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package evil-commentary
  :config
  (evil-commentary-mode)
)
#+END_SRC

** Evil-Matchit
#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package evil-matchit
  :config
  (global-evil-matchit-mode 1)
)
#+END_SRC

** evil-paredit

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package evil-paredit
  :ensure t
  :defer t
  :hook
  (emacs-lisp-mode . evil-paredit-mode)
)
#+END_SRC

** evil-mc

Multiple cursors for evil mode

|------------+---------------------------------|
| Key        | action                          |
|------------+---------------------------------|
| C-t or grn | skip creating a cursor forward  |
| grp        | skip creating a cursor backward |
| gru        | undo last addded cursor         |
| grq        | remove all cursors              |
|------------+---------------------------------|

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package evil-mc
  :ensure t
  :defer t
  :after evil
  :bind
  (:map evil-visual-state-map
  ("C-d" . evil-mc-make-and-goto-next-match) ;; Make a cursor at point and go to the next match of the selected region or the symbol under cursor.
  ("C-a" . evil-mc-make-all-cursors) ;; Create cursors for all strings that match the selected region or the symbol under cursor.
  ("C-q" . evil-mc-undo-all-cursors)  ;; Remove all cursors.
  )
  :config
  (global-evil-mc-mode  1)
)
#+END_SRC

** evil-goggles

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package evil-goggles
  :ensure t
  :defer t
  :config
  (evil-goggles-mode)
  (setq evil-goggles-pulse t) ;; default is to pulse when running in a graphic display
  (setq evil-goggles-duration 0.200) ;; default is 0.200

;; list of all on/off variables, their default value is `t`:

  (setq evil-goggles-enable-paste nil) ;; to disable the hint when pasting
;;(setq  evil-goggles-enable-delete t)
;;(setq  evil-goggles-enable-change t)
;;(setq evil-goggles-enable-indent t)
;;(setq  evil-goggles-enable-yank t)
;;(setq  evil-goggles-enable-join t)
;;(setq evil-goggles-enable-fill-and-move t)
;;(setq evil-goggles-enable-paste t)
;;(setq evil-goggles-enable-shift t)
;;(setq evil-goggles-enable-surround t)
;;(setq evil-goggles-enable-commentary)
;;(setq evil-goggles-enable-nerd-commenter t)
;;(setq evil-goggles-enable-replace-with-register t)
;;(setq evil-goggles-enable-set-marker t)
;;(setq evil-goggles-enable-undo t)
;;(setq evil-goggles-enable-redo t)
;;(setq evil-goggles-enable-record-macro t)

  ;; optionally use diff-mode's faces; as a result, deleted text
  ;; will be highlighed with `diff-removed` face which is typically
  ;; some red color (as defined by the color theme)
  ;; other faces such as `diff-added` will be used for other actions
  (evil-goggles-use-diff-faces)
)
#+END_SRC

** evil-lion

: Align by operators

Example, left align gl:
After pressing glip= (gl is the operator, ip text object paragraph, = separator)

#+begin_src c
one = 1
three = 3
fifteen = 15
#+end_src

will become:

#+begin_src c
one     = 1
three   = 3
fifteen = 15
#+end_src

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package evil-lion
  :ensure t
  :bind
  (:map evil-normal-state-map
  ("g l " . evil-lion-left)
  ("g L " . evil-lion-right)
  :map evil-visual-state-map
  ("g l " . evil-lion-left)
  ("g L " . evil-lion-right))
  :config
  (setq evil-lion-squeeze-spaces t) ;; default t
  (evil-lion-mode)
)
#+END_SRC

* org-mode

** org-mode setup
#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package org
  :ensure org-plus-contrib
  :mode ("\\.org$" . org-mode)
  :defer t
  :preface
  (defun setup-org-mode ()
    (interactive)
    (message "Trying to setup org-mode for buffer")
    (color-identifiers-mode)
    (flycheck-mode 1)
    (turn-on-visual-line-mode)
    (rainbow-mode)
    (diff-hl-mode)
    (prettify-symbols-mode)
    (org-bullets-mode)
  )
  :hook
  (org-mode . setup-org-mode)
  :bind
  (:map org-mode-map
  ("C-c o l" . org-store-link)
  ("C-c o l" . org-store-link)
  ("C-c o a" . org-agenda)
  ("C-c o c" . org-capture)
  ("C-c o b" . org-switch))

  ;; this map is to delete de bellow commented lambda that does the same thing
  ;; Resolve issue with Tab not working with ORG only in Normal VI Mode in terminal
  ;; (something with TAB on terminals being related to C-i...)
  (:map evil-normal-state-map
  ("<tab>" . org-cycle))
  :init
  ;; general org config variables
  (setq org-log-done 'time)
  (setq org-export-backends (quote (ascii html icalendar latex md odt)))
  (setq org-use-speed-commands t)

  ;; dont display atual width for images inline. set per-file with
  ;; #+ATTR_HTML: :width 600px :height: auto
  ;; #+ATTR_ORG: :width 600
  ;; #+ATTR_LATEX: :width 5in
  (setq org-image-actual-width nil)
  (setq org-startup-with-inline-images t)

  ;; make tab behave like it usually do (ie: indent) inside org source blocks
  (setq org-src-tab-acts-natively t)

  (setq org-confirm-babel-evaluate 'nil)
  (setq org-todo-keywords
   '((sequence "TODO" "IN-PROGRESS" "REVIEW" "|" "DONE")))
  (setq org-agenda-window-setup 'other-window)
  (setq org-log-done 'time) ;; Show CLOSED tag line in closed TODO items
  (setq org-log-done 'note) ;; Prompt to leave a note when closing an item
  (setq org-hide-emphasis-markers nil)

  ;;ox-twbs (exporter to twitter bootstrap html)
  (setq org-enable-bootstrap-support t)
  :config
  ;; make windmove work with org mode
  (add-hook 'org-shiftup-final-hook 'windmove-up)
  (add-hook 'org-shiftleft-final-hook 'windmove-left)
  (add-hook 'org-shiftdown-final-hook 'windmove-down)
  (add-hook 'org-shiftright-final-hook 'windmove-right)

  ;; org-capture - needs to be in :config because it assumes a variable is already defined: `org-directory'
  (setq org-default-notes-file (concat org-directory "/notes.org"))

  ;;(add-hook 'org-mode-hook
  ;;          (lambda ()
  ;;        (define-key evil-normal-state-map (kbd "TAB") 'org-cycle)))

  (defun org-export-turn-on-syntax-highlight()
    "Setup variables to turn on syntax highlighting when calling `org-latex-export-to-pdf'"
    (interactive)
    (setq org-latex-listings 'minted
          org-latex-packages-alist '(("" "minted"))
          org-latex-pdf-process '("latexmk -pdflatex='pdflatex -interaction nonstopmode' -pdf -bibtex -f %f")))

  ;; compile with pdf-latex
  ;; (setq org-latex-pdf-process
  ;;     '("latexmk -pdflatex='pdflatex -interaction nonstopmode' -pdf -bibtex -f %f"))

  ;; compile with xelatex to use the Arial font
  (setq org-latex-pdf-process
    '("xelatex -interaction nonstopmode %f"
       "xelatex -interaction nonstopmode %f")) ;; for multiple passes

    (setq org-emphasis-alist '(("*" bold)
                           ("/" italic)
                           ("_" underline)
                           ("=" org-verbatim verbatim)
                           ("~" org-code verbatim)))


    (require 'org-habit)
    '(org-emphasis-alist
     (quote
      (
       ("!" org-habit-overdue-face)
       ("%" org-habit-alert-face)
       ("*" bold)
       ("/" italic)
       ("_" underline)
       ("=" org-verbatim verbatim)
       ("~" org-code verbatim)
       ("+" (:strike-through t))
       )))
)
#+END_SRC

** org-sidebar

In the tree buffer, the keymap org-sidebar-tree-map is used, which is based on org-mode-map (so you can use Org keybindings to manipulate nodes), and has these additional bindings by default:

- <S-tab>: Cycle global node visibility.
- <tab>: Toggle visibility of child nodes.
- <mouse-3>: Toggle visibility of child nodes.
- <mouse-2>: Jump to heading using default jump function; or, if heading stars are clicked, toggle visibility of child nodes.
- <return>: Jump to heading using default jump function (adding universal prefix arguments to display more subtree content, corresponding with the click-and-drag mouse events below).

Dragging-and-releasing with mouse buttons (as opposed to clicking and releasing at a single position) shows additional subtree and entry content:

- <drag-mouse-1>: Jump to heading using default jump function, and also show all descendant headings.
- <drag-mouse-2>: Jump to heading using default jump function, and also show all descendant headings and their entry text.

#+BEGIN_SRC emacs-lisp :tangle init.el
  (use-package org-sidebar
    :ensure t
    :requires org-ql
    :defer t
    :after org
    :bind
    ("<S-f8>" . org-sidebar-tree-toggle)
  )
#+END_SRC
** org-ql

This package is required by org-sidebar

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package org-ql
  :ensure t
  :defer t
  :after org
)
#+END_SRC

** ox-extra (org-plus-contrib)

ox-extras
add suport for the ignore tag (ignores a headline without ignoring its content)

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package ox-extra
  :ensure nil
  :defer t
  :config
  (ox-extras-activate '(ignore-headlines))
  (ox-extras-activate '(latex-header-blocks ignore-headlines))
)
#+END_SRC

** add more custom emacs emphasis characters

first test

#+BEGIN_SRC emacs-lisp :tangle init.el
(require 'org-habit nil t)

(defun org-add-my-extra-fonts ()
  "Add alert and overdue fonts."
  (add-to-list 'org-font-lock-extra-keywords '("\\(!\\)\\([^\n\r\t]+\\)\\(!\\)" (1 '(face org-habit-alert-face invisible t)) (2 'org-habit-alert-face) (3 '(face org-habit-alert-face invisible t))))
  (add-to-list 'org-font-lock-extra-keywords '("\\(%\\)\\([^\n\r\t]+\\)\\(%\\)" (1 '(face org-habit-overdue-face invisible t)) (2 'org-habit-overdue-face) (3 '(face org-habit-overdue-face invisible t)))))

(add-hook 'org-font-lock-set-keywords-hook #'org-add-my-extra-fonts)
#+END_SRC

** ox-latex

#+begin_src emacs-lisp :tangle init.el
(use-package ox-latex
  :ensure nil
  :defer t
  :after org
  :config
  ;; Source https://orgmode.org/worg/org-faq.html#using-xelatex-for-pdf-export
  ;; Originally taken from Bruno Tavernier: http://thread.gmane.org/gmane.emacs.orgmode/31150/focus=31432
  ;; but adapted to use latexmk 4.20 or higher.
  ;; (defun my-auto-tex-cmd ()
  ;;   "When exporting from .org with latex, automatically run latex,
  ;;      pdflatex, or xelatex as appropriate, using latexmk."
  ;;   (let ((texcmd)))
  ;;   ;; default command: oldstyle latex via dvi
  ;;   (setq texcmd "latexmk -dvi -pdfps -quiet %f")
  ;;   ;; pdflatex -> .pdf
  ;;   (if (string-match "LATEX_CMD: pdflatex" (buffer-string))
  ;;       (setq texcmd "latexmk -pdf -quiet %f"))
  ;;   ;; xelatex -> .pdf
  ;;   (if (string-match "LATEX_CMD: xelatex" (buffer-string))
  ;;       (setq texcmd "latexmk -pdflatex=xelatex -pdf -quiet %f"))
  ;;   ;; LaTeX compilation command
  ;;   (setq org-latex-to-pdf-process (list texcmd)))
  ;; (add-hook 'org-export-latex-after-initial-vars-hook 'my-auto-tex-cmd)
)

#+end_src

** ox-pandoc

#+BEGIN_NOTE
As pandoc supports many number of formats, initial org-export-dispatch
shortcut menu does not show full of its supported formats. You can customize
org-pandoc-menu-entry variable (and probably restart Emacs) to change its
default menu entries.
If you want delayed loading of `ox-pandoc’ when org-pandoc-menu-entry
is customized, please consider the following settings in your init file"
#+END_NOTE

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package ox-pandoc
  :after (org ox)
  :defer t
  :config
  ;; default options for all output formats
  (setq org-pandoc-options '((standalone . t)))
  ;; cancel above settings only for 'docx' format
  (setq org-pandoc-options-for-docx '((standalone . nil)))
  ;; special settings for beamer-pdf and latex-pdf exporters
  (setq org-pandoc-options-for-beamer-pdf '((pdf-engine . "xelatex")))
  (setq org-pandoc-options-for-latex-pdf '((pdf-engine . "luatex")))
  ;; special extensions for markdown_github output
  (setq org-pandoc-format-extensions '(markdown_github+pipe_tables+raw_html))
)
#+END_SRC

** org-bullets

UTF8 pretty bullets in org mode

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package org-bullets
  :ensure t
  :after org
  :defer t
  :config
  ;;(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  (setq org-bullets-bullet-list '("◉" "○" "●" "►" "•"))
)
#+END_SRC

** ReveaJS org-reveal:

: This delay makes the options to export to RevealJS appear on the exporter menu (C-c C-e)

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package ox-reveal
  :ensure t
  :defer t
  :after ox
  :config
  ;;(setq org-reveal-root "https://cdn.jsdelivr.net/reveal.js/3.0.0/")
)
 #+END_SRC

** ox-markdown
#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package ox-md
  :ensure nil
  :defer t
  :after org
)
#+END_SRC

** ox-gfm (github-flavored markdown)
#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package ox-gfm
  :ensure t
  :defer t
  :after org
)
 #+END_SRC


* Shell

** shell-pop

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package shell-pop
  :ensure t
  :defer t
  :init
  (setq shell-pop-full-span t)
  (setq shell-pop-default-directory "~/code")
  (setq shell-pop-shell-type (quote ("ansi-term" "*ansi-term*" (lambda nil (ansi-term shell-pop-term-shell)))))
  (setq shell-pop-term-shell "/bin/zsh")
  (setq shell-pop-universal-key "C-c s")
  (setq shell-pop-window-size 30)
  (setq shell-pop-full-span t)
  (setq shell-pop-window-position "bottom")
  :bind
  ("C-c s" . shell-pop)
)
#+END_SRC

** System Shell
*** Make system shell open in a split-window buffer at the bottom of the screen

#+BEGIN_SRC emacs-lisp :tangle init.el
(defun /shell/new-window ()
    "Opens up a new shell in the directory associated with the current buffer's file."
    (interactive)
    (let* ((parent (if (buffer-file-name)
                        (file-name-directory (buffer-file-name))
                    default-directory))
            (height (/ (window-total-height) 3))
            (name   (car (last (split-string parent "/" t)))))
        (split-window-vertically (- height))
        (other-window 1)
        (shell "new")
        (rename-buffer (concat "*shell: " name "*"))
        (insert (concat "ls"))
    )
)

; Pull system shell in a new bottom window
(define-key evil-normal-state-map (kbd "\"") #'/shell/new-window)
(define-key evil-visual-state-map (kbd "\"") #'/shell/new-window)
(define-key evil-motion-state-map (kbd "\"") #'/shell/new-window)
#+END_SRC


** Eshell

*** Make eshell open in a split-window buffer at the bottom of the screen

    #+BEGIN_SRC emacs-lisp :tangle init.el
 (defun /eshell/new-window ()
     "Opens up a new eshell in the directory associated with the current buffer's file.  The eshell is renamed to match that directory to make multiple eshell windows easier."
     (interactive)
     (let* ((parent (if (buffer-file-name)
                        (file-name-directory (buffer-file-name))
                      default-directory))
            (height (/ (window-total-height) 3))
            (name   (car (last (split-string parent "/" t)))))
       (split-window-vertically (- height))
       (other-window 1)
       (eshell "new")
       (rename-buffer (concat "*eshell: " name "*"))

       (insert (concat "ls"))
       (eshell-send-input)))

 ; Pull eshell in a new bottom window
 (define-key evil-normal-state-map (kbd "!") #'/eshell/new-window)
 (define-key evil-visual-state-map (kbd "!") #'/eshell/new-window)
 (define-key evil-motion-state-map (kbd "!") #'/eshell/new-window)
    #+END_SRC

* Project Management

** Projectile
#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package projectile
  :ensure t
  :diminish projectile-mode
  :bind
  (:map projectile-mode-map
  ("s-p" . projectile-command-map)
  ("C-c p" . projectile-command-map)
  ("M-S-O p" . counsel-projectile-switch-project)
  )
  :custom
  (projectile-completion-system 'ivy)
  :init
  (setq projectile-mode-line-prefix "Project -> ")
  (setq projectile-mode-line-function '(lambda () (format " Proj[%s]" (projectile-project-name))))
  :config
  (projectile-mode +1)
  (setq projectile-globally-ignored-files
        (append '("~"
                  ".swp"
                  ".pyc")
                projectile-globally-ignored-files))
)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package helm-projectile
  :ensure t
;  :after projectile
;  :demand t
  :config
  (helm-projectile-on)
)
#+END_SRC

** org-kanban

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package org-kanban
  :ensure t
  :defer t
  :after org
  :commands  (org-kanban/initialize)
  :config
)
#+END_SRC


* Ivy

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package ivy
  :ensure t
  :diminish ivy-mode
  :hook
  (after-init . ivy-mode)
  :custom
  (ivy-re-builders-alist
  '((t . ivy--regex-plus)))
  :config
  (ivy-mode)
  ;; display an arrow on the selected item in the list
  (setf (cdr (assoc t ivy-format-functions-alist)) #'ivy-format-function-arrow)

  (setq ivy-display-style 'fancy
     ivy-use-virtual-buffers t
     enable-recursive-minibuffers t
     ivy-use-selectable-prompt t)
  (ivy-set-actions  t
  '(("I" insert "insert")))
  (ivy-set-occur 'ivy-switch-buffer 'ivy-switch-buffer-occur)
)
#+END_SRC

** counsel

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package counsel
  :ensure t
  :after ivy
  :diminish counsel-mode
  :defines
  (projectile-completion-system magit-completing-read-function)
  :hook
  (ivy-mode . counsel-mode)
  :custom
  (counsel-yank-pop-height 15)
  (enable-recursive-minibuffers t)
  (ivy-use-selectable-prompt t)
  (ivy-use-virtual-buffers t)
  (ivy-on-del-error-function nil)
  (swiper-action-recenter t)
  (counsel-grep-base-command "ag -S --noheading --nocolor --nofilename --numbers '%s' %s")
  ;; check out this better-jumper mode to see what it does
  ;; (counsel-grep-post-action . better-jumper-set-jump)
  :preface
  (defun ivy-format-function-pretty (cands)
    "Transform CANDS into a string for minibuffer."
    (ivy--format-function-generic
     (lambda (str)
       (concat
           (all-the-icons-faicon "hand-o-right" :height .85 :v-adjust .05 :face 'font-lock-constant-face)
           (ivy--add-face str 'ivy-current-match)))

     (lambda (str)
       (concat "  " str))
     cands
     "\n")
  )
  :bind
  ([remap execute-extended-command] . counsel-M-x)
  ([remap find-file] . counsel-find-file)
  ([find-file] . counsel-find-file)
  ([remap switch-to-buffer] . ivy-switch-buffer)
  ("C-s" . swiper)
  ("C-c C-r" . ivy-resume)
  ("<f6>" . ivy-resume)
  ("M-x" . counsel-M-x)
  ("C-x C-f" . counsel-find-file)
  ("<f1> f" . counsel-describe-function)
  ("<f1> v" . counsel-describe-variable)
  ("<f1> l" . counsel-find-library)
  ("<f2> i" . counsel-info-lookup-symbol)
  ("<f2> u" . counsel-unicode-char)
  ("C-c g g" . counsel-git)
  ("C-c j" . counsel-git-grep)
  ("C-c k" . counsel-ag)
  ("M-s c" . counsel-ag)
  ("C-x l" . counsel-locate)
  ("C-S-o" . counsel-rhythmbox)
  ;; ladicle keys
  ("M-s r" . ivy-resume)
  ("C-c v p" . ivy-push-view)
  ("C-c v o" . ivy-pop-view)
  ("C-c v ." . ivy-switch-view)
  ("M-s f" . counsel-fzf)
  ("M-s r" . counsel-recentf)
  ("M-y" . counsel-yank-pop)
  (:map ivy-minibuffer-map
  ("C-w" . ivy-backward-kill-word)
  ("C-k" . ivy-kill-line)
  ("C-j" . ivy-immediate-done)
  ("RET" . ivy-alt-done)
  ("C-h" . ivy-backward-delete-char))
  (:map minibuffer-local-map
  ("C-r" . counsel-minibuffer-history))
  :config
  ;; NOTE: this variable do not work if defined in :custom
  (setq ivy-format-function 'ivy-format-function-pretty)
  (setq counsel-yank-pop-separator
      (propertize "\n────────────────────────────────────────────────────────\n"
             'face `(:foreground "#6272a4")))

  (setq counsel-find-file-ignore-regexp "\\(?:^[#.]\\)\\|\\(?:[#~]$\\)\\|\\(?:^Icon?\\)"
     counsel-describe-function-function #'helpful-callable
     counsel-describe-variable-function #'helpful-variable
     ;; Add smart-casing (-S) to default command arguments:
     counsel-rg-base-command "rg -S --no-heading --line-number --color never %s ."
     counsel-ag-base-command "ag -S --nocolor --nogroup %s"
     counsel-pt-base-command "pt -S --nocolor --nogroup -e %s"
    counsel-find-file-at-point t)

  ;; Integration with `projectile'
  (with-eval-after-load 'projectile
    (setq projectile-completion-system 'ivy))

  ;; Integration with `magit'
  (with-eval-after-load 'magit
    (setq magit-completing-read-function 'ivy-completing-read))
)
#+END_SRC

*** Enhance fuzzy matching

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package flx
  :ensure t
)
#+END_SRC

*** Enhance M-x

#+BEGIN_SRC emacs-lisp :tangle init.el
  (use-package amx
  :disabled
    :ensure t
  )
#+END_SRC

*** Ivy integration for Projectile

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package counsel-projectile
  :ensure t
  :after ivy projectile
  :config (counsel-projectile-mode 1)
)
#+END_SRC

** ivy-posframe

Requires: Emacs >= 26

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package ivy-posframe
  :ensure t
  :diminish ivy-posframe-mode
  :custom-face
  (ivy-posframe ((t (:background "#333244"))))
  (ivy-posframe-border ((t (:background "#abff00"))))
  (ivy-posframe-cursor ((t (:background "#00ff00"))))
  :hook
  (ivy-mode . ivy-posframe-mode)
  :config
  ;; custom define height of post frame per function
  (setq ivy-posframe-height-alist '((swiper . 15)
                                    (t      . 25)))

  ;; display at `ivy-posframe-style'
  (setq ivy-posframe-display-functions-alist
        '((swiper          . ivy-posframe-display-at-point)
          (complete-symbol . ivy-posframe-display-at-point)
          ;;(counsel-M-x     . ivy-posframe-display-at-window-bottom-left)
          (counsel-M-x     . ivy-posframe-display-at-frame-center)
          (t               . ivy-posframe-display-at-frame-center)))
  (ivy-posframe-mode 1)
)
#+END_SRC

** ivy-rich

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package ivy-rich
  :ensure t
  :config
  (ivy-rich-mode 1)
  (setq ivy-format-function #'ivy-format-function-line)

  ;; use all-the-icons for `ivy-switch-buffer'
  (defun ivy-rich-switch-buffer-icon (candidate)
     (with-current-buffer
      (get-buffer candidate)
      (let ((icon (all-the-icons-icon-for-mode major-mode)))
        (if (symbolp icon)
        (all-the-icons-icon-for-mode 'fundamental-mode)
          icon))))
  ;; add the above function to `ivy-rich--display-transformers-list'
  (setq ivy-rich--display-transformers-list
      '(ivy-switch-buffer
        (:columns
         ((ivy-rich-switch-buffer-icon :width 2)
          (ivy-rich-candidate (:width 30))
          (ivy-rich-switch-buffer-size (:width 7))
          (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right))
          (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))
          (ivy-rich-switch-buffer-project (:width 15 :face success))
          (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))
         :predicate
         (lambda (cand) (get-buffer cand)))))
)
#+END_SRC

* Helm

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package helm
  :ensure t
  :defer t
  :diminish helm-mode
  :bind
  ;; ("M-x" . helm-M-x)
  ("C-c h" . helm-command-prefix)
  ("C-x b" . helm-buffers-list)
  ("C-x C-b" . helm-mini)
  ("C-x C-f" . helm-find-files)
  ("C-x r b" . helm-bookmarks)
  ("M-y" . helm-show-kill-ring)
  ("M-:" . helm-eval-expression-with-eldoc)
  (:map helm-map
  ("C-z" . helm-select-action)
  ("C-h a" . helm-apropos)
  ("C-c h" . helm-execute-persistent-action)
  ("<tab>" . helm-execute-persistent-action)
  )
  :init
  (setq helm-autoresize-mode t)
  (setq helm-buffer-max-length 40)
  (setq helm-bookmark-show-location t)
  (setq helm-buffer-max-length 40)
  (setq helm-split-window-inside-p t)

  ;; turn on helm fuzzy matching
  (setq helm-M-x-fuzzy-match t)
  (setq helm-mode-fuzzy-match t)

  (setq helm-ff-file-name-history-use-recentf t)
  (setq helm-ff-skip-boring-files t)
  (setq helm-follow-mode-persistent t)
  ;; take between 10-30% of screen space
  (setq helm-autoresize-min-height 10)
  (setq helm-autoresize-max-height 30)
  :config
  (require 'helm-config)
  (helm-mode 1)
  ;; Make helm replace the default Find-File and M-x
  ;;(global-set-key [remap execute-extended-command] #'helm-M-x)
  ;; (global-set-key [remap find-file] #'helm-find-files)
  ;; helm bindings
  (global-unset-key (kbd "C-x c"))
)
#+END_SRC

** helm-ag

 #+BEGIN_SRC emacs-lisp :tangle init.el
 (use-package helm-ag
  :ensure helm-ag
  :bind ("M-p" . helm-projectile-ag)
  :commands (helm-ag helm-projectile-ag)
  :init
  (setq helm-ag-insert-at-point 'symbol)
  (setq  helm-ag-command-option "--path-to-ignore ~/.agignore")
)
 #+END_SRC

** helm-rg

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package helm-rg
  :ensure t
  :defer t
)
#+END_SRC

** helm-fuzzier
: supposed better fuzzy matching for helm
: for instance, plp, plpa, paclp, should all match package-list-packages


#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package helm-fuzzier
  :disabled nil
  :ensure t
  :after helm
  :config
  (helm-fuzzier-mode 1)
)
#+END_SRC

* abbrev

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package abbrev
  :ensure nil
  :config
  (define-abbrev-table 'global-abbrev-table '(
      ("alpha" "α")
      ("infinity" "∞")
      ("arrow" "→")
      ))
)
#+END_SRC
* Hydra

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package hydra
  :ensure t
  :defer t
)
#+END_SRC

** major mode hydra
#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package major-mode-hydra
  :ensure t)
#+END_SRC

**  hydra-posframe

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package hydra-posframe
  :load-path "packages/hydra-posframe"
  :custom
  (hydra-posframe-parameters
    '((left-fringe . 5)
      (right-fringe . 5)))
  :custom-face
  (hydra-posframe-border-face ((t (:background "#6272a4"))))
  :hook
  (after-init . hydra-posframe-mode)
)
#+END_SRC
* occur mode

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package occur-mode
  :ensure nil
  :defer t
  :config
  (evil-add-hjkl-bindings occur-mode-map 'emacs
    (kbd "/")       'evil-search-forward
    (kbd "n")       'evil-search-next
    (kbd "N")       'evil-search-previous
    (kbd "C-d")     'evil-scroll-down
    (kbd "C-u")     'evil-scroll-up
    (kbd "C-w C-w") 'other-window)
)
#+END_SRC

* ag
#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package ag
  :ensure t
  :defer t
  :ensure-system-package
  (ag . the_silver_searcher)
  :custom
  (ag-highligh-search t)
  (ag-reuse-buffers t)
  (ag-reuse-window t)
  :bind
  ("M-s a" . ag-project)
  :config
  (use-package wgrep-ag)
)
#+END_SRC

* wgrep

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package wgrep
  :ensure t
  :defer t
  :custom
  (wgrep-enable-key "e")
  (wgrep-auto-save-buffer t)
  (wgrep-change-readonly-file t)
)
#+END_SRC

* ripgrep

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package rg
  :ensure t
  :defer t
  :ensure-system-package
  (rg . ripgrep)
  :config
  ;; choose between default keybindings or magit like menu interface.
  ;; both options are mutually exclusive
  (rg-enable-default-bindings)
  ;;(rg-enable-menu)

)
#+END_SRC



* FlyCheck linter

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package flycheck
  :ensure t
  :defer t
  :diminish flycheck-mode
  :hook
  (flycheck-mode . flycheck-posframe-mode)
  :custom
  (flycheck-check-syntax-automatically '(save mode-enabled idle-change newline))
  (flycheck-idle-change-delay 1.5)
  (flycheck-display-errors-delay 1)
  (flycheck-indication-mode 'left-fringe)
  ;; force flycheck to use its own xml parser instead of libxml32 (was giving me errors)
  (flycheck-xml-parser 'flycheck-parse-xml-region)
  :config
  ;; customize flycheck temp file prefix
  (setq-default flycheck-temp-prefix ".flycheck")
  ;;
  ;;=======================================
  ;; Flycheck Setup for JavaScript
  ;;
  ;; disable jshint since we prefer eslint checking
  (setq-default flycheck-disabled-checkers (append flycheck-disabled-checkers '(javascript-jshint)))
  ;; enable eslint as default js flycheck linter
  (setq flycheck-checkers '(javascript-eslint))
  ;; use eslint_d instead of eslint for faster linting
  (setq flycheck-javascript-eslint-executable "eslint_d")
  (flycheck-add-mode 'javascript-eslint 'js-mode)
  (flycheck-add-mode 'javascript-eslint 'js2-mode)
  ;;
  ;;=======================================
  ;; Flycheck Setup for Typescript
  (flycheck-add-mode 'typescript-tslint 'rjsx-mode)
  (flycheck-add-mode 'typescript-tslint 'typescript-mode)
  ;;
  ;;=======================================
  ;; Flycheck Setup for WebMode
  ;;
  (eval-after-load 'flycheck
    '(flycheck-add-mode 'javascript-eslint 'web-mode))
  ;; Use tidy to check HTML buffers with web-mode.
  (eval-after-load 'flycheck
    '(flycheck-add-mode 'html-tidy 'web-mode))
  (eval-after-load 'flycheck
    '(flycheck-add-mode 'typescript-tslint 'web-mode))
)
#+END_SRC

** flycheck posframe

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package flycheck-posframe
  :ensure t
  :after flycheck
  :custom-face
  (flycheck-posframe-face ((nil (:background "#20fabe" :foreground "#FFCC0E"))))
  (flycheck-posframe-info-face ((nil (:inherit 'info))))
  (flycheck-posframe-warning-face ((nil (:inherit 'warning))))
  (flycheck-posframe-error-face ((nil (:inherit 'error))))
  (flycheck-posframe-background-face ((nil (:background "#fcfa23" :foreground "#ff0000"))))
  (flycheck-posframe-border-face ((nil (:background "#af3ec8"))))
  :config
  (setq flycheck-posframe-position 'point-bottom-left-corner)
  (setq flycheck-posframe-prefix "\u27a4 ") ;; default: ➤
  (setq flycheck-posframe-warning-prefix "\u26a0 ")
  (setq flycheck-posframe-info-prefix "\uf6c8 ")
  (setq  flycheck-posframe-error-prefix "\u274c ")
  (setq flycheck-posframe-border-width 2)
  ;; Calling (flycheck-posframe-configure-pretty-defaults) will configure flycheck-posframe to show warnings and errors with nicer faces (inheriting from warning and error respectively), and set the prefix for each to nicer unicode characters.
  ;;(flycheck-posframe-configure-pretty-defaults)
)
#+END_SRC


* Version Control

Always try to make bindings like this:
M-g for magit
C-c g for any git related stuff other than magit's

** Magit

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package magit
  :ensure t
  :custom
  (magit-auto-revert-mode t)
  ;;:hook
  ;; this line was giving the `Wrong number of arguments error'
  ;; (after-save . (lambda () (magit-after-save-refresh-status t)))
  :bind
  ("<tab>" . magit-section-toggle)
  ("M-g s" . magit-status)
  ("C-x g" . magit-status)
  :config
  (add-hook 'after-save-hook 'magit-after-save-refresh-status t)

)
#+END_SRC

** evil-magit
#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package evil-magit
  :ensure t
  :init
  (setq evil-magit-state 'normal)
  (setq evil-magit-use-y-for-yank nil)
  :config
  (evil-magit-init)
  (evil-define-key evil-magit-state magit-mode-map "<tab>" 'magit-section-toggle)
  (evil-define-key evil-magit-state magit-mode-map "l" 'magit-log-popup)
  (evil-define-key evil-magit-state magit-mode-map "j" 'evil-next-visual-line)
  (evil-define-key evil-magit-state magit-mode-map "k" 'evil-previous-visual-line)
  ;(evil-define-key evil-magit-state magit-diff-map "k" 'evil-previous-visual-line)
  (evil-define-key evil-magit-state magit-staged-section-map "K" 'magit-discard)
  (evil-define-key evil-magit-state magit-unstaged-section-map "K" 'magit-discard)
  (evil-define-key evil-magit-state magit-unstaged-section-map "K" 'magit-discard)
  (evil-define-key evil-magit-state magit-branch-section-map "K" 'magit-branch-delete)
  (evil-define-key evil-magit-state magit-remote-section-map "K" 'magit-remote-remove)
  (evil-define-key evil-magit-state magit-stash-section-map "K" 'magit-stash-drop)
  (evil-define-key evil-magit-state magit-stashes-section-map "K" 'magit-stash-clear)
)
#+END_SRC

** diffview
View diffs side by side

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package diffview
  :ensure t
  :defer t
)
#+END_SRC

** magit-todo

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package magit-todos
  :ensure t
  :after magit hl-todo
  :bind
  ("M-g t" . magit-todos-list)
  :config
  (magit-todos-mode)
)
#+END_SRC

** git-messenger

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package git-messenger
  :ensure t
  :bind
  ("C-c g p" . git-messenger:popup-message)
  :init
  (setq git-messenger:show-detail t)
  (setq git-messenger:use-magit-popup t)
  :config
  (progn
    (define-key git-messenger-map (kbd "RET") 'git-messenger:popup-close))
)
#+END_SRC

** vc-msg

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package vc-msg
  :ensure t
  :defer t
  :bind
  ("C-c g p" . git-messenger:popup-message)
  :init
  (setq git-messenger:show-detail t)
  (setq git-messenger:use-magit-popup t)
  :config
  (progn
    (define-key git-messenger-map (kbd "RET") 'git-messenger:popup-close))
)
#+END_SRC

** git-ignore mode


** git-modes

Major modes for git related files

#+BEGIN_SRC emacs-lisp :tangle init.el
;; Mode for .gitignore files.
(use-package gitignore-mode :ensure t :defer t)
(use-package gitconfig-mode :ensure t :defer t)
(use-package gitattributes-mode :ensure t :defer t)
#+END_SRC

** git-time-machine

Navigation through the history of files

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package git-timemachine
  :ensure t
  :bind
  ("C-c g t" . git-timemachine-toggle)
)
#+END_SRC


#+BEGIN_SRC emacs-lisp :tangle init.el
  (use-package forge
    :ensure t
    :after magit
    :config
    (setq forge-topic-list-limit '(30 . 5)
          forge-pull-notifications t)
)
#+END_SRC


* restclient

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package restclient
  :ensure t
  :mode
  ("\\.rest$\\'" "\\.http$\\'")
  :config
  (setq restclient-same-buffer-response t)
  (progn
    ;; Add hook to override C-c C-c in this mode to stay in window
    (add-hook 'restclient-mode-hook
              '(lambda ()
                 (local-set-key
                  (kbd "C-c C-c")
                  'restclient-http-send-current-stay-in-window))))
)
#+END_SRC

** ob-restclient

Org source blocks and exporter for restclient

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package ob-restclient
  :ensure t
  :mode "\\.rest$"
  :config
  ;; add restclient to org-babel languages
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((restclient . t)))
)
#+END_SRC

* undo-tree
#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package undo-tree
  :ensure t
  :diminish undo-tree-mode
  :init
  (global-undo-tree-mode)
;;  (undo-tree-mode)
)
#+END_SRC

* helpfull

A better replacement for emacs help system

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package helpful
  :ensure t
  :config
  (global-set-key (kbd "C-h f") #'helpful-callable)
  (global-set-key (kbd "C-h v") #'helpful-variable)
  (global-set-key (kbd "C-h k") #'helpful-key)

  ;; Lookup the current symbol at point. C-c C-d is a common keybinding
  ;; for this in lisp modes.
  (global-set-key (kbd "C-c C-d") #'helpful-at-point)

  ;; Look up *F*unctions (excludes macros).
  ;;
  ;; By default, C-h F is bound to `Info-goto-emacs-command-node'. Helpful
  ;; already links to the manual, if a function is referenced there.
  (global-set-key (kbd "C-h F") #'helpful-function)

  ;; Look up *C*ommands.
  ;;
  ;; By default, C-h C is bound to describe `describe-coding-system'. I
  ;; don't find this very useful, but it's frequently useful to only
  ;; look at interactive functions.
  (global-set-key (kbd "C-h C") #'helpful-command)
)
#+END_SRC

* elisp-format

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package elisp-format
  :ensure t
  :defer t
)
#+END_SRC

* Company

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package company
  :ensure t
  ;; :diminish company-mode
  :preface
  (defun smarter-yas-expand-next-field-complete ()
    "Try to `yas-expand' and `yas-next-field' at current cursor position.
If failed try to complete the common part with `company-complete-common'"
    (interactive)
    (if yas-minor-mode
        (let ((old-point (point))
              (old-tick (buffer-chars-modified-tick)))
          (yas-expand)
          (when (and (eq old-point (point))
                     (eq old-tick (buffer-chars-modified-tick)))
            (ignore-errors (yas-next-field))
            (when (and (eq old-point (point))
                       (eq old-tick (buffer-chars-modified-tick)))
              (company-complete-common))))
      (company-complete-common)))
  :hook
  (after-init . global-company-mode)
  :bind
  (:map company-active-map
        ([tab] . smarter-yas-expand-next-field-complete)
        ("TAB" . smarter-yas-expand-next-field-complete))
  (:map evil-insert-state-map
  ;; ("<tab>" . company-indent-or-complete-common)
  ("C-SPC" . company-indent-or-complete-common))
  (:map company-active-map
  ("M-n" . nil)
  ("M-p" . nil)
  ("C-n" . company-select-next)
  ("C-p" . company-select-previous)
  ("S-<backtab>" . company-select-previous)
  ("<backtab>" . company-select-previous)
  ("C-d" . company-show-doc-buffer))
  (:map company-search-map
  ("C-p" . company-select-previous)
  ("C-n" . company-select-next))
  :custom-face
  (company-preview-common ((t (:foreground unspecified :background "#111111"))))
  (company-scrollbar-bg ((t (:background "#111111"))))
  (company-scrollbar-fg ((t (:background "#555555"))))
  (company-tooltip ((t (:inherit default :background "#202029"))))
  (company-tooltip-common ((t (:inherit font-lock-constant-face))))
  (company-tooltip-selection ((t (:inherit company-tooltip-common :background "#2a2a2a" ))))
  :custom
  (company-minimum-prefix-length 1)                      ; start completing after 1st char typed
  (company-tooltip-align-annotations t)
  (company-tooltip-limit 20)                             ; bigger popup window
  (company-begin-commands '(self-insert-command))        ; start autocompletion only after typing
  (company-idle-delay 0.1)                               ; decrease delay before autocompletion popup shows
  (company-echo-delay 0)                                 ; remove annoying blinking
  (company-selection-wrap-around t)                      ; continue from top when reaching bottom
  (company-auto-complete 'company-explicit-action-p)
  (company-require-match nil)
  (company-complete-number t)                            ;; Allow (lengthy) numbers to be eligible for completion.
  (company-show-numbers t)                               ;; Number the candidates (use M-1, M-2 etc to select completions).
  (company-transformers '(company-sort-by-occurrence))   ; weight by frequency
  ;; company-dabbrev
  (company-dabbrev-downcase nil)                         ;; Do not downcase completions by default.
  (company-dabbrev-ignore-case t)                        ;; Even if I write something with the ‘wrong’ case, provide the ‘correct’ casing.
  (company-dabbrev-code-everywhere t)
  (company-dabbrev-other-buffers t)
  (company-dabbrev-code-other-buffers t)
  :config
  (global-company-mode)
  (progn
    (bind-key [remap completion-at-point] #'company-complete company-mode-map))
  ;; Frontends
  (setq company-frontends '(company-pseudo-tooltip-frontend
                          company-echo-metadata-frontend))
)
#+END_SRC

** Company-QuickHelp
 #+BEGIN_SRC emacs-lisp :tangle init.el
(use-package company-quickhelp          ; Documentation popups for Company
   :ensure t
   ;; :defer t
   :hook
   (global-company-mode . company-quickhelp-mode)
   :bind
   (:map company-active-map
   ("M-h" . company-quickhelp-manual-begin)
   )
   :config
   (setq company-quickhelp-delay 0.7)
   (company-quickhelp-mode)
)
 #+END_SRC

** Company postframe

: PS: this looks exactly the same as the usual company popup, except it doesn't disturb other overlays (like line numbers) in the buffer.
#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package company-posframe
  :ensure t
  :diminish company-posframe-mode
  :after company
  :hook
  (company-mode . company-posframe-mode)
  (global-company-mode . company-posframe-mode)
)
#+END_SRC

** Company Box (icons in suggestions)
#+BEGIN_SRC emacs-lisp :tangle init.el
;; CompanyBoxPac
(use-package company-box
  :ensure t
  :diminish
  :functions (my-company-box--make-line
              my-company-box-icons--elisp)
  :commands (company-box--get-color
             company-box--resolve-colors
             company-box--add-icon
             company-box--apply-color
             company-box--make-line
             company-box-icons--elisp)
  :hook ((global-company-mode company-mode) . company-box-mode)
  :custom
  (company-box-backends-colors nil)
  (company-box-show-single-candidate t)
  (company-box-max-candidates 50)
  (company-box-doc-delay 0.3)
  :config
  ;; Support `company-common'
  (defun my-company-box--make-line (candidate)
    (-let* (((candidate annotation len-c len-a backend) candidate)
            (color (company-box--get-color backend))
            ((c-color a-color i-color s-color) (company-box--resolve-colors color))
            (icon-string (and company-box--with-icons-p (company-box--add-icon candidate)))
            (candidate-string (concat (propertize (or company-common "") 'face 'company-tooltip-common)
                                      (substring (propertize candidate 'face 'company-box-candidate) (length company-common) nil)))
            (align-string (when annotation
                            (concat " " (and company-tooltip-align-annotations
                                             (propertize " " 'display `(space :align-to (- right-fringe ,(or len-a 0) 1)))))))
            (space company-box--space)
            (icon-p company-box-enable-icon)
            (annotation-string (and annotation (propertize annotation 'face 'company-box-annotation)))
            (line (concat (unless (or (and (= space 2) icon-p) (= space 0))
                            (propertize " " 'display `(space :width ,(if (or (= space 1) (not icon-p)) 1 0.75))))
                          (company-box--apply-color icon-string i-color)
                          (company-box--apply-color candidate-string c-color)
                          align-string
                          (company-box--apply-color annotation-string a-color)))
            (len (length line)))
      (add-text-properties 0 len (list 'company-box--len (+ len-c len-a)
                                       'company-box--color s-color)
                           line)
      line))
  (advice-add #'company-box--make-line :override #'my-company-box--make-line)

  ;; Prettify icons
  (defun my-company-box-icons--elisp (candidate)
    (when (derived-mode-p 'emacs-lisp-mode)
      (let ((sym (intern candidate)))
        (cond ((fboundp sym) 'Function)
              ((featurep sym) 'Module)
              ((facep sym) 'Color)
              ((boundp sym) 'Variable)
              ((symbolp sym) 'Text)
              (t . nil)))))
  (advice-add #'company-box-icons--elisp :override #'my-company-box-icons--elisp)

  (when (and (window-system)
             (require 'all-the-icons nil t))
    (declare-function all-the-icons-faicon 'all-the-icons)
    (declare-function all-the-icons-material 'all-the-icons)
    (declare-function all-the-icons-octicon 'all-the-icons)
    (setq company-box-icons-all-the-icons
          `((Unknown . ,(all-the-icons-material "find_in_page" :height 0.85 :v-adjust -0.2))
            (Text . ,(all-the-icons-faicon "text-width" :height 0.8 :v-adjust -0.05))
            (Method . ,(all-the-icons-faicon "cube" :height 0.8 :v-adjust -0.05 :face 'all-the-icons-purple))
            (Function . ,(all-the-icons-faicon "cube" :height 0.8 :v-adjust -0.05 :face 'all-the-icons-purple))
            (Constructor . ,(all-the-icons-faicon "cube" :height 0.8 :v-adjust -0.05 :face 'all-the-icons-purple))
            (Field . ,(all-the-icons-octicon "tag" :height 0.8 :v-adjust 0 :face 'all-the-icons-lblue))
            (Variable . ,(all-the-icons-octicon "tag" :height 0.8 :v-adjust 0 :face 'all-the-icons-lblue))
            (Class . ,(all-the-icons-material "settings_input_component" :height 0.85 :v-adjust -0.2 :face 'all-the-icons-orange))
            (Interface . ,(all-the-icons-material "share" :height 0.85 :v-adjust -0.2 :face 'all-the-icons-lblue))
            (Module . ,(all-the-icons-material "view_module" :height 0.85 :v-adjust -0.2 :face 'all-the-icons-lblue))
            (Property . ,(all-the-icons-faicon "wrench" :height 0.8 :v-adjust -0.05))
            (Unit . ,(all-the-icons-material "settings_system_daydream" :height 0.85 :v-adjust -0.2))
            (Value . ,(all-the-icons-material "format_align_right" :height 0.85 :v-adjust -0.2 :face 'all-the-icons-lblue))
            (Enum . ,(all-the-icons-material "storage" :height 0.85 :v-adjust -0.2 :face 'all-the-icons-orange))
            (Keyword . ,(all-the-icons-material "filter_center_focus" :height 0.85 :v-adjust -0.2))
            (Snippet . ,(all-the-icons-material "format_align_center" :height 0.85 :v-adjust -0.2))
            (Color . ,(all-the-icons-material "palette" :height 0.85 :v-adjust -0.2))
            (File . ,(all-the-icons-faicon "file-o" :height 0.85 :v-adjust -0.05))
            (Reference . ,(all-the-icons-material "collections_bookmark" :height 0.85 :v-adjust -0.2))
            (Folder . ,(all-the-icons-faicon "folder-open" :height 0.85 :v-adjust -0.05))
            (EnumMember . ,(all-the-icons-material "format_align_right" :height 0.85 :v-adjust -0.2 :face 'all-the-icons-lblue))
            (Constant . ,(all-the-icons-faicon "square-o" :height 0.85 :v-adjust -0.05))
            (Struct . ,(all-the-icons-material "settings_input_component" :height 0.85 :v-adjust -0.2 :face 'all-the-icons-orange))
            (Event . ,(all-the-icons-faicon "bolt" :height 0.8 :v-adjust -0.05 :face 'all-the-icons-orange))
            (Operator . ,(all-the-icons-material "control_point" :height 0.85 :v-adjust -0.2))
            (TypeParameter . ,(all-the-icons-faicon "arrows" :height 0.8 :v-adjust -0.05))
            (Template . ,(all-the-icons-material "format_align_center" :height 0.85 :v-adjust -0.2)))
          company-box-icons-alist 'company-box-icons-all-the-icons)))
;; -CompanyBoxPac
#+END_SRC

** company-lsp

Company-lsp is auto inserted into company backends
#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package company-lsp
  :ensure t
  :custom
  (company-lsp-enable-snippet t)
  (company-lsp-async t)
  (company-lsp-cache-candidates 'auto)
  (company-lsp-enable-recompletion t)
)
#+END_SRC


* LSP

** LSP (language server protocol implementation for emacs)

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package lsp-mode
  :ensure t
  :commands lsp
  :custom
  ;; general
  (lsp-inhibit-message nil) ;; was `t`, changed to nil to see what it does
  (lsp-eldoc-render-all nil)  ;; was `nil`, changed to t to see what it does
  (lsp-highlight-symbol-at-point t)  ;; was `nil`, changed to nil to see what it does
  (lsp-auto-guess-root t)
  (lsp-document-sync-method 'incremental) ;; none, full, incremental, or nil
  (lsp-response-timeout 10)
  (lsp-prefer-flymake nil) ;; use flycheck instead of flymake
  (lsp-enable-symbol-highlighting nil)
  (lsp-signature-auto-activate nil)
  ;debug
  (lsp-print-io nil)
  (lsp-trace nil)
  (lsp-print-performance nil)
  :config
  ;; angular language server
  (setq lsp-clients-angular-language-server-command
    '("node"
      "~/.nvm/versions/node/v10.16.3/lib/node_modules/@angular/language-server"
      "--ngProbeLocations"
      "~/.nvm/versions/node/v10.16.3/lib/node_modules"
      "--tsProbeLocations"
      "~/.nvm/versions/node/v10.16.3/lib/node_modules"
      "--stdio"))
)

#+END_SRC
** lsp ui
#+BEGIN_SRC emacs-lisp :tangle init.el
  (use-package lsp-ui
    :ensure t
    :after lsp-mode
    :hook
    (lsp-mode . lsp-ui-mode)
    :custom-face
    (lsp-ui-doc-background ((t (:background nil))))
    (lsp-ui-doc-header ((t (:inherit (font-lock-string-face italic)))))
    :preface
    (defun tau/toggle-lsp-ui-doc ()
      (interactive)
      (if lsp-ui-doc-mode
        (progn
          (lsp-ui-doc-mode -1)
          (lsp-ui-doc--hide-frame))
      (lsp-ui-doc-mode 1)))
    :bind
      (:map lsp-mode-map
        ("C-c l p f r" . lsp-ui-peek-find-references)
        ("C-c l p f d" . lsp-ui-peek-find-definitions)
        ("C-c l p f i" . lsp-ui-peek-find-implementation)
        ("C-c l g d" . lsp-goto-type-definition)
        ("C-c l f d" . lsp-find-definition)
        ("C-c l g i" . lsp-goto-implementation)
        ("C-c l f i" . lsp-find-implementation)
        ("C-c l m"   . lsp-ui-imenu)
        ("C-c l s"   . lsp-ui-sideline-mode)
        ("C-c l d"   . tau/toggle-lsp-ui-doc))
      ;; remap native find-definitions and references to use lsp-ui
      (:map lsp-ui-mode-map
        ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
        ([remap xref-find-references] . lsp-ui-peek-find-references)
        ("C-c u" . lsp-ui-imenu))
    :custom
    ;; lsp-ui-doc
    (lsp-ui-doc-enable nil)
    (lsp-ui-doc-header t)
    (lsp-ui-doc-include-signature t)
    (lsp-ui-doc-position 'top) ;; top, bottom, or at-point
    (lsp-ui-doc-border (face-foreground 'default))
    (lsp-ui-doc-max-width 100)
    (lsp-ui-doc-max-height 30)
    (lsp-ui-doc-use-childframe t)
    ;; lsp-ui-flycheck
    (lsp-ui-flycheck-enable nil) ;; disable to leave tsling as checker for ts files
    (lsp-ui-flycheck-list-position 'right)
    (lsp-ui-flycheck-live-reporting t)
    ;; lsp-ui-sideline
    (lsp-ui-sideline-enable nil)
    (lsp-ui-sideline-ignore-duplicate t)
    (lsp-ui-sideline-show-symbol t)
    (lsp-ui-sideline-show-hover t)
    (lsp-ui-sideline-show-diagnostics nil) ;; show flycheck diagnostics
    (lsp-ui-sideline-show-code-actions t)
    (lsp-ui-sideline-code-actions-prefix "")
    (lsp-ui-sideline-update-mode 'point)
    ;; lsp-ui-imenu
    (lsp-ui-imenu-enable t)
    (lsp-ui-imenu-kind-position 'top)
    ;; lsp-ui-peek
    (lsp-ui-peek-enable t)
    (lsp-ui-peek-peek-height 20)
    (lsp-ui-peek-list-width 40)
    (lsp-ui-peek-fontify 'on-demand) ;; never, on-demand, or always
    :config
    ;; lsp-ui appearance
    (set-face-attribute 'lsp-ui-doc-background  nil :background "#f9f2d9")
    (add-hook 'lsp-ui-doc-frame-hook
      (lambda (frame _w)
        (set-face-attribute 'default frame :font "Hack 11")))

    (set-face-attribute 'lsp-ui-sideline-global nil
                        :inherit 'shadow
                        :background "#f9f2d9")
    ;; Use lsp-ui-doc-webkit only in GUI
    (if (window-system)
      (setq lsp-ui-doc-use-webkit t))
  )
#+END_SRC


** lsp flycheck

** dap - debug adapter protocol

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package dap-mode
  :ensure t
  :defer t
  :diminish
  :bind
  (:map dap-mode-map
        (("<M-f12>" . dap-debug)
         ("<M-f8>" . dap-continue)
         ("<M-f9>" . dap-next)
         ("<M-f11>" . dap-step-in)
         ("C-M-<f11>" . dap-step-out)
         ("<M-f7>" . dap-breakpoint-toggle)))
  :hook ((after-init . dap-mode)
         (dap-mode . dap-ui-mode)
         (python-mode . (lambda () (require 'dap-python)))
         (ruby-mode . (lambda () (require 'dap-ruby)))
         (go-mode . (lambda () (require 'dap-go)))
         (java-mode . (lambda () (require 'dap-java)))
         ((c-mode c++-mode objc-mode swift) . (lambda () (require 'dap-lldb)))
         (php-mode . (lambda () (require 'dap-php)))
         (elixir-mode . (lambda () (require 'dap-elixir)))
         ((js-mode js2-mode typescript-mode) . (lambda () (require 'dap-chrome))))
  :config
  ;; (dap-mode 1)
  ;; (dap-ui-mode 1)
  ;; enables mouse hover support
  ;; (dap-tooltip-mode 1)
  ;; use tooltips for mouse hover
  ;; if it is not enabled `dap-mode' will use the minibuffer.
  ;; (tooltip-mode 1)
  ;; dap-mode also provides a hydra with dap-hydra. You can automatically trigger the hydra when the program hits a breakpoint by using the following code.
  (add-hook 'dap-stopped-hook
          (lambda (arg) (call-interactively #'dap-hydra)))
)
#+END_SRC

** lsp treemacs

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package lsp-treemacs
  :ensure t
  :defer t
  :init
  (setq lsp-treemacs-sync-mode 1)
)
#+END_SRC

** lsp-ivy

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package lsp-ivy
  :ensure t
  :defer t
  :bind
  ("C-c l i s" . lsp-ivy-workspace-symbol)
)
#+END_SRC


* Yasnippets

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package yasnippet
  :ensure t
  :diminish yas-minor-mode
  ;;:hook
  ;;(prog-mode . yas-minor-mode)
  ;;(text-mode . yas-minor-mode)
  :bind
  ;; ("<tab>" . yas-maybe-expand)
  ("C-<tab>" . yas-maybe-expand)
  (:map yas-minor-mode-map
  ;; yas-maybe-expand only expands if there are candidates.
  ;; if not, acts like binding is unbound and run whatever command is bound to that key normally
  ;; ("<tab>" . yas-maybe-expand)
  ;; Bind `C-c y' to `yas-expand' ONLY.
  ("C-c y" . yas-expand)
  ("C-SPC" . yas-expand)
  )
  :config
  ;; set snippets directory
  ;;  (setq yas-snippet-dirs '(yasnippet-snippets-dir))
  ;; add angular snippets folder
  (with-eval-after-load 'yasnippets-snippets
  (setq yas-snippet-dirs (append yas-snippet-dirs
                                 '("~/dotfiles/emacs.d/snippets/angular/"))))
  (setq yas-verbosity 1)                      ; No need to be so verbose
  (setq yas-wrap-around-region t)
  (yas-reload-all) ;; tell yasnippet about updates to yas-snippet-dirs
  ;; disabled global mode in favor or hooks in prog and text modes only
  ;; (yas-global-mode 1)
)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package yasnippet-snippets         ; Collection of snippets
  :ensure t
)
#+END_SRC


* File Explorers

** ivy-explorer
#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package ivy-explorer
  :ensure t
  :after ivy
  :hook
  (after-init . ivy-explorer-mode)
  :config
  ;; use ivy explorer for all file dialogs
)
#+END_SRC

** Dired

 #+BEGIN_SRC emacs-lisp :tangle init.el
 (use-package dired-k
   :after dired
   :config
   (setq dired-k-style 'git)
   (setq dired-k-human-readable t)
   (setq dired-dwin-target t)
   (add-hook 'dired-initial-position-hook #'dired-k)
 )
 #+END_SRC

** all the icons dired
#+BEGIN_SRC emacs-lisp :tangle init.el
 (use-package all-the-icons-dired
  :ensure t
  :defer t
  :hook
  (dired-mode . all-the-icons-dired-mode)
)
#+END_SRC

** Treemacs (neotree like navigation)


*** Treemacs itself
    #+BEGIN_SRC emacs-lisp :tangle init.el
 (use-package treemacs
   :ensure t
   :defer t
   :hook
   (after-init . treemacs)
   :bind
   (:map global-map
         ("<f8>"       . treemacs)
         ("M-0"       . treemacs-select-window)
         ("C-x t 1"   . treemacs-delete-other-windows)
         ("C-x t t"   . treemacs)
         ("C-x t B"   . treemacs-bookmark)
         ("C-x t C-t" . treemacs-find-file)
         ("C-x t M-t" . treemacs-find-tag))
   :init
   ;; general variables
   (setq treemacs-no-png-images nil)
   (setq treemacs-deferred-git-apply-delay 0.5)
   (setq treemacs-display-in-side-window t)
   (setq treemacs-eldoc-display t)
   (setq treemacs-file-event-delay 5000)
   (setq treemacs-file-follow-delay 0.2)
   (setq treemacs-follow-after-init t)
   (setq treemacs-git-command-pipe "")
   (setq treemacs-goto-tag-strategy 'refetch-index)
   (setq treemacs-indentation 2)
   (setq treemacs-indentation-string " ")
   (setq treemacs-is-never-other-window nil)
   (setq treemacs-max-git-entries 5000)
   (setq treemacs-missing-project-action 'ask)
   (setq treemacs-no-delete-other-windows t)
   (setq treemacs-project-follow-cleanup nil)
   (setq treemacs-persist-file (expand-file-name ".cache/treemacs-persist" user-emacs-directory))
   (setq treemacs-position 'left)
   (setq treemacs-recenter-distance 0.1)
   (setq treemacs-recenter-after-file-follow nil)
   (setq treemacs-recenter-after-tag-follow nil)
   (setq treemacs-recenter-after-project-jump 'always)
   (setq treemacs-recenter-after-project-expand 'on-distance)
   (setq treemacs-show-cursor nil)
   (setq treemacs-show-hidden-files t)
   (setq treemacs-silent-filewatch nil)
   (setq treemacs-silent-refresh nil)
   (setq treemacs-sorting 'alphabetic-desc)
   (setq treemacs-space-between-root-nodes t)
   (setq treemacs-tag-follow-cleanup t)
   (setq treemacs-tag-follow-delay 1.5)
   (setq treemacs-width 35)
   :config

   (setq treemacs-collapse-dirs (if treemacs-python-executable 3 0))
   (add-hook 'treemacs-mode-hook #'hide-mode-line-mode)
   (add-hook 'treemacs-mode-hook (lambda ()
                                   (linum-mode -1)
                                   (fringe-mode 0)
                                   ;; (setq buffer-face-mode-face `(:background "#211C1C"))
                                   (buffer-face-mode 1)))


   (treemacs-follow-mode t)
   (treemacs-filewatch-mode t)
   (treemacs-fringe-indicator-mode t)
   (pcase (cons (not (null (executable-find "git")))
                (not (null treemacs-python-executable)))
     (`(t . t)
      (treemacs-git-mode 'deferred))
     (`(t . _)
      (treemacs-git-mode 'simple)))

  ;; my vscode icon theme, using vscode-icons
  ;; i just placed the vscode-icons folder inside the treemacs icons vfolder and changed paths
  (defcustom tau-themes-treemacs-theme "vscode"
  "Default treemacs theme."
  :type '(radio (const :doc "A minimalistic atom-inspired icon theme" "doom-atom")
                (const :doc "A colorful icon theme leveraging all-the-icons" "doom-colors"))
  :group 'tau-themes-treemacs)

  ;; warn if all-the-icons isnt sinstalled
  (with-eval-after-load 'treemacs
  (unless (require 'all-the-icons nil t)
    (error "all-the-icons isn't installed"))

  (let ((face-spec '(:inherit font-lock-doc-face :slant normal)))  ;; taken from doom-treemacs -theme to use all theicons in some parts
  (treemacs-create-theme "vscode"
    :icon-directory (f-join treemacs-dir "icons/default")
    :config
    (progn
      ;; directory and other icons
      ;; (treemacs-create-icon :file "root.png"        :extensions (root)       :fallback "")
       (treemacs-create-icon
         :icon (format " %s\t" (all-the-icons-octicon "repo" :height 1.2 :v-adjust -0.1 :face face-spec))
         :extensions (root))
      (treemacs-create-icon :file "vscode/default_folder.png"  :extensions (dir-closed) :fallback (propertize "+ " 'face 'treemacs-term-node-face))
      (treemacs-create-icon :file "vscode/default_folder_opened.png"    :extensions (dir-open)   :fallback (propertize "- " 'face 'treemacs-term-node-face))
      (treemacs-create-icon :file "tags-leaf.png"   :extensions (tag-leaf)   :fallback (propertize "• " 'face 'font-lock-constant-face))
      (treemacs-create-icon :file "tags-open.png"   :extensions (tag-open)   :fallback (propertize "▸ " 'face 'font-lock-string-face))
      (treemacs-create-icon :file "tags-closed.png" :extensions (tag-closed) :fallback (propertize "▾ " 'face 'font-lock-string-face))
      (treemacs-create-icon :file "error.png"       :extensions (error)      :fallback (propertize "• " 'face 'font-lock-string-face))
      (treemacs-create-icon :file "warning.png"     :extensions (warning)    :fallback (propertize "• " 'face 'font-lock-string-face))
      (treemacs-create-icon :file "info.png"        :extensions (info)       :fallback (propertize "• " 'face 'font-lock-string-face))

      ;; common file types icons
      (treemacs-create-icon :file "vscode/default_file.png"         :extensions (fallback))
      (treemacs-create-icon :file "vscode/image.png"       :extensions ("jpg" "jpeg" "bmp" "svg" "png" "xpm" "gif"))
      (treemacs-create-icon :file "vscode/video.png"       :extensions ("webm" "mp4" "avi" "mkv" "flv" "mov" "wmv" "mpg" "mpeg" "mpv"))
      (treemacs-create-icon :file "vscode/pdf.png"         :extensions ("pdf"))
      (treemacs-create-icon :file "vscode/emacs.png"       :extensions ("el" "elc"))
      (treemacs-create-icon :file "ledger.png"      :extensions ("ledger"))
      (treemacs-create-icon :file "vscode/config.png"        :extensions ("properties" "conf" "config" "cfg" "ini" "xdefaults" "xresources" "terminalrc" "ledgerrc"))
      (treemacs-create-icon :file "vscode/shell.png"       :extensions ("sh" "zsh" "fish"))
      (treemacs-create-icon :file "asciidoc.png"    :extensions ("adoc" "asciidoc"))
      ;; git
      (treemacs-create-icon :file "vscode/git.png"         :extensions ("git" "gitignore" "gitconfig" "gitmodules" "gitattributes"))
      ;; dev lib
      (treemacs-create-icon :file "vscode/editorconfig.png"         :extensions ("editorconfig"))
      ;; frontend universe
      (treemacs-create-icon :file "vscode/json.png"        :extensions ("json"))
      (treemacs-create-icon :file "vscode/html.png"        :extensions ("html" "htm"))
      (treemacs-create-icon :file "vscode/css.png"         :extensions ("css"))
      (treemacs-create-icon :file "vscode/scss.png"         :extensions ("scss"))
      (treemacs-create-icon :file "vscode/js_official.png"          :extensions ("js" "jsx"))
      (treemacs-create-icon :file "vscode/typescript.png"          :extensions ("ts" "tsx"))
      (treemacs-create-icon :file "vscode/typescriptdef.png"          :extensions ("spec"))
      (treemacs-create-icon :file "vscode/tslint.png"          :extensions ("tslint"))
      (treemacs-create-icon :file "vscode/tsconfig.png"          :extensions ("tsconfig"))
      (treemacs-create-icon :file "vscode/vue.png"         :extensions ("vue"))
      (treemacs-create-icon :file "vscode/elm.png"         :extensions ("elm"))
      ;; markupgs
      (treemacs-create-icon :file "vscode/org.png"     :extensions ("org"))
      (treemacs-create-icon :file "vscode/markdown.png"    :extensions ("md"))
      (treemacs-create-icon :file "vscode/tex.png"         :extensions ("tex"))
      (treemacs-create-icon :file "vscode/yaml.png"        :extensions ("yml" "yaml"))
      (treemacs-create-icon :file "vscode/toml.png"        :extensions ("toml"))
      (treemacs-create-icon :file "vscode/dartlang.png"        :extensions ("dart"))
      (treemacs-create-icon :file "vscode/julia.png"       :extensions ("jl"))
      ;; erlang / elixir
      (treemacs-create-icon :file "vscode/erlang2.png"      :extensions ("erl" "hrl"))
      (treemacs-create-icon :file "vscode/elixir.png"         :extensions ("ex"))
      (treemacs-create-icon :file "elx-light.png"   :extensions ("exs" "eex"))
      ;; ruby
      (treemacs-create-icon :file "ruby.png"   :extensions ("rb"))
      (treemacs-create-icon :file "erb.png"   :extensions ("erb"))
      ;; backend languages file types
      (treemacs-create-icon :file "vscode/rust.png"        :extensions ("rs"))
      (treemacs-create-icon :file "vscode/clojure.png"     :extensions ("clj" "cljs" "cljc"))
      (treemacs-create-icon :file "vscode/java.png"        :extensions ("java"))
      (treemacs-create-icon :file "vscode/kotlin.png"      :extensions ("kt"))
      (treemacs-create-icon :file "vscode/scala.png"       :extensions ("scala"))
      (treemacs-create-icon :file "sbt.png"         :extensions ("sbt"))
      (treemacs-create-icon :file "vscode/go.png"          :extensions ("go"))
      (treemacs-create-icon :file "vscode/php.png"         :extensions ("php"))
      (treemacs-create-icon :file "vscode/c.png"           :extensions ("c" "h"))
      (treemacs-create-icon :file "vscode/cpp.png"         :extensions ("cpp" "cxx" "hpp" "tpp" "cc" "hh"))
      ;; lisp ecosystem
      (treemacs-create-icon :file "racket.png"      :extensions ("racket" "rkt" "rktl" "rktd" "scrbl" "scribble" "plt"))
      ;; haskell
      (treemacs-create-icon :file "vscode/haskell.png"     :extensions ("hs" "lhs"))
      (treemacs-create-icon :file "cabal.png"       :extensions ("cabal"))
      ;; python
      (treemacs-create-icon :file "python.png"      :extensions ("py" "pyc"))
      (treemacs-create-icon :file "hy.png"          :extensions ("hy"))
      (treemacs-create-icon :file "ocaml.png"       :extensions ("ml" "mli"))
      (treemacs-create-icon :file "puppet.png"      :extensions ("pp"))
      ;; devops tools
      (treemacs-create-icon :file "vscode/docker.png"      :extensions ("dockerfile"))
      (treemacs-create-icon :file "vagrant.png"     :extensions ("vagrantfile"))
      (treemacs-create-icon :file "jinja2.png"      :extensions ("j2" "jinja2"))
      (treemacs-create-icon :file "purescript.png"  :extensions ("purs"))
      (treemacs-create-icon :file "nix.png"         :extensions ("nix"))
      (treemacs-create-icon :file "scons.png"       :extensions ("sconstruct" "sconstript"))
      (treemacs-create-icon :file "vscode/make.png"    :extensions ("makefile"))
      (treemacs-create-icon :file "vscode/license.png" :extensions ("license"))
      (treemacs-create-icon :file "vscode/zip.png"     :extensions ("zip" "7z" "tar" "gz" "rar"))
      (treemacs-create-icon :file "vscode/elm.png"     :extensions ("elm"))
      (treemacs-create-icon :file "vscode/xml.png"     :extensions ("xml" "xsl"))
      (treemacs-create-icon :file "vscode/binary.png"  :extensions ("exe" "dll" "obj" "so" "o"))
      (treemacs-create-icon :file "vscode/ruby.png"    :extensions ("rb"))
      (treemacs-create-icon :file "vscode/scss.png"    :extensions ("scss"))
      (treemacs-create-icon :file "vscode/lua.png"     :extensions ("lua"))
      (treemacs-create-icon :file "vscode/log.png"     :extensions ("log"))
      (treemacs-create-icon :file "vscode/lisp.png"    :extensions ("lisp"))
      (treemacs-create-icon :file "vscode/sql.png"     :extensions ("sql"))
      (treemacs-create-icon :file "vscode/nim.png"     :extensions ("nim"))
      (treemacs-create-icon :file "vscode/perl.png"    :extensions ("pl" "pm" "perl"))
      (treemacs-create-icon :file "vscode/vim.png"     :extensions ("vimrc" "tridactylrc" "vimperatorrc" "ideavimrc" "vrapperrc"))
      (treemacs-create-icon :file "vscode/deps.png"    :extensions ("cask"))
      (treemacs-create-icon :file "vscode/r.png"       :extensions ("r"))
      (treemacs-create-icon :file "vscode/reason.png"  :extensions ("re" "rei")))))

  ;; finally apply the custom theme
  (treemacs-load-theme tau-themes-treemacs-theme))

   ;;apply treemacs icon theme
   (treemacs-load-theme "vscode")
   (treemacs-resize-icons 18) ;; usefull on high dpi monitors.  default icon size is 22

)
  #+END_SRC

*** Treemacs Evil
    #+BEGIN_SRC emacs-lisp :tangle init.el
(use-package treemacs-evil
   :after treemacs evil
   :ensure t
)
    #+END_SRC

*** Treemacs Projectile
#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package treemacs-projectile
   :after treemacs projectile
   :ensure t
)
#+END_SRC

*** Treemacs Dired

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package treemacs-icons-dired
  :after treemacs dired
  :ensure t
  :config (treemacs-icons-dired-mode)
)
#+END_SRC

*** Treemacs Magit
#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package treemacs-magit
   :after treemacs magit
   :ensure t
)
#+END_SRC

** ranger

 #+BEGIN_SRC emacs-lisp :tangle init.el
(use-package ranger
  :ensure t
  :defer t
  :bind
  ("C-x C-j" . ranger)
  :config
  (setq ranger-show-hidden t) ;; show hidden files
)
 #+END_SRC



* Appearance

#+BEGIN_SRC emacs-lisp :tangle init.el
(setq echo-keystrokes 0.02)
#+END_SRC

** all the icons
#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package all-the-icons :if window-system)
#+END_SRC

** Highlight trailing whitespace
#+BEGIN_SRC emacs-lisp :tangle init.el
(setq-default show-trailing-whitespace t)
(set-face-background 'trailing-whitespace "#f44545")
 #+END_SRC

** Add some information about buffer boundaries in the left fringe.

#+BEGIN_SRC emacs-lisp :tangle init.el
(setq-default indicate-buffer-boundaries 'left)
(setq-default indicate-empty-lines t)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle init.el
(setq display-time-24hr-format t)
(display-time-mode +1)
#+END_SRC

** startup stuff (splash and start screen, scratch message, etc...)

#+BEGIN_SRC emacs-lisp :tangle init.el
;; appearantly the `inhibit-splash-screen' was deprecaded. uses `inhibit-startup-screen' now
(setq inhibit-splash-screen t)
(setq inhibit-startup-screen t)

(setq inhibit-startup-screen t)
(setq inhibit-startup-message t)
(setq initial-buffer-choice nil)
;; Makes *scratch* empty.
(setq initial-scratch-message nil)
;; Don't show *Buffer list* when opening multiple files at the same time.
;;(setq initial-major-mode 'org-mode)  ;;start in org-mode
(setq inhibit-startup-buffer-menu t)
;; Make the buffer that opens on startup your init file ("~/.emacs" or
;; "~/.emacs.d/init.el").
;;(setq initial-buffer-choice user-init-file)

(blink-cursor-mode t)
(setq blink-cursor-blinks 0) ;; blink forever
(setq-default indicate-empty-lines t)

(setq frame-title-format '("Emacs"))
 #+END_SRC

** scroll bars from frames
    #+BEGIN_SRC emacs-lisp :tangle init.el
(scroll-bar-mode -1)
    #+END_SRC

** Remove menu bar and tool bar
    #+BEGIN_SRC emacs-lisp :tangle init.el
(tool-bar-mode -1)
(menu-bar-mode -1)
    #+END_SRC

** set background and foreground color

#+BEGIN_SRC emacs-lisp :tangle init.el
(set-background-color "#111111")
(set-foreground-color "#dddddd")
#+END_SRC

** Applying my theme

#+BEGIN_SRC emacs-lisp :tangle init.el
(add-to-list 'custom-theme-load-path "~/dotfiles/emacs.d/themes/")
  ; theme options:
  ; atom-one-dark (doenst work well with emacsclient, ugly blue bg)
  ; dracula
  ; darktooth
  ; gruvbox-dark-hard
  ; gruvbox-dark-light
  ; gruvbox-dark-medium
  ; base16-default-dark-theme -- this one is good

#+END_SRC

 Load the theme

#+BEGIN_SRC emacs-lisp :tangle init.el
(load-theme my-theme t)
#+END_SRC


#+BEGIN_SRC emacs-lisp :tangle init.el

(defun load-my-theme (frame)
  "Function to load the theme in current FRAME.
  sed in conjunction
  with bellow snippet to load theme after the frame is loaded
  to avoid terminal breaking theme."
  (select-frame frame)
  (load-theme my-theme t))

; make emacs load the theme after loading the frame
; resolves issue with the theme not loading properly in terminal mode on emacsclient
;; NOTE this if was breaking my emacs!!!!!
;; (add-hook 'after-make-frame-functions #'load-my-theme)
#+END_SRC


** doom themes
#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package doom-themes
  :ensure t
  :disabled
  :init (load-theme 'doom-tomorrow-night t)
  :config
  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)

  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config)

  ;; Enable custom treemacs theme (all-the-icons must be installed!)
  (doom-themes-treemacs-config)
)
#+END_SRC

** Uniquify (unique files names in buffers)

This package is included in emacs, so `:ensure nil` prevents use-package from trying to download it on Melpa

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package uniquify
  :defer 1
  :ensure nil
  :custom
  (uniquify-after-kill-buffer-p t)
  (uniquify-buffer-name-style 'post-forward)
  (uniquify-strip-common-suffix t)
)
#+END_SRC

** All The Icons - Icon package

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package all-the-icons
  :ensure t
)
#+END_SRC

** vscode-icons

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package vscode-icon
  :ensure t
  :commands (vscode-icon-for-file)
)
#+END_SRC

** solaire-mode

solaire-mode is an aesthetic plugin that helps visually distinguish
file-visiting windows from other types of windows (like popups or sidebars)
by giving them a slightly different -- often brighter -- background.

#+BEGIN_SRC emacs-lisp :tangle init.el
  ;; (use-package solaire-mode
  ;;   :config
  ;;   (solaire-mode)
  ;;   :hook
  ;;   (after-init . solaire-global-mode +1)
  ;;   ;; To enable solaire-mode unconditionally for certain modes:
  ;;   (ediff-prepare-buffer . solaire-mode)
  ;;   ;; if you use auto-revert-mode, this prevents solaire-mode from turning itself off every time Emacs reverts the file
  ;;   (after-revert- . turn-on-solaire-mode)
  ;;   ;; highlight the minibuffer when it is activated:
  ;;   (minibuffer-setup . solaire-mode-in-minibuffer)
  ;;   (after-change-major-mode . turn-on-solaire-mode)
  ;;   :config
  ;;   ;; if the bright and dark background colors are the wrong way around, use this
  ;;   ;; to switch the backgrounds of the `default` and `solaire-default-face` faces.
  ;;   ;; This should be used *after* you load the active theme!
  ;;   ;;  NOTE: This is necessary for themes in the doom-themes package!
  ;;   (solaire-mode-swap-bg))
#+END_SRC

** fancy-battery-mode
#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package fancy-battery
  :ensure t
  :config
  (add-hook 'after-init-hook #'fancy-battery-mode)
)
#+END_SRC
** dimmer

Dim unused frames and windows
Focus current window and dim unused ones

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package dimmer
  :disabled
  :ensure t
  :config (dimmer-mode)
)
#+END_SRC


* Frame and Windows

#+BEGIN_SRC emacs-lisp :tangle init.el
(dolist (frame (frame-list))
  (set-frame-parameter frame 'bottom-divider-width 1)
  (set-frame-parameter frame 'right-divider-width 1))


           (push (cons 'bottom-divider-width 1) default-frame-alist)
           (push (cons 'right-divider-width 1) default-frame-alist)
#+END_SRC

* Window and frame management and navigation

** auto balance windows area

#+BEGIN_SRC emacs-lisp :tangle init.el
(global-set-key (kbd "C-M-+") 'balance-windows-area)
#+END_SRC

** eyebrowse
#+begin_SRC emacs-lisp :tangle init.el
(use-package eyebrowse
  :hook
  (after-init . eyebrowse-mode)
  :bind
  (:map eyebrowse-mode-map
  ("M-1" . eyebrowse-switch-to-window-config-1)
  ("M-2" . eyebrowse-switch-to-window-config-2)
  ("M-3" . eyebrowse-switch-to-window-config-3)
  ("M-4" . eyebrowse-switch-to-window-config-4)
  ("H-<right>" . eyebrowse-next-window-config)
  ("H-<left>" . eyebrowse-prev-window-config))
  :config
  ;;(define-key eyebrowse-mode-map (kbd "M-1") 'eyebrowse-switch-to-window-config-1)
  ;;(define-key eyebrowse-mode-map (kbd "M-2") 'eyebrowse-switch-to-window-config-2)
  ;;(define-key eyebrowse-mode-map (kbd "M-3") 'eyebrowse-switch-to-window-config-3)
  ;;(define-key eyebrowse-mode-map (kbd "M-4") 'eyebrowse-switch-to-window-config-4)
  ;;(define-key eyebrowse-mode-map (kbd "H-<right>") 'eyebrowse-next-window-config)
  ;;(define-key eyebrowse-mode-map (kbd "H-<left>") 'eyebrowse-prev-window-config)
  (eyebrowse-mode t)
  (setq eyebrowse-new-workspace t)
)
#+END_SRC

** ace-window

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package ace-window
  :ensure t
  :functions hydra-frame-window/body
  :bind
  ("M-o" . ace-window)
  :custom-face
  (aw-leading-char-face ((t (:height 4.0 :foreground "#f1fa8c"))))
  :config
  ;; (setq aw-keys '(?j ?k ?l ?i ?o ?h ?y ?u ?p))
  (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)) ;; set the window labels in the home row
)
#+END_SRC
** emacsrotate

This shares bindings with ace-window

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package rotate
  :ensure t
  :defer t
  :bind
  ("C-c r w" . rotate-window)
  ("C-c r l" . rotate-layout)
  ("M-S-O SPC" . rotate-layout)
  ("M-S-O m" . tau/toggle-window-maximize)
  ("C-M-o" . hydra-frame-window/body)
  :preface
  (defvar is-window-maximized nil)
  (defun tau/toggle-window-maximize ()
      (interactive)
      (progn
        (if is-window-maximized
            (balance-windows)
          (maximize-window))
        (setq is-window-maximized
              (not is-window-maximized))))
  (defun hydra-title(title) (propertize title 'face `(:inherit font-lock-warning-face :weight bold)))
  (defun command-name(title) (propertize title 'face `(:foreground "#f8f8f2")))
  (defun spacer() (propertize "." 'face `(:foreground "#282a36")))
  :config
  (with-eval-after-load 'hydra
      (defhydra hydra-frame-window (:color blue :hint nil)
      (format
       (format "%s" (propertize "                                                                       ╔════════╗
  ((%s))^^^^^^^^   ((%s))^^^^  ((%s))^^  ((%s))^^  ((%s))^^^^^^  ((%s))^   ║ Window ║
^^^^^^ ──────────────────────────────────────────────────────────────────────╨────────╜
      ^_k_^        %s_+_         _-_       %s     _,_ ← %s → _._^  %s
      ^^↑^^          ^↑^         ^↑^       %s
  _h_ ←   → _l_   ^^%s%s^^^^^    ^%s    ^^^%s^^^^     %s
      ^^↓^^          ^↓^         ^↓^       %s^^       %s
      ^_j_^        %s_=_         _/_       %s
^^^^^^ ┌──────────────────────────────────────────────────────────────────────────────┘
                         [_q_]: %s, [_<SPC>_]: %s" 'face `(:inherit font-lock-doc-face)))
                         (hydra-title "Size")
                         (hydra-title "Zoom")
                         (hydra-title "Split")
                         (hydra-title "Window")
                         (hydra-title "Buffer")
                         (hydra-title "Misc")
                         (all-the-icons-material "zoom_in" :height .85 :face 'font-lock-doc-face)
                         (command-name "_o_ther")
                         (command-name "page")
                         (command-name "_r_centf")
                         (command-name "_s_wap")
                         (all-the-icons-faicon "slideshare" :height .85 :face 'font-lock-doc-face)
                         (command-name "_p_mode")
                         (command-name "w_i_ndow")
                         (command-name "_m_aximize")
                         (command-name "_s_witch")
                         (command-name "_d_elete")
                         (command-name "_D_elete")
                         (all-the-icons-material "zoom_out" :height .85 :face 'font-lock-doc-face)
                         (command-name "del_O_thers")
                         (command-name "quit")
                         (command-name "rotate")
                         )

        ("K" kill-current-buffer :exit t)
        ("D" kill-buffer-and-window :exit t)
        ("O" delete-other-windows  :exit t)
        ("F" toggle-frame-fullscreen)
        ("i" ace-window)
        ("s" ace-swap-window :exit t)
        ("d" ace-delete-window)
        ("m" tau/toggle-window-maximize :exit t)
        ("=" text-scale-decrease)
        ("+" text-scale-increase)
        ("-" split-window-vertically)
        ("/" split-window-horizontally)
        ("h" shrink-window-horizontally)
        ("k" shrink-window)
        ("j" enlarge-window)
        ("l" enlarge-window-horizontally)
        ("," previous-buffer)
        ("." next-buffer)
        ("o" other-window)
        ("p" presentation-mode)
        ("r" counsel-recentf :exit t)
        ("s" switch-to-buffer :exit t)
        ("D" kill-buffer-and-window)
        ("<SPC>" rotate-layout)
        ("q" nil)))
)

#+END_SRC

** windmove
#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package windmove
  :ensure t
  :config
  ;; use shift + arrow keys to switch between visible buffers
  ;; (windmove-default-keybindings)
  (windmove-default-keybindings 'control)
  (global-set-key (kbd "C-S-H") 'windmove-left)
  (global-set-key (kbd "C-S-L") 'windmove-right)
  (global-set-key (kbd "C-S-K") 'windmove-up)
  (global-set-key (kbd "C-S-J") 'windmove-down)
)
#+END_SRC

** zoom

Zoom in selected window and resize othersAuto balance windows and frames

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package zoom
  :ensure t
  :bind
  ("C-M-z" . zoom)
  :init
  (setq zoom-size '(0.618 . 0.618))
  (setq zoom-ignored-major-modes '(treemacs dired-mode neotree dired-sidebar))
  (setq zoom-ignored-buffer-names '("zoom.el" "init.el"))
  (setq zoom-ignored-buffer-name-regexps '("^*calc"))
  :config
  (zoom-mode t)
)
#+END_SRC


* File navigation
** swiper

Swiper is an alternative to isearch that uses ivy to show an overview of all matches.

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package swiper
  :disabled
  :ensure t
  :bind
  (("C-s" . swiper-isearch)
   :map swiper-map
   ("M-q" . swiper-query-replace)
   ("C-l". swiper-recenter-top-bottom)
   ("C-'" . swiper-avy))
  :custom
  (counsel-grep-swiper-limit 20000)
  (counsel-rg-base-command
   "rg -i -M 120 --no-heading --line-number --color never %s .")
  (counsel-grep-base-command
   "rg -i -M 120 --no-heading --line-number --color never '%s' %s")
)
#+END_SRC

** avy

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package avy
  :ensure t
  :bind
  ("M-g j" . avy-goto-char-2)
  ("C-:" . avy-goto-char)
  ("C-'" . avy-goto-char-2)
  ;; replace native M-g g `goto-line' with `avy-goto-line'
  ("M-g f" .  avy-goto-line)
  ("M-g g" .  avy-goto-line)
  ("M-g w" . avy-goto-word-1)
  ("M-g e" . avy-goto-word-0)
  (:map isearch-mode-map
  ("C-'" . avy-search))
  (:map evil-normal-state-map
  ("SPC" . avy-goto-char))
  (:map evil-visual-state-map
  ("SPC" . avy-goto-char))
  :config
  (setq avy-background t) ;; default nil ;; gray background will be added during the selection.
  (setq avy-highlight-first t) ;; When non-nil highlight the first decision char with avy-lead-face-0. Do this even when the char is terminating.

  ;; nil: use only the selected window
  ;; t: use all windows on the selected frame
  ;; all-frames: use all windows on all frames
  (setq avy-all-windows nil) ;;
)
#+END_SRC

** goto-line-preview

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package goto-line-preview
  :ensure t
  :config
  (global-set-key [remap goto-line] 'goto-line-preview)
)
#+END_SRC


* miniwindow and minibuffer

#+BEGIN_SRC emacs-lisp :tangle init.el
(setq resize-mini-windows t)
(setq max-mini-window-height 0.33)
#+END_SRC

* mode line and headerline

** My personal modeline

#+BEGIN_SRC emacs-lisp :tangle init.el
(setq mode-line-format
      (list
       ;; value of `mode-name'
       "%m: "
       ;; value of current buffer name
       "buffer %b, "
       ;; value of current line number
       "line %l "
       "-- user: "
       ;; value of user
       (getenv "USER"))
)
#+END_SRC

*** Diplay file info (line and column number and size)

#+BEGIN_SRC emacs-lisp :tangle init.el
(line-number-mode t)
(column-number-mode t)
(size-indication-mode t)
#+END_SRC

Display the value of point in the mode line. It is displayed in brackets, adjacent to the line and/or column number if those are being displayed.

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package show-point-mode
  :ensure nil
  :load-path "packages/show-point-mode"
  :config
  (show-point-mode t)
)
#+END_SRC

*** mode line personal customizations

Cool background colors
#fdf6e3
#eee8d5
#007ad3 - vscode statusbar blue
Cool foreground colors
#93a1a1

#+BEGIN_SRC emacs-lisp :tangle init.el
(set-face-attribute 'mode-line nil :height tau/font-size-mode-line)
(set-face-attribute 'mode-line nil
                    :background "#fdf6e3"
                    :foreground "#000000"
                    :box '(:line-width 4 :color "#eee8d5") ;; modeline border
                    :overline t
                    :underline t)

;; for now the inactive modeline looks the same as the active one
(set-face-attribute 'mode-line-inactive nil
                    :background "#007ad3"
                    :foreground "#ffffff"
                    :box '(:line-width 4 :color "#007ad3") ;; modeline border
                    :overline nil
                    :underline nil)
#+END_SRC


** anzu

anzu.el is an Emacs port of anzu.vim. anzu.el provides a minor mode which displays current match and total matches information in the mode-line in various search modes.

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package anzu
  :ensure t
  :bind
  (:map isearch-mode-map
  ([remap isearch-query-replace] . anzu-isearch-query-replace)
  ([remap isearch-query-replace-regexp] . anzu-isearch-query-replace-regexp))
  :config
  (global-anzu-mode +1)

  (setq anzu-mode-lighter "")
  (setq anzu-deactivate-region t)
  (setq anzu-search-threshold 1000)
  (setq anzu-replace-threshold 50)
  (setq anzu-replace-to-string-separator " => ")

  (set-face-attribute 'anzu-mode-line nil
                      :foreground "yellow" :weight 'bold)

;;  (define-key isearch-mode-map [remap isearch-query-replace]  #'anzu-isearch-query-replace)
;;  (define-key isearch-mode-map [remap isearch-query-replace-regexp] #'anzu-isearch-query-replace-regexp)
)
#+END_SRC

** hide mode line mode

 #+BEGIN_SRC emacs-lisp :tangle init.el
(use-package hide-mode-line
  :ensure t
  :hook
  (completion-list-mode . hide-mode-line-mode)
  (neotree-mode . hide-mode-line-mode)
  (treemacs-mode . hide-mode-line-mode)
)
#+END_SRC


#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package saveplace
  :ensure t
  :hook
  (after-init . save-place-mode)
  :init
  (setq-default save-place t)
  (setq save-place-file (expand-file-name ".places" user-emacs-directory))
)
#+END_SRC


** example of modeline custom

Screenshot: [[./img/modeline.png]]
Source: http://emacs-fu.blogspot.com/2011/08/customizing-mode-line.html

;; use setq-default to set it for /all/ modes
(setq mode-line-format
  (list
    ;; the buffer name; the file name as a tool tip
    '(:eval (propertize "%b " 'face 'font-lock-keyword-face
        'help-echo (buffer-file-name)))

    ;; line and column
    "(" ;; '%02' to set to 2 chars at least; prevents flickering
      (propertize "%02l" 'face 'font-lock-type-face) ","
      (propertize "%02c" 'face 'font-lock-type-face)
    ") "

    ;; relative position, size of file
    "["
    (propertize "%p" 'face 'font-lock-constant-face) ;; % above top
    "/"
    (propertize "%I" 'face 'font-lock-constant-face) ;; size
    "] "

    ;; the current major mode for the buffer.
    "["

    '(:eval (propertize "%m" 'face 'font-lock-string-face
              'help-echo buffer-file-coding-system))
    "] "


    "[" ;; insert vs overwrite mode, input-method in a tooltip
    '(:eval (propertize (if overwrite-mode "Ovr" "Ins")
              'face 'font-lock-preprocessor-face
              'help-echo (concat "Buffer is in "
                           (if overwrite-mode "overwrite" "insert") " mode")))

    ;; was this buffer modified since the last save?
    '(:eval (when (buffer-modified-p)
              (concat ","  (propertize "Mod"
                             'face 'font-lock-warning-face
                             'help-echo "Buffer has been modified"))))

    ;; is this buffer read-only?
    '(:eval (when buffer-read-only
              (concat ","  (propertize "RO"
                             'face 'font-lock-type-face
                             'help-echo "Buffer is read-only"))))
    "] "

    ;; add the time, with the date and the emacs uptime in the tooltip
    '(:eval (propertize (format-time-string "%H:%M")
              'help-echo
              (concat (format-time-string "%c; ")
                      (emacs-uptime "Uptime:%hh"))))
    " --"
    ;; i don't want to see minor-modes; but if you want, uncomment this:
    ;; minor-mode-alist  ;; list of minor modes
    "%-" ;; fill with '-'
    ))

** examples of mode-line-format lists
  ;; (setq-default mode-line-format
    ;;               (list
    ;;                evil-mode-line-tag
    ;;                mode-line-front-space
    ;;                mode-line-mule-info
    ;;                mode-line-modified
    ;;                mode-line-frame-identification
    ;;                mode-line-buffer-identification
    ;;                " "
    ;;                mode-line-position
    ;;                mode-line-my-vc
    ;;                mode-line-modes))
    ;; (concat evil-mode-line-tag)

** mini-modeline

Display the modeline in the minibuffer

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package mini-modeline
  :ensure t
  :disabled
  :config
  ;;(setq mini-modeline-l-format) ;; Left part of mini-modeline, same format with mode-line-format.
  ;;(setq mini-modeline-r-format) ;; Right part of mini-modeline, same format with mode-line-format.
  (setq mini-modeline-color "#202020") ;; Background of mini-modeline. Will be set if mini-modeline-enhance-visual is t.
  (setq mini-modeline-enhance-visual t) ;; Enhance minibuffer and window's visibility. This will enable window-divider-mode since without the mode line, two continuous windows are nearly indistinguishable.
  (setq mini-modeline-echo-duration 4) ;; default 2 ; Duration to keep display echo. mini-modeline will display the message which has been echoed to echo area as part of mode line. Those echo will be automatically clear after this interval. Check out the gif to see it in action.
  (setq mini-modeline-update-interval 0.1) ;; default 0.1 ; The minimum interval to update mini-modeline. If you found mini-modeline is being updated to frequently, you can customize this variable.
  (setq mini-modeline-frame nil) ;; default nil ; Frame to display mini-modeline on. nil means current selected frame.
  (setq mini-modeline-truncate-p nil) ;; Truncates the mini-modeline to fit in one line.
  ;;(mini-modeline-mode t)
)
#+END_SRC


** feebleline

Same as mini-modeline, different package
put it here to test it to see what is best

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package feebleline
  :ensure t
  :disabled
  :config
  (setq feebleline-msg-functions
        '((feebleline-line-number         :post "" :fmt "%5s")
          (feebleline-column-number       :pre ":" :fmt "%-2s")
          (feebleline-file-directory      :face feebleline-dir-face :post "")
          (feebleline-file-or-buffer-name :face font-lock-keyword-face :post "")
          (feebleline-file-modified-star  :face font-lock-warning-face :post "")
          (feebleline-git-branch          :face feebleline-git-face :pre " : ")
          (feebleline-project-name        :align right)))
  (feebleline-mode 1)
)
#+END_SRC

** common-header-mode-line

This package is not available on melpa

Source: https://github.com/Bad-ptr/common-header-mode-line.el

: update: this didnt work :(
: try again in the future

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package common-header-mode-line
  :load-path "packages/common-header-mode-line"
  :disabled
  :ensure nil
  ;;:hook
  ;; (after-init . (lambda () (common-header-line-mode 1)))
  ;; (after-init . (lambda () (common-mode-line-mode 1)))
  :config
  ;;(with-eval-after-load "common-header-mode-line-autoloads"
  ;;  (common-mode-line-mode 1)
  ;;  (common-header-line-mode 1))
)
#+END_SRC

** minions

group all minor modes in a single menu in the modeline
#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package minions
  :ensure t
  :config
  (minions-mode 1)
)
#+END_SRC

** doom-modeline

Require and enable the doom-modeline
#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package doom-modeline
  :ensure t
  :disabled
  :init
  :config
  (doom-modeline-mode 1)
  (setq doom-modeline-height 20)                  ;; modeline height. only respected in GUI
  (setq doom-modeline-bar-width 3)                ;; How wide the mode-line bar should be. It's only respected in GUI.
  (setq doom-modeline-icon t)                     ;; display icons in the modeline
  (setq doom-modeline-major-mode-icon t)          ;; display the icon for the major mode. it respects `doom-modeline-icon'
  (setq doom-modeline-major-mode-color-icon t)    ;; display color icons for `major-mode'. It respects `doom-modeline-icon' and `all-the-icons-color-icons'.
  (setq doom-modeline-buffer-state-icon t)        ;; Whether display icons for buffer states. It respects `doom-modeline-icon'.
  (setq doom-modeline-buffer-modification-icon t) ;; Whether display buffer modification icon. It respects `doom-modeline-icon' and `doom-modeline-buffer-state-icon'.
  (setq doom-modeline-minor-modes nil)            ;; Whether display minor modes in mode-line or not.
  (setq doom-modeline-enable-word-count nil)      ;; If non-nil, a word count will be added to the selection-info modeline segment.
  (setq doom-modeline-buffer-encoding t)          ;; Whether display buffer encoding.
  (setq doom-modeline-indent-info nil)            ;; Whether display indentation information.
  (setq doom-modeline-checker-simple-format t)    ;; If non-nil, only display one number for checker information if applicable.
  (setq doom-modeline-vcs-max-length 12)          ;; The maximum displayed length of the branch name of version control.
  (setq doom-modeline-persp-name t)               ;; Whether display perspective name or not. Non-nil to display in mode-line.
  (setq doom-modeline-persp-name-icon nil)        ;; Whether display icon for persp name. Nil to display a # sign. It respects `doom-modeline-icon'
  (setq doom-modeline-lsp t)                      ;; Whether display `lsp' state or not. Non-nil to display in mode-line.
  (setq doom-modeline-github nil)                 ;; Whether display github notifications or not. Requires `ghub` package.
  (setq doom-modeline-github-interval (* 30 60))  ;; The interval of checking github.
  (setq doom-modeline-mu4e t)                     ;; Whether display mu4e notifications or not. Requires `mu4e-alert' package.
  (setq doom-modeline-irc t)                      ;; Whether display irc notifications or not. Requires `circe' package.
  (setq doom-modeline-irc-stylize 'identity)      ;; Function to stylize the irc buffer names.

  ;; Determines the style used by `doom-modeline-buffer-file-name'.
  ;;
  ;; Given ~/Projects/FOSS/emacs/lisp/comint.el
  ;;   truncate-upto-project = ~/P/F/emacs/lisp/comint.el
  ;;   truncate-from-project = ~/Projects/FOSS/emacs/l/comint.el
  ;;   truncate-with-project = emacs/l/comint.el
  ;;   truncate-except-project = ~/P/F/emacs/l/comint.el
  ;;   truncate-upto-root = ~/P/F/e/lisp/comint.el
  ;;   truncate-all = ~/P/F/e/l/comint.el
  ;;   relative-from-project = emacs/lisp/comint.el
  ;;   relative-to-project = lisp/comint.el
  ;;   file-name = comint.el
  ;;   buffer-name = comint.el<2> (uniquify buffer name)
  ;;
  ;; If you are expereicing the laggy issue, especially while editing remote files
  ;; with tramp, please try `file-name' style.
  ;; Please refer to https://github.com/bbatsov/projectile/issues/657.
  (setq doom-modeline-buffer-file-name-style 'truncate-upto-project)

  ;; Whether display environment version or not
  (setq doom-modeline-env-version t)
  ;; Or for individual languages
  ;; (setq doom-modeline-env-enable-python t)
  ;; (setq doom-modeline-env-enable-ruby t)
  ;; (setq doom-modeline-env-enable-perl t)
  ;; (setq doom-modeline-env-enable-go t)
  ;; (setq doom-modeline-env-enable-elixir t)
  ;; (setq doom-modeline-env-enable-rust t)

  ;; Change the executables to use for the language version string
  (setq doom-modeline-env-python-executable "python")
  (setq doom-modeline-env-ruby-executable "ruby")
  (setq doom-modeline-env-perl-executable "perl")
  (setq doom-modeline-env-go-executable "go")
  (setq doom-modeline-env-elixir-executable "iex")
  (setq doom-modeline-env-rust-executable "rustc")
)


#+END_SRC

** parrot-mode

Type of parrots available:

- default
- confused
- emacs
- nyan
- rotating
- science
- thumbsup

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package parrot
  :ensure t
  :config
  ;; To see the party parrot in the modeline, turn on parrot mode:
  (parrot-mode)
  (parrot-set-parrot-type 'default)
  ;; Rotate the parrot when clicking on it (this can also be used to execute any function when clicking the parrot, like 'flyspell-buffer)
  (add-hook 'parrot-click-hook #'parrot-start-animation)
  ;; Rotate parrot when buffer is saved
  (add-hook 'after-save-hook #'parrot-start-animation)
  ;;/Rotation function keybindings for evil users
  (define-key evil-normal-state-map (kbd "[r") 'parrot-rotate-prev-word-at-point)
  (define-key evil-normal-state-map (kbd "]r") 'parrot-rotate-next-word-at-point)
  (add-hook 'mu4e-index-updated-hook #'parrot-start-animation)
)
#+END_SRC

** nyan-mode

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package nyan-mode
   :if window-system
   :hook
   (after-init . nyan-mode)
   :config
   (setq nyan-cat-face-number 4)
   (setq nyan-animate-nyancat t)
   (setq nyan-wavy-trail t)
   (nyan-start-animation))
#+END_SRC


* Session

** use personal folder for storing stuff

#+BEGIN_SRC emacs-lisp :tangle init.el
(defconst tau-savefile-dir (expand-file-name "savefile" user-emacs-directory))

;; create the savefile dir if it doesn't exist
(unless (file-exists-p tau-savefile-dir)
  (make-directory tau-savefile-dir))
#+END_SRC

** desktop-mode

Save emacs sessions

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package desktop
:ensure nil
:bind
("C-c s" . desktop-save-in-desktop-dir)
:init
;; use only one desktop
(setq desktop-path '("~/.emacs.d/"))
(setq desktop-dirname "~/.emacs.d/")
(setq desktop-base-file-name "emacs-desktop")

(setq desktop-restore-eager 5) ;; restore 5 buffers immediately. the others restore lazily
(setq desktop-load-locked-desktop t)
(setq desktop-files-not-to-save "^$")
(setq desktop-save t)
(setq desktop-buffers-not-to-save
     (concat "\\("
             "^nn\\.a[0-9]+\\|\\.log\\|(ftp)\\|^tags\\|^TAGS"
             "\\|\\.emacs.*\\|\\.diary\\|\\.newsrc-dribble\\|\\.bbdb"
       "\\)$"))
:config
(desktop-save-mode t)
(add-to-list 'desktop-modes-not-to-save 'dired-mode)
(add-to-list 'desktop-modes-not-to-save 'Info-mode)
(add-to-list 'desktop-modes-not-to-save 'info-lookup-mode)
(add-to-list 'desktop-modes-not-to-save 'fundamental-mode)
(add-to-list 'desktop-modes-not-to-save 'completion-list-mode)

;; remove desktop after it's been read
(add-hook 'desktop-after-read-hook
    '(lambda ()
       ;; desktop-remove clears desktop-dirname
       (setq desktop-dirname-tmp desktop-dirname)
       (desktop-remove)
       (setq desktop-dirname desktop-dirname-tmp)))

(defun saved-session ()
  (file-exists-p (concat desktop-dirname "/" desktop-base-file-name)))

;; use session-restore to restore the desktop manually
(defun session-restore ()
  "Restore a saved emacs session."
  (interactive)
  (if (saved-session)
      (desktop-read)
    (message "No desktop found.")))

;; use session-save to save the desktop manually
(defun session-save ()
  "Save an emacs session."
  (interactive)
  (if (saved-session)
      (if (y-or-n-p "Overwrite existing desktop? ")
    (desktop-save-in-desktop-dir)
  (message "Session not saved."))
  (desktop-save-in-desktop-dir)))

;; ask user whether to restore desktop at start-up
(add-hook 'after-init-hook
    '(lambda ()
       (if (saved-session)
     (if (y-or-n-p "Restore desktop? ")
         (session-restore)))))
)
#+END_SRC

** auto-save files

From ErgoEmacs:

/"emacs has auto-save-mode, however, it's not what you think./
/Emacs's auto-save-mode periodically saves a copy of your file with the name #filename#./

/When you save the file, those #files# are deleted automatically. In case of crash or electricity outage, when you open a file afterward, emacs will detect those #files# and ask if you want to recover."/
#+BEGIN_SRC emacs-lisp :tangle init.el
  ;; (use-package auto-save
  ;;   :ensure nil
  ;;   :config
(setq auto-save-default nil)  ;; stop creating those #auto-save# files
  ;;  )
#+END_SRC

** saveplace

Save the place you were in file when you last edited it

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package saveplace
  :ensure nil
  :config
  (defconst savefile-dir (expand-file-name "savefile" user-emacs-directory))

  ;; create the savefile dir if it doesn't exist
  (unless (file-exists-p savefile-dir)
    (make-directory savefile-dir))

  (setq save-place-file (expand-file-name "saveplace" savefile-dir))
  ;; activate it for all buffers
  (setq-default save-place t)
  (save-place-mode t)
)
#+END_SRC

** savehist

Save minibuffer stories and others (by setting savehist-additional-variables)

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package savehist
  :ensure nil
  :config
  (setq savehist-save-minibuffer-history t)
  (setq savehist-additional-variables
        '(kill-ring
          search-ring
          regexp-search-ring
          last-kbd-macro
          kmacro-ring
          shell-command-history))
  (savehist-mode)
)
#+END_SRC

** recentf

Save list of recently opened files across emacs sessions

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package recentf
  :ensure t
  :config
  (setq recentf-save-file (expand-file-name "recentf" user-emacs-directory)
        recentf-max-saved-items 500
        recentf-max-menu-items 15
        ;; disable recentf-cleanup on Emacs start, because it can cause
        ;; problems with remote files
        recentf-auto-cleanup 'never)
  (recentf-mode +1)
)
#+END_SRC

** auto-save-visited

auto-save file-visiting buffers after five seconds of idle time

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package auto-save-visited-mode
  :ensure nil
  :config
  (auto-save-visited-mode)
)
#+END_SRC

* Interface Enhancement

** sublimity

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package sublimity
  :ensure t
  :disabled
  :config
  (sublimity-mode 1)
)
 #+END_SRC



*** sublimity-map (experimental)

This package ruins the scrolling from either sublimity-scroll or the smooth-scrolling package

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package sublimity-map
  :disabled
  :ensure nil
  :config
  (setq sublimity-map-size 14)  ;; minimap width
  (setq sublimity-map-fraction 0.3)
  (setq sublimity-map-text-scale -5)
  (sublimity-map-set-delay nil) ;; minimap is displayed after 5 seconds of idle time

  ;; document this snippet better, not sure what it does, but it defines the font-family
;;  (add-hook 'sublimity-map-setup-hook
;;          (lambda ()
;;            (setq buffer-face-mode-face '(:family "Monospace"))
;;            (buffer-face-mode)))

)
#+END_SRC

*** sublimity-attractive
#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package sublimity-attractive
  :disabled
  :ensure nil
  :config
  (setq sublimity-attractive-centering-width 110)

  ;; these are functions (NOT variables) to configure some UI parts
  ;; (sublimity-attractive-hide-bars)
  ;; (sublimity-attractive-hide-vertical-border)
  ;; (sublimity-attractive-hide-fringes)
  ;; (sublimity-attractive-hide-modelines)
)

#+END_SRC

** dashboard

#+BEGIN_SRC emacs-lisp :tangle init.el
;; DashboardPac
(use-package dashboard
  :demand
  :diminish (dashboard-mode page-break-lines-mode)
  :bind ("C-z d" . open-dashboard)
  :custom
  (dashboard-banner-logo-title "Close the world. Open the nExt.")
  (dashboard-startup-banner (expand-file-name "images/KEC_Dark_BK_Small.png" user-emacs-directory))
  (dashboard-items '((recents  . 7)
                     (bookmarks . 7)
                     (agenda . 5)))
  (initial-buffer-choice (lambda () (get-buffer dashboard-buffer-name)))
  (dashboard-set-heading-icons t)
  (dashboard-set-navigator t)
  (dashboard-navigator-buttons
   (if (featurep 'all-the-icons)
       `(((,(all-the-icons-octicon "mark-github" :height 1.1 :v-adjust -0.05)
           "M-EMACS" "Browse M-EMACS Homepage"
           (lambda (&rest _) (browse-url "https://github.com/MatthewZMD/.emacs.d")))
          (,(all-the-icons-fileicon "elisp" :height 1.0 :v-adjust -0.1)
           "Configuration" "" (lambda (&rest _) (edit-configs)))
          (,(all-the-icons-faicon "cogs" :height 1.0 :v-adjust -0.1)
           "Update" "" (lambda (&rest _) (auto-package-update-now)))))
     `((("" "M-EMACS" "Browse M-EMACS Homepage"
         (lambda (&rest _) (browse-url "https://github.com/MatthewZMD/.emacs.d")))
        ("" "Configuration" "" (lambda (&rest _) (edit-configs)))
        ("" "Update" "" (lambda (&rest _) (auto-package-update-now)))))))
  :custom-face
  (dashboard-banner-logo-title ((t (:family "Love LetterTW" :height 123))))
  :config
  (dashboard-modify-heading-icons '((recents . "file-text")
                                    (bookmarks . "book")))
  (dashboard-setup-startup-hook)
  ;; Open Dashboard function
  (defun open-dashboard ()
    "Open the *dashboard* buffer and jump to the first widget."
    (interactive)
    (if (get-buffer dashboard-buffer-name)
        (kill-buffer dashboard-buffer-name))
    (dashboard-insert-startupify-lists)
    (switch-to-buffer dashboard-buffer-name)
    (goto-char (point-min))
    (delete-other-windows)))
;; -DashboardPac

;; PBLPac
(use-package page-break-lines
  :diminish
  :init (global-page-break-lines-mode))
;; -PBLPac
#+END_SRC


*** add fireplace as a widged in the dashboard

#+BEGIN_SRC emacs-lisp :tangle init.el
#+END_SRC
** toggle window transparency

#+BEGIN_SRC emacs-lisp :tangle init.el
(defun tau/toggle-window-transparency ()
  "Cycle the frame transparency from default to transparent."
  (interactive)
  (let ((transparency 85)
        (opacity 100))
    (if (and (not (eq (frame-parameter nil 'alpha) nil))
             (< (frame-parameter nil 'alpha) opacity))
        (set-frame-parameter nil 'alpha opacity)
      (set-frame-parameter nil 'alpha transparency))))

(global-set-key (kbd "M-<f12> t") 'tau/toggle-window-transparency)
#+END_SRC

** minimap

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package minimap
  :ensure t
  :disabled t
  :commands
  (minimap-bufname minimap-create minimap-kill)
  :custom
  (minimap-major-modes '(prog-mode))
  (minimap-window-location 'right)
  (minimap-update-delay 0.2)
  (minimap-minimum-width 20)
  :bind
  ("M-<f12> m" . tau/toggle-minimap)
  :preface
  (defun tau/toggle-minimap ()
    "Toggle minimap for current buffer."
    (interactive)
    (if (null minimap-bufname)
        (minimap-create)
      (minimap-kill)))
  :config
  (custom-set-faces
   '(minimap-active-region-background
    ((((background dark)) (:background "#555555555555"))
      (t (:background "#C847D8FEFFFF"))) :group 'minimap))
)
#+END_SRC

** pulse

#+BEGIN_SRC emacs-lisp :tangle init.el
;; Visualize TAB, (HARD) SPACE, NEWLINE
;; Pulse current line
(use-package pulse
  :ensure nil
  :defer t
  :preface
  (defun my-pulse-momentary-line (&rest _)
    "Pulse the current line."
    (pulse-momentary-highlight-one-line (point) 'next-error))

  (defun my-pulse-momentary (&rest _)
    "Pulse the current line."
    (if (fboundp 'xref-pulse-momentarily)
        (xref-pulse-momentarily)
      (my-pulse-momentary-line)))

  (defun my-recenter-and-pulse(&rest _)
    "Recenter and pulse the current line."
    (recenter)
    (my-pulse-momentary))

  (defun my-recenter-and-pulse-line (&rest _)
    "Recenter and pulse the current line."
    (recenter)
    (my-pulse-momentary-line))
  :hook (((dumb-jump-after-jump
           imenu-after-jump) . my-recenter-and-pulse)
         ((bookmark-after-jump
           magit-diff-visit-file
           next-error) . my-recenter-and-pulse-line))
  :init
  (dolist (cmd '(recenter-top-bottom
                 other-window ace-window windmove-do-window-select
                 pager-page-down pager-page-up
                 symbol-overlay-basic-jump))
    (advice-add cmd :after #'my-pulse-momentary-line))
  (dolist (cmd '(pop-to-mark-command
                 pop-global-mark
                 goto-last-change))
    (advice-add cmd :after #'my-recenter-and-pulse))
)
#+END_SRC

** prettify symbols

: this is built-in with emacs >= v24
#+BEGIN_SRC emacs-lisp :tangle init.el
(defun add-pretty-lambda ()
  "Make some word or string show as pretty Unicode symbols. See https://unicodelookup.com for more."
  (setq prettify-symbols-alist
        '(
          ("lambda" . 955)
          ("delta" . 120517)
          ("epsilon" . 120518)
          ("->" . 8594)
          ("<=" . 8804)
          (">=" . 8805)
          )))
;;(global-prettify-symbols-mode 1)
(add-hook 'prog-mode-hook 'add-pretty-lambda)
(add-hook 'org-mode-hook 'add-pretty-lambda)
#+END_SRC

** centaur-tabs

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package centaur-tabs
  :ensure t
  :hook
  (after-init . centaur-tabs-mode)
  (dashboard-mode . centaur-tabs-local-mode)
  (term-mode . centaur-tabs-local-mode)
  (calendar-mode . centaur-tabs-local-mode)
  (org-agenda-mode . centaur-tabs-local-mode)
  (helpful-mode . centaur-tabs-local-mode)
  :custom
  ;; appearantly these dont work if put in :init
  (centaur-tabs-style "bar")           ; types available: (alternative, bar, box, chamfer, rounded, slang, wave, zigzag)
  (centaur-tabs-height 28)
  (centaur-tabs-set-icons t)           ;; display themed icons from all the icons
  (centaur-tabs-set-modified-marker t) ;; display a marker indicating that a buffer has been modified (atom-style)
  (centaur-tabs-modified-marker "*")
  (centaur-tabs-set-close-button t)
  (centaur-tabs-close-button "X")
  (centaur-tabs-set-bar 'over)         ;; in previous config value was 'over
  (centaur-tabs-gray-out-icons 'buffer)
  (centaur-tabs-adjust-buffer-order t)
  (uniquify-separator "/")
  (uniquify-buffer-name-style 'forward)
  :custom-face
  (centaur-tabs-active-bar-face ((t (:background "cyan"))))
  (centaur-tabs-default ((t (:background "black" :foreground "black"))))
  (centaur-tabs-unselected ((t (:background "#292929" :foreground "grey50"))))
  (centaur-tabs-selected ((t (:background "#181818" :foreground "white"))))
  (centaur-tabs-unselected-modified ((t (:background "#3D3C3D" :foreground "grey50"))))
  (centaur-tabs-selected-modified ((t (:background "#181818" :foreground "white"))))
  (centaur-tabs-close-unselected ((t (:inherit centaur-tabs-unselected))))
  (centaur-tabs-close-selected ((t (:inherit centaur-tabs-selected))))
  (centaur-tabs-close-mouse-face ((t (:inherit underline))))
  (centaur-tabs-modified-marker-selected ((t (:inherit centaur-tabs-selected))))
  (centaur-tabs-modified-marker-unselected ((t (:inherit centaur-tabs-unselected))))
  :bind
  ("C-<prior>" . centaur-tabs-backward)
  ("C-<next>" . centaur-tabs-forward)
  ("C-c t s" . centaur-tabs-counsel-switch-group)
  ("C-c t p" . centaur-tabs-group-by-projectile-project)
  ("C-c t g" . centaur-tabs-group-buffer-groups)
  (:map evil-normal-state-map
  ("g t" . centaur-tabs-forward)
  ("g T" . centaur-tabs-backward))
;;  :init
  :config
  ;; functions
  ;; (centaur-tabs-change-fonts "arial" 160)
  (centaur-tabs-headline-match)
  (centaur-tabs-enable-buffer-reordering)
  (centaur-tabs-mode t)
)
#+END_SRC

** hideshowvis

Add clicable markers for foldable regions in the fringe
This package is not on elpa, it has to be downloaded and installed locally

Source:           https://emacs.stackexchange.com/questions/112/actionable-code-folding-in-emacs-fringe
Package Download: https://github.com/emacsmirror/hideshowvis/blob/master/hideshowvis.el

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package hideshowvis
  :ensure nil
  :defer t
  :load-path "packages/hideshowvis"
  :hook
  (display-line-numbers-mode . hideshowvis-enable)
  :config
  (hideshowvis-symbols) ; displaying a + symbol in the fringe for folded regions
)
#+END_SRC

* Highlights

** show paren mode

Highlight (by bolding) the matching parenthesis

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package paren
  :ensure nil
  :defer t
  :hook
  (prog-mode . show-paren-mode)
  :custom-face
  (show-paren-match ((nil (:background "#44475a" :foreground "#f1fa8c")))) ;; :box t
  :config
  (set-face-background 'show-paren-mismatch "red")
  (set-face-background 'show-paren-match "#4445e0")
  (setq show-paren-delay 0)
  (setq show-paren-style 'mixed)
  (setq show-paren-when-point-inside-paren t)
  (setq show-paren-when-point-in-periphery t)
  (show-paren-mode +1)
)
#+END_SRC

** color identifiers mode

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package color-identifiers-mode
  :ensure t
  :defer t
;;:config
;;(add-hook 'after-init-hook 'global-color-identifiers-mode)
;; the following code disabled highlighting for all other keywords and only highlights and color variables
;;   (defun myfunc-color-identifiers-mode-hook ()
;;     (let ((faces '(font-lock-comment-face font-lock-comment-delimiter-face font-lock-constant-face font-lock-type-face font-lock-function-name-face font-lock-variable-name-face font-lock-keyword-face font-lock-string-face font-lock-builtin-face font-lock-preprocessor-face font-lock-warning-face font-lock-doc-face font-lock-negation-char-face font-lock-regexp-grouping-construct font-lock-regexp-grouping-backslash)))
;;       (dolist (face faces)
;;         (face-remap-add-relative face '((:foreground "" :weight normal :slant normal)))))
;;     (face-remap-add-relative 'font-lock-keyword-face '((:weight bold)))
;;     (face-remap-add-relative 'font-lock-comment-face '((:slant italic)))
;;     (face-remap-add-relative 'font-lock-builtin-face '((:weight bold)))
;;     (face-remap-add-relative 'font-lock-preprocessor-face '((:weight bold)))
;;     (face-remap-add-relative 'font-lock-function-name-face '((:slant italic)))
;;     (face-remap-add-relative 'font-lock-string-face '((:slant italic)))
;;     (face-remap-add-relative 'font-lock-constant-face '((:weight bold))))
;;   (add-hook 'color-identifiers-mode-hook 'myfunc-color-identifiers-mode-hook)
)
#+END_SRC

** Highlighting numbers

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package highlight-numbers
  :ensure t
  :defer t
)
#+END_SRC

** Highlighting operators

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package highlight-operators
  :ensure t
  :defer t
  ;;:hook
  ;;(prog-mode . highlight-operators-mode)
)
 #+END_SRC

** Highlighting escape sequences

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package highlight-escape-sequences
  :ensure t
  :defer t
  ;;:hook
  ;;(prog-mode . hes-mode)
)
#+END_SRC

** Highlighting parentheses

This mode highlights (bolds) the current pair in which the point (cursor) is

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package highlight-parentheses
  :ensure t
  :defer t
  :hook
  (prog-mode . highlight-parentheses-mode)
)
#+END_SRC

** diff-hl (highlights uncommited diffs in bar aside from the line numbers)

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package diff-hl
  :ensure t
  :defer t
  :custom-face (diff-hl-change ((t (:foreground ,(face-background 'highlight)))))
  :hook
  (prog-mode . diff-hl-mode)
  (dired-mode . diff-hl-mode)
  (magit-post-refresh . diff-hl-mode)
  :init
  ;; (add-hook 'prog-mode-hook #'diff-hl-mode)
  ;; (add-hook 'org-mode-hook #'diff-hl-mode)
  ;; (add-hook 'dired-mode-hook 'diff-hl-dired-mode)
  ;; (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)

  ;; Better looking colours for diff indicators
  (custom-set-faces
    '(diff-hl-change ((t (:background "#3a81c3"))))
    '(diff-hl-insert ((t (:background "#7ccd7c"))))
    '(diff-hl-delete ((t (:background "#ee6363"))))
  )

  :config

  (setq diff-hl-fringe-bmp-function 'diff-hl-fringe-bmp-from-type)
  (setq diff-hl-side 'left)
  (setq diff-hl-margin-side 'left)
  ;; Set fringe style
  (setq-default fringes-outside-margins t)


  (diff-hl-margin-mode 1) ;; show the indicators in the margin
  (diff-hl-flydiff-mode 1) ;;  ;; On-the-fly diff updates


  (unless (display-graphic-p)
  (setq diff-hl-margin-symbols-alist
        '((insert . " ") (delete . " ") (change . " ")
          (unknown . " ") (ignored . " ")))
  ;; Fall back to the display margin since the fringe is unavailable in tty
  (diff-hl-margin-mode 1)
  ;; Avoid restoring `diff-hl-margin-mode'
  (with-eval-after-load 'desktop
    (add-to-list 'desktop-minor-mode-table
                 '(diff-hl-margin-mode nil))))

    ;; Integration with magit
  (with-eval-after-load 'magit
    (add-hook 'magit-post-refresh-hook #'diff-hl-magit-post-refresh))

  (global-diff-hl-mode 1) ;; Enable diff-hl globally
)
#+END_SRC

** Highlight TODO

Basic support todos.
By default these include:
TODO NEXT THEM PROG OKAY DONT FAIL DONE NOTE KLUDGE HACK TEMP FIXME
and any sequence of X's or ?'s of length at least 3: XXX, XXXX, XXXXX, …, ???, ????, ????, ….

#+BEGIN_SRC emacs-lisp :tangle init.el
;; NOTE that the highlighting works even in comments.
(use-package hl-todo
  :ensure t
  :init
  ;; (add-hook 'text-mode-hook (lambda () (hl-todo-mode t)))
  :config
  ;; Adding a new keyword: TEST.
  (add-to-list 'hl-todo-keyword-faces '("TODO" . "#ff3300"))
  (add-to-list 'hl-todo-keyword-faces '("TEST" . "#dc8cc3"))
  (add-to-list 'hl-todo-keyword-faces '("NOTE" . "#ffff00"))
  (add-to-list 'hl-todo-keyword-faces '("DONE" . "#00ff00"))
)
#+END_SRC

** hi-lock mode

Highlight regexp

From Mastering Emacs:
There is a mechanism for storing and restoring the Hi-Locks you’ve created. If you create highlights interactively you can tell Emacs to insert those patterns into the active buffer by running M-s h w. Emacs will wrap the elisp patterns in the comment format used by the buffer (if one is defined) or ask if you no comment format is defined.

The patterns should be added to the top of the file, as Emacs will only search the first 10,000 characters (customize hi-lock-file-patterns-range to change that amount) for the patterns before giving up.

Emacs will not highlight patterns found in a file automatically. You must explicitly tell it to do so by manually invoking M-x hi-lock-mode or globally with global-hi-lock-mode.

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package hi-lock
  :init
  (global-hi-lock-mode 1)
  :defer t
  :config
  (add-hook 'hi-lock-mode-hook
          (lambda nil
            (highlight-regexp "FIXME" 'hi-red-b)
            (highlight-regexp "NOTE" 'hi-red-b)
            (highlight-regexp "TODO" 'hi-red-b))
  )
  ;; always highlight patterns found in files without confirmation
  (setq hi-lock-file-patterns-policy #'(lambda (dummy) t))
)
#+END_SRC

** hl-anything

Highlight portions of text

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package hl-anything
  :ensure t
  :defer t
  :after evil
;;  :hook
;;  (kill-emacs . hl-save-highlights)
  :bind
  ("C-<f8> h" . hl-highlight-thingatpt-local)
  ("C-<f8> S-h" . hl-highlight-thingatpt-global)
  ("C-<f8> u l" . hl-unhighlight-all-local)
  ("C-<f8> u g" . hl-unhighlight-all-global)
  ("C-<f8> n" . hl-find-next-thing)
  ("C-<f8> p" . hl-find-prev-thing)
  ("C-<f8> s" . hl-save-highlights)
  ("C-<f8> r" . hl-restore-highlights)
  :config
  (hl-highlight-mode 1)

  ;; evil leader key bindings for hl-anything
  (evil-leader/set-key
    "hul"  'hl-unhighlight-all-local
    "hug" 'hl-unhighlight-all-global
    "htg" 'hl-highlight-thingatpt-global
    "htl"  'hl-highlight-thingatpt-local
    "hn"  'hl-find-next-thing
    "hp"  'hl-find-prev-thing
    "hr"  'hl-restore-highlights
    "hs"  'hl-save-highlights)
)
#+END_SRC

** highlight-tail

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package highlight-tail
  :load-path "packages/highlight-tail"
  :ensure nil
  :config
  (setq highlight-tail-colors '(("#9310FF" . 0) ;; closest to cursor
                                 ("#9370DB" . 35)  ;; midle of tail
                                 ("#DDA0DD" . 76)))  ;; end of the tail
  (setq highlight-tail-steps 17)
  (setq highlight-tail-timer 0.05)
  (setq highlight-tail-posterior-type 'const)
  (highlight-tail-mode)
)
#+END_SRC

** beacon - flash light where cursor is
#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package beacon
  :ensure t
  :hook
  (post-self-insert . beacon-blink)
  (blink-cursor-mode. beacon-blink)
  (after-change-functions . beacon-blink)
  (delete-selection-mode . beacon-blink)
  (normal-erase-is-backspace . beacon-blink)
  :init
  (setq inhibit-modification-hooks nil)
  (setq beacon-blink-when-point-moves-vertically 1) ; default nil
  (setq beacon-blink-when-point-moves-horizontally 1) ; default nil
  (setq beacon-blink-when-buffer-changes t) ; default t
  (setq beacon-blink-when-window-scrolls t) ; default t
  (setq beacon-blink-when-window-changes t) ; default t
  (setq beacon-blink-when-focused nil) ; default nil
  (setq beacon-blink-duration 0.2) ; default 0.3
  (setq beacon-blink-delay 0.3) ; default 0.3
  (setq beacon-size 23) ; default 40
  (setq beacon-color "#9310FF") ; default 0.5
  :config
  (setq inhibit-modification-hooks nil)
  (add-hook 'after-change-functions #'beacon-blink)
  (beacon-mode 1)
)
#+END_SRC

** Rainbow Delimiters

This highlights matching parentheses by coloring them acording to their depth
Specially helpful for editing lisp code

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package rainbow-delimiters
  :ensure t
  :defer t
  :hook
  (prog-mode . rainbow-delimiters-mode)
)
#+END_SRC

** rainbow mode

: Colorize hex, rgb and named color codes

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package rainbow-mode
  :ensure t
  :defer t
)
#+END_SRC

** Highlight lines

: built-in package

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package hl-line
  :ensure nil
  :defer t
  :config
  (global-hl-line-mode)
)
#+END_SRC

** Highlight columns

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package col-highlight
  :load-path "packages/col-highlight"
  :ensure nil
  :defer t
  :config
  (col-highlight-toggle-when-idle)
  (col-highlight-set-interval 2)
)
#+END_SRC

** Highlight crosshair

Highlight crosshair (combination of hl-lines and hl-columns

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package crosshairs
  :load-path "packages/crosshairs"
  :ensure nil
  :defer t
  :config
  (crosshairs-mode)
)
#+END_SRC

** volatile highlights

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package volatile-highlights
  :ensure t
  :defer t
  ;;:hook
  ;;(after-init . volatile-highlights-mode)
  :custom-face
  (vhl/default-face ((nil (:foreground "#FF3333" :background "#FFCDCD"))))
  :config
  ;;-----------------------------------------------------------------------------
  ;; Supporting evil-mode.
  ;;-----------------------------------------------------------------------------
  (vhl/define-extension 'evil 'evil-paste-after 'evil-paste-before
                        'evil-paste-pop 'evil-move)
  (vhl/install-extension 'evil)
  ;;-----------------------------------------------------------------------------
  ;; Supporting undo-tree.
  ;;-----------------------------------------------------------------------------
  (vhl/define-extension 'undo-tree 'undo-tree-yank 'undo-tree-move)
  (vhl/install-extension 'undo-tree)
)
#+END_SRC

** highlight indent guides
#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package highlight-indent-guides
  :ensure t
  :defer t
  ;;:hook
  ;;((prog-mode yaml-mode) . highlight-indent-guides-mode)
  :custom
  (highlight-indent-guides-auto-enabled t)
  (highlight-indent-guides-responsive t)
  (highlight-indent-guides-method 'character) ; column
)
#+END_SRC

** highlight-context-line

The line of your Emacs buffer that is at the top of the window before you start to scroll, is considered the context line. It is the last line in the view after scrolling that was visible before scrolling. Similarly the line at the bottom of the window is the context line for scrolling down.
 Whenever you scrolled it painted a line across the document that reflected where the previous view ended.

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package highlight-context-line
  :ensure t
  :defer t
  :config
  (highlight-context-line-mode 1)
)
#+END_SRC

* crux

#+BEGIN_SRC emacs-lisp :tangle init.el
;; CruxPac
(use-package crux
  :bind
  ("C-a" . crux-move-beginning-of-line)
  ("C-x 4 t" . crux-transpose-windows)
  ("C-x K" . crux-kill-other-buffers)
  ("C-k" . crux-smart-kill-line)
  :config
  (crux-with-region-or-buffer indent-region)
  (crux-with-region-or-buffer untabify)
  (crux-with-region-or-point-to-eol kill-ring-save)
  (defalias 'rename-file-and-buffer #'crux-rename-file-and-buffer))
  (global-set-key [remap move-beginning-of-line] #'crux-move-beginning-of-line)
  (global-set-key (kbd "C-c o") #'crux-open-with)
  (global-set-key [(shift return)] #'crux-smart-open-line)
  (global-set-key (kbd "s-r") #'crux-recentf-find-file)
  (global-set-key (kbd "C-<backspace>") #'crux-kill-line-backwards)
  (global-set-key [remap kill-whole-line] #'crux-kill-whole-line)
;; -CruxPac
#+END_SRC
* Scrolling settings
** memacs scrolling (trying it out)

#+BEGIN_SRC emacs-lisp :tangle init.el
;; SmoothScroll
;; Vertical Scroll
(setq scroll-step 1)
(setq scroll-margin 1)
(setq scroll-conservatively 101)
(setq scroll-up-aggressively 0.01)
(setq scroll-down-aggressively 0.01)
(setq auto-window-vscroll nil)
(setq fast-but-imprecise-scrolling nil)
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))
(setq mouse-wheel-progressive-speed nil)
;; Horizontal Scroll
(setq hscroll-step 1)
(setq hscroll-margin 1)
;; -SmoothScroll
#+END_SRC

** native mouse scrolling
#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package mwheel
  :ensure nil
  :config
  (setq mouse-wheel-progressive-speed nil)            ;; don't accelerate scrolling
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
  (setq mouse-wheel-scroll-amount '(1 ((control) . 5)))
  (setq mouse-wheel-follow-mouse 't)                  ;; scroll window under mouse
)
#+END_SRC

*** Use Shift + MouseWheels for smooth scrolling

#+BEGIN_SRC emacs-lisp :tangle init.el
(global-set-key (kbd "<S-mouse-4>") 'scroll-down-line)
(global-set-key (kbd "<S-mouse-5>") 'scroll-up-line)
#+END_SRC


* Global minor modes

** which-key

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package which-key
  :ensure t
  :defer t
  :hook (after-init . which-key-mode)
  :config
  (setq which-key-idle-delay 0.2)
  (setq which-key-min-display-lines 3)
  (setq which-key-max-description-length 20)
  (setq which-key-max-display-columns 6)
)
#+END_SRC

** key-frequency

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package keyfreq
  :ensure t
  :defer t
  :hook (after-init . keyfreq-mode)
  :init
  (keyfreq-mode 1)
  (keyfreq-autosave-mode 1)
)
#+END_SRC


* Local minor modes
** smartparens
 #+BEGIN_SRC emacs-lisp :tangle init.el
(use-package smartparens
  :ensure t
  :defer t
  :hook
  (prog-mode . smartparens-mode)
  :config
  (require 'smartparens-config)
  (sp-pair "=" "=" :actions '(wrap))
  (sp-pair "+" "+" :actions '(wrap))
  (sp-pair "<" ">" :actions '(wrap))
  (sp-pair "$" "$" :actions '(wrap))
)
 #+END_SRC

*** evil-smartparens helps avoid conflicts between evil and smartparens

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package evil-smartparens
  :ensure t
  :hook
  (smartparens-enabled . evil-smartparens-mode)
)
#+END_SRC

** Smartscan mode
   : Usage:
   : M-n and M-p move between symbols
   : M-' to replace all symbols in the buffer matching the one under point
   : C-u M-' to replace symbols in your current defun only (as used by narrow-to-defun.)

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package smartscan
  :ensure t
  :defer t
)
 #+END_SRC

** editorconfig

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package editorconfig
  :ensure t
  :defer t
  :diminish editorconfig-mode
)
#+END_SRC

* multiple cursors

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package multiple-cursors
  :after evil
  :defer t
  ;; step 1, select thing in visual-mode (OPTIONAL)
  ;; step 2, `mc/mark-all-like-dwim' or `mc/mark-all-like-this-in-defun'
  ;; step 3, `ace-mc-add-multiple-cursors' to remove cursor, press RET to confirm
  ;; step 4, press s or S to start replace
  ;; step 5, press C-g to quit multiple-cursors
  :bind
  ("M-u" . hydra-multiple-cursors/body)
  (:map evil-visual-state-map
  ("C-d" . mc/mark-next-like-this)
  ("C-a" . mc/mark-all-like-this)
  )
  :config
  (define-key evil-visual-state-map (kbd "mn") 'mc/mark-next-like-this)
  (define-key evil-visual-state-map (kbd "ma") 'mc/mark-all-like-this-dwim)
  (define-key evil-visual-state-map (kbd "md") 'mc/mark-all-like-this-in-defun)
  (define-key evil-visual-state-map (kbd "mm") 'ace-mc-add-multiple-cursors)
  (define-key evil-visual-state-map (kbd "ms") 'ace-mc-add-single-cursor)
)
#+END_SRC


* quickrun (compile and execute code)
#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package quickrun
  :ensure t
  :defer t
  :bind
  ("C-<f5>" . quickrun)
  ("M-<f5>" . quickrun-shell)
)
#+END_SRC


* LaTeX

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package tex
  :ensure auctex
  :mode ("\\.tex" . latex-mode)
  :defer t
  :hook
  (LaTeX-mode . turn-on-visual-line-mode)
  (LaTeX-mode . rainbow-mode)
  (LaTeX-mode . flyspell-mode)
  (LaTeX-mode . LaTeX-math-mode)
  :custom
  (TeX-auto-save t)
  (TeX-parse-self t)
  (TeX-master nil)
  ;; to use pdfview with auctex
  (TeX-view-program-selection '((output-pdf "pdf-tools"))
    TeX-source-correlate-start-server t)
  (TeX-view-program-list '(("pdf-tools" "TeX-pdf-tools-sync-view")))
  (TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)
  :config
  (setq TeX-PDF-mode t) ;; compile to PDF by default
  (setq org-export-with-smart-quotes t) ;; convert quotes to LaTeX smartquotes on export

  (add-hook 'LaTeX-mode-hook
    (lambda ()
        (turn-on-reftex)
        (setq reftex-plug-into-AUCTeX t)
        (reftex-isearch-minor-mode)
        (setq TeX-PDF-mode t)
        (setq TeX-source-correlate-method 'synctex)
        (setq TeX-source-correlate-start-server t)))
)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package auctex-latexmk
  :defer t
  :init
  (add-hook 'LaTeX-mode-hook 'auctex-latexmk-setup)
  :hook
  ;; example of lambda usage in :hooks
  (LaTeX-mode . (lambda () (TeX-fold-mode t)))
)
#+END_SRC


#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package company-auctex
  :ensure t
  :defer t
  :init
  (add-hook 'LaTeX-mode-hook 'company-auctex-init)
)
#+END_SRC


** Add the beamer presentation class template to org
#+BEGIN_SRC emacs-lisp :tangle init.el
(with-eval-after-load 'org
   '(add-to-list 'org-latex-classes
	      '("beamer"
	        "\\documentclass\[presentation\]\{beamer\}"
	        ("\\section\{%s\}" . "\\section*\{%s\}")
	        ("\\subsection\{%s\}" . "\\subsection*\{%s\}")
	        ("\\subsubsection\{%s\}" . "\\subsubsection*\{%s\}"))))

#+END_SRC

** Add the memoir class template to org

The Sections and Heading Levels gets configured as follows:

    | Division       | <c>Level | <c>org-equivalent |
    | \book          |       -2 | *                 |
    | \part          |       -1 | **                |
    | \chapter       |        0 | ***               |
    | \section       |        1 | ****              |
    | \subsection    |        2 | *****             |
    | \subsubsection |        3 | ******            |
    | \paragraph     |        4 | *******           |
    | \subparagraph  |        5 | ********          |


#+BEGIN_SRC emacs-lisp :tangle init.el
;(add-to-list 'org-latex-classes
;        '("memoir"
;          "\\documentclass\[a4paper\]\{memoir\}"
;          ("\\book\{%s\}" . "\\book*\{%s\}")
;          ("\\part\{%s\}" . "\\part*\{%s\}")
;          ("\\chapter\{%s\}" . "\\chapter*\{%s\}")
;          ("\\section\{%s\}" . "\\section*\{%s\}")
;          ("\\subsection\{%s\}" . "\\subsection*\{%s\}")
;          ("\\subsubsection\{%s\}" . "\\subsubsection*\{%s\}"))
;)
#+END_SRC

** Add abntex2 class to org list of latex classes
This class is based on the Memoir class
The Sections and Heading Levels gets configured as follows:

    | Division       | <c>Level | <c>org-equivalent |
    | \part          |       -1 | *                 |
    | \chapter       |        0 | **                |
    | \section       |        1 | ***               |
    | \subsection    |        2 | ****              |
    | \subsubsection |        3 | *****             |
    | \paragraph     |        4 | ******            |
    | \subparagraph  |        5 | *******           |
#+BEGIN_SRC emacs-lisp :tangle init.el
  ;(add-to-list 'org-latex-classes
  ;             '("abntex2"
  ;               "\\documentclass{abntex2}"
  ;               ("\\part{%s}" . "\\part*{%s}")
  ;               ("\\chapter{%s}" . "\\chapter*{%s}")
  ;               ("\\section{%s}" . "\\section*{%s}")
  ;               ("\\subsection{%s}" . "\\subsection*{%s}")
  ;               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
  ;               ("\\subsubsubsection{%s}" . "\\subsubsubsection*{%s}")
  ;               ("\\paragraph{%s}" . "\\paragraph*{%s}"))
  ;)

(with-eval-after-load 'org
  '(add-to-list 'org-latex-classes
               '("abntex2"
                 "\\documentclass{abntex2}"
                 ;; ("\\chapter{%s}" . "\\chapter*{%s}")
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\subsubsubsection{%s}" . "\\subsubsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}"))))
#+END_SRC

* HTML

Set HTML indentation to 4 spaces by default (only on html-mode)
#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package sgml-mode
  :ensure nil
  :defer t
  :hook
  ;;(html-mode . (lambda () (set (make-local-variable 'sgml-basic-offset) 4)))
  (sgml-mode . aggressive-indent-mode)
  (sgml-mode . rainbow-mode)
  (sgml-mode . emmet-mode)
  :init
  ;; (setq sgml-basic-offset 4)
  :config
  ;;(add-hook 'html-mode-hook
  ;;  (lambda ()
  ;;    (set (make-local-variable 'sgml-basic-offset) 4)))
)

#+END_SRC

* CSS and SCSS

** CSS

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package css-mode
  :ensure t
  :defer t
  :mode "\\.css\\'"
  :preface
  (defun setup-css-mode ()
    (interactive)
    (message "Trying to setup css-mode for buffer")
    (flycheck-mode 1)
    (smartparens-mode 1)
    (prettier-js-mode 1)
    (aggressive-indent-mode 1)
    (editorconfig-mode 1)
    (turn-on-visual-line-mode)
  )
  :hook
  (css-mode . setup-css-mode)
  ;;(css-mode . aggressive-indent-mode)
  ;;(css-mode . prettier-js-mode)
  ;;(css-mode . emmet-mode)
  :init
  (setq css-indent-offset 2)
)
#+END_SRC

** SCSS
#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package scss-mode
  :ensure t
  :defer t
  ;; this mode doenst load using :mode from use-package, dunno why
  :mode ("\\.scss\\'")
  :init
  (setq scss-compile-at-save 'nil)
  :hook
  (scss-mode . prettier-js-mode)
  (scss-mode . rainbow-mode)
  (scss-mode . aggressive-indent-mode)
  (scss-mode . emmet-mode)
  :config
  (autoload 'scss-mode "scss-mode")
  (setq scss-compile-at-save 'nil)
   (add-to-list 'auto-mode-alist '("\\.scss$\\'" . scss-mode))
)
#+END_SRC

** Helm CSS SCSS

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package helm-css-scss
  :ensure t
  :defer t
  :after helm
  :bind
  (:map isearch-mode-map
  ("s-i" . helm-css-scss-from-isearch))
  (:map helm-css-scss-map
  ("s-i" . helm-css-scss-multi-from-helm-css-scss))
  (:map css-mode-map
  ("s-i" . helm-css-scss)
  ("s-S-I" . helm-css-scss-back-to-last-point))
  (:map scss-mode-map
  ("s-i" . helm-css-scss)
  ("s-S-I" . helm-css-scss-back-to-last-point))
  :config
  (setq helm-css-scss-insert-close-comment-depth 2
        helm-css-scss-split-with-multiple-windows t
        helm-css-scss-split-direction 'split-window-vertically)

  ;; Set local keybind map for css-mode / scss-mode / less-css-mode
  (dolist ($hook '(css-mode-hook scss-mode-hook less-css-mode-hook))
    (add-hook
     $hook (lambda ()
             (local-set-key (kbd "s-i") 'helm-css-scss)
             (local-set-key (kbd "s-I") 'helm-css-scss-back-to-last-point))))
)
#+END_SRC

* YAML
#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package yaml-mode
  :ensure t
  :defer t
)
#+END_SRC

* TOML
#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package toml-mode
  :ensure t
  :defer t
)
#+END_SRC

* Emmet

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package emmet-mode
  :ensure t
  :defer t
  :commands emmet-mode
  :init
  (setq emmet-indentation 2)
  (setq emmet-move-cursor-between-quotes t)
  :config
  (unbind-key "<C-return>" emmet-mode-keymap)
  (unbind-key "C-M-<left>" emmet-mode-keymap)
  (unbind-key "C-M-<right>" emmet-mode-keymap)
  (setq emmet-expand-jsx-className? nil) ;; use emmet with JSX markup
)
#+END_SRC

* Ruby

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package ruby-mode
  :defer t
  :mode "\\.rb\\'"
  :interpreter "ruby"
  :ensure-system-package
  ((rubocop     . "gem install rubocop")
   (ruby-lint   . "gem install ruby-lint")
   (ripper-tags . "gem install ripper-tags")
   (pry         . "gem install pry"))
  :functions inf-ruby-keys
  :hook
  (ruby-mode . subword-mode)
  (ruby-mode . eldoc-mode)
  (enh-ruby-mode . lsp)
  :config
  (defun my-ruby-mode-hook ()
    (require 'inf-ruby)
    (inf-ruby-keys))

  ;; Switch the compilation buffer mode with C-x C-q (useful
  ;; when interacting with a debugger)
  (add-hook 'after-init-hook 'inf-ruby-switch-setup)

  (add-hook 'ruby-mode-hook
            (lambda ()
              (hs-minor-mode 1) ;; Enables folding
              (modify-syntax-entry ?: "."))) ;; Adds ":" to the word definition
)
#+END_SRC

** ruby refactor
#+BEGIN_SRC emacs-lisp :tangle init.el
;; Functions to help with refactoring
(use-package ruby-refactor
  :ensure t
  :defer t
  :hook
  (ruby-mode . ruby.refactor-mode-launch)
)
#+END_SRC

** ruby hash syntax

Easily toggle ruby's hash syntax

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package ruby-hash-syntax
  :ensure t
  :defer t
)
#+END_SRC

** ruby additional

Ruby rdoc helpers mostly

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package ruby-additional
  :ensure t
  :defer t
)
#+END_SRC

** ruby-tools

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package ruby-tools
  :ensure t
  :defer t
)
#+END_SRC

** rspec-mode

Support for running rspec tests

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package rspec-mode
  :ensure t
  :defer t
)
#+END_SRC

** ruby-blocks

Highlights ruby def/end blocks
Unfortunatelly this package has to be installed manually, as its not available on MELPA

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package ruby-block
  :disabled
  :ensure t
  :defer t
  :init
  ;; do overlay
  (setq ruby-block-highlight-toggle 'overlay)
  ;; display to minibuffer
  (setq ruby-block-highlight-toggle 'minibuffer)
  ;; display to minibuffer and do overlay
  (setq ruby-block-highlight-toggle t)
  :config
  (ruby-block-mode t)
)
#+END_SRC

** ruby-extra-highlights

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package ruby-extra-highlight
  :ensure t
  :defer t
  :hook
  (ruby-mode . ruby-extra-highlight-mode)
)
#+END_SRC


* Go

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package go-mode
  :ensure t
  :defer t
  :mode "\\.go\\'"
  :hook (before-save . gofmt-before-save)
)
#+END_SRC

** company-go
#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package company-go
  :ensure t
  :defer t
  :init
  (with-eval-after-load 'company
    (add-to-list 'company-backends 'company-go))
)
#+END_SRC

* webdev
** Web-Mode
#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package web-mode
  :defer t
  :custom-face
  (css-selector ((t (:inherit default :foreground "#66CCFF"))))
  (font-lock-comment-face ((t (:foreground "#828282"))))
  :mode
  ("\\.component.html\\'" . web-mode)
  ("\\.phtml\\'" . web-mode)
  ("\\.tsx\\'" . web-mode)
  ("\\.jsx\\'" . web-mode)
  ("\\.tpl\\.php\\'" . web-mode)
  ("\\.[agj]sp\\'" . web-mode)
  ("\\.as[cp]x\\'" . web-mode)
  ("\\.erb\\'" . web-mode)
  ("\\.mustache\\'" . web-mode)
  ("\\.djhtml\\'" . web-mode)
  ("\\.[t]?html?\\'" . web-mode)
  :preface
  (defun setup-web-mode ()
    (interactive)
    ;;(message "Trying to setup web-mode for buffer %s (file: %s)" buffer-name buffer-file-name)
    (message "Trying to setup web-mode for buffer")
    (flycheck-mode 1)
    (eldoc-mode 1)
    (emmet-mode 1)
    (prettier-js-mode 1)
    (highlight-indent-guides-mode 1)
    (editorconfig-mode 1)
    (smartscan-mode 1)
    (turn-on-visual-line-mode)
  )
  :hook
  (web-mode . setup-web-mode)
  :custom
  (web-mode-markup-indent-offset 2)
  (web-mode-css-indent-offset 2)
  (web-mode-code-indent-offset 2)
  (web-mode-enable-auto-pairing t)
  (web-mode-enable-current-element-highlight t)
  (web-mode-enable-block-face t)
  (web-mode-enable-part-face t)
  :config
  ;; TSX
  (add-hook 'web-mode-hook
            (lambda ()
              (when (string-equal "tsx" (file-name-extension buffer-file-name))
                (setup-tide-mode))))
  ;; Template
  (setq web-mode-engines-alist
        '(("php"    . "\\.phtml\\'")
          ("blade"  . "\\.blade\\.")))
  ;;---------------------------------------
)
#+END_SRC

*** web-mode-edit-element

**** General Keymaps
| C-(           | web-mode-element-wrap                                 |
| M-(           | web-mode-element-rename                               |
| C-M-SPC       | web-mode-element-content-select                       |

**** Elements Keymaps
| C-<left>      | web-mode-element-previous                             |
| C-<right>     | web-mode-element-next                                 |
| M-<left>      | web-mode-edit-element-elements-contract-over-border   |
| M-<right>     | web-mode-edit-element-elements-expand-over-border     |
| C-M-<left>    | web-mode-edit-element-elements-transpose-backward     |
| C-M-<right>   | web-mode-element-transpose                            |
| C-<up>        | web-mode-element-beginning                            |
| C-<down>      | web-mode-tag-match                                    |
| C-S-<up>      | web-mode-element-parent                               |
| C-S-<down>    | web-mode-element-next                                 |
| M-<up>        | web-mode-edit-element-elements-dissolve               |
| M-<down>      | web-mode-edit-element-elements-raise                  |
| C-M-<up>      | web-mode-element-vanish                               |
| C-M-<down>    | web-mode-edit-element-elements-sibling-next-or-parent |
| C-k           | web-mode-element-kill                                 |
| C-S-k         | web-mode-edit-element-elements-kill-siblings          |
| M-k           | web-mode-edit-element-elements-kill-siblings-previous |
| M-K           | web-mode-edit-element-elements-kill-siblings-next     |

**** Attributes Keymaps
| C-S-<left>    | web-mode-attribute-previous                           |
| C-S-<right>   | web-mode-attribute-next                               |
| C-M-S-<left>  | web-mode-edit-element-attributes-transpose-backward   |
| C-M-S-<right> | web-mode-attribute-transpose                          |
| C-M-S-<up>    | web-mode-attribute-beginning                          |
| C-M-S-<down>  | web-mode-edit-element-attributes-end-inside           |
| C-M-K         | web-mode-attribute-kill                               |

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package web-mode-edit-element
  :ensure t
)
#+END_SRC


** js2-mode
js2-mode: enhanced JavaScript editing mode
https://github.com/mooz/js2-mode

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package js2-mode
  :after flycheck company
  :defer t
  :mode
  ("\\.js$" . js2-mode)
  :hook
  (js2-mode . flycheck-mode)
  (js2-mode . add-node-modules-path)
  (js2-mode . lsp)
  (js2-jsx-mode . lsp)
  (js2-mode . rainbow-mode)
  (js2-mode . color-identifiers-mode)
  (js2-mode . prettier-js-mode)
  (js2-mode . aggressive-indent-mode)
  :init
  ;; have 2 space indentation by default
  (setq js-indent-level 2)
  (setq js2-basic-offset 2)
  (setq js-chain-indent t)
  ;; Try to highlight most ECMA built-ins
  (setq js2-highlight-level 3)
  ;; turn off all warnings in js2-mode
  (setq js2-mode-show-parse-errors t)
  (setq js2-mode-show-strict-warnings nil)
  (setq js2-strict-missing-semi-warning nil)
  :config
  ;;=======================================
  ;; Flycheck Setup for JavaScript
  ;; add eslint to list of flycheck checkers
  ;;---------------------------------------
  (setq flycheck-checkers '(javascript-eslint))
  ;; disable jshint since we prefer eslint checking
  (setq-default flycheck-disabled-checkers (append flycheck-disabled-checkers '(javascript-jshint)))
  ;; use eslint_d insetad of eslint for faster linting
  (setq flycheck-javascript-eslint-executable "eslint_d")
  ;; set modes that will use ESLint
  (flycheck-add-mode 'javascript-eslint 'web-mode)
  (flycheck-add-mode 'javascript-eslint 'js2-mode)
  (flycheck-add-mode 'javascript-eslint 'js-mode)

  ;; Workaround for eslint loading slow
  ;; https://github.com/flycheck/flycheck/issues/1129#issuecomment-319600923
  (advice-add 'flycheck-eslint-config-exists-p :override (lambda() t))
  ;;=======================================

  )
#+END_SRC

*** eslint

eslintd-fix: Emacs minor-mode to automatically fix javascript with eslint_d.
https://github.com/aaronjensen/eslintd-fix/tree/master

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package eslintd-fix
  :ensure t
  :defer t
  :ensure-system-package
  (eslint . "npm i -g eslint")
  :config
  ;; Grab eslint executable from node_modules instead of global
  ;; Taken from https://github.com/flycheck/flycheck/issues/1087#issuecomment-246514860
  ;; Gist: https://github.com/lunaryorn/.emacs.d/blob/master/lisp/lunaryorn-flycheck.el#L62
  (defun lunaryorn-use-js-executables-from-node-modules ()
    "Set executables of JS and TS checkers from local node modules."
    (-when-let* ((file-name (buffer-file-name))
                 (root (locate-dominating-file file-name "node_modules"))
                 (module-directory (expand-file-name "node_modules" root)))
      (pcase-dolist (`(,checker . ,module) '((javascript-jshint . "jshint")
                                             (javascript-eslint . "eslint")
                                             (typescript-tslint . "tslint")
                                             (javascript-jscs   . "jscs")))
        (let ((package-directory (expand-file-name module module-directory))
              (executable-var (flycheck-checker-executable-variable checker)))
          (when (file-directory-p package-directory)
            (set (make-local-variable executable-var)
                 (expand-file-name (if (string= module "tslint")
                                       (concat "bin/" module)
                                     (concat "bin/" module ".js"))
                                   package-directory)))))))
)
#+END_SRC


*** js2-refactor
js2-refactor uses 2 char mnemonic for refactorings.
So C-c C-r ef would be "extract-function", and so on

Refactorings available:
| ee | expand-node-at-point: Expand bracketed list according to node type at point (array, object, function, call args).                     |
| cc | contract-node-at-point: Contract bracketed list according to node type at point (array, object, function, call args).                 |
| ef | extract-function: Extracts the marked expressions out into a new named function.                                                      |
| em | extract-method: Extracts the marked expressions out into a new named method in an object literal.                                     |
| tf | toggle-function-expression-and-declaration: Toggle between function name() {} and var name = function ();                             |
| ta | toggle-arrow-function-and-expression: Toggle between function expression to arrow function.                                           |
| ts | toggle-function-async: Toggle between an async and a regular function.                                                                |
| ip | introduce-parameter: Changes the marked expression to a parameter in a local function.                                                |
| lp | localize-parameter: Changes a parameter to a local var in a local function.                                                           |
| wi | wrap-buffer-in-iife: Wraps the entire buffer in an immediately invoked function expression                                            |
| ig | inject-global-in-iife: Creates a shortcut for a marked global by injecting it in the wrapping immediately invoked function expression |
| ag | add-to-globals-annotation: Creates a /*global */ annotation if it is missing, and adds the var at point to it.                        |
| ev | extract-var: Takes a marked expression and replaces it with a var.                                                                    |
| el | extract-let: Similar to extract-var but uses a let-statement.                                                                         |
| ec | extract-const: Similar to extract-var but uses a const-statement.                                                                     |
| iv | inline-var: Replaces all instances of a variable with its initial value.                                                              |
| rv | rename-var: Renames the variable on point and all occurrences in its lexical scope.                                                   |
| vt | var-to-this: Changes local var a to be this.a instead.                                                                                |
| ao | arguments-to-object: Replaces arguments to a function call with an object literal of named arguments.                                 |
| 3i | ternary-to-if: Converts ternary operator to if-statement.                                                                             |
| sv | split-var-declaration: Splits a var with multiple vars declared, into several var statements.                                         |
| ss | split-string: Splits a string.                                                                                                        |
| st | string-to-template: Converts a string into a template string.                                                                         |
| uw | unwrap: Replaces the parent statement with the selected region.                                                                       |
| lt | log-this: Adds a console.log() statement for what is at point (or region). With a prefix argument, use JSON pretty-printing.          |
| dt | debug-this: Adds a debug() statement for what is at point (or region).                                                                |
| sl | forward-slurp: Moves the next statement into current function, if-statement, for-loop or while-loop.                                  |
| ba | forward-barf: Moves the last child out of current function, if-statement, for-loop or while-loop.                                     |
| k  | kill: Kills to the end of the line, but does not cross semantic boundaries.                                                           |

There are also some minor conveniences bundled:

| C-S-down and C-S-up | moves the current line up or down. If the line is an element in an object or array literal, it makes sure that the commas are still correctly placed. |

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package js2-refactor
  :ensure t
  :defer t
  :after js2-mode
  :hook
  (js2-mode . js2-refactor-mode)
  :bind
  (:map js2-mode-map
        ("C-k" . js2r-kill)
        ("C-c h r" . js2-refactor-hydra/body))
  :config
  (js2r-add-keybindings-with-prefix "C-c C-r")
  (define-key js2-mode-map (kbd "C-k") #'js2r-kill)

  (defhydra js2-refactor-hydra (:color blue :hint nil)
    "
^Functions^                    ^Variables^               ^Buffer^                      ^sexp^               ^Debugging^
------------------------------------------------------------------------------------------------------------------------------
[_lp_] Localize Parameter      [_ev_] Extract variable   [_wi_] Wrap buffer in IIFE    [_k_]  js2 kill      [_lt_] log this
[_ef_] Extract function        [_iv_] Inline variable    [_ig_] Inject global in IIFE  [_ss_] split string  [_dt_] debug this
[_ip_] Introduce parameter     [_rv_] Rename variable    [_ee_] Expand node at point   [_sl_] forward slurp
[_em_] Extract method          [_vt_] Var to this        [_cc_] Contract node at point [_ba_] forward barf
[_ao_] Arguments to object     [_sv_] Split var decl.    [_uw_] unwrap
[_tf_] Toggle fun exp and decl [_ag_] Add var to globals
[_ta_] Toggle fun expr and =>  [_ti_] Ternary to if
[_q_]  quit"
    ("ee" js2r-expand-node-at-point)
    ("cc" js2r-contract-node-at-point)
    ("ef" js2r-extract-function)
    ("em" js2r-extract-method)
    ("tf" js2r-toggle-function-expression-and-declaration)
    ("ta" js2r-toggle-arrow-function-and-expression)
    ("ip" js2r-introduce-parameter)
    ("lp" js2r-localize-parameter)
    ("wi" js2r-wrap-buffer-in-iife)
    ("ig" js2r-inject-global-in-iife)
    ("ag" js2r-add-to-globals-annotation)
    ("ev" js2r-extract-var)
    ("iv" js2r-inline-var)
    ("rv" js2r-rename-var)
    ("vt" js2r-var-to-this)
    ("ao" js2r-arguments-to-object)
    ("ti" js2r-ternary-to-if)
    ("sv" js2r-split-var-declaration)
    ("ss" js2r-split-string)
    ("uw" js2r-unwrap)
    ("lt" js2r-log-this)
    ("dt" js2r-debug-this)
    ("sl" js2r-forward-slurp)
    ("ba" js2r-forward-barf)
    ("k" js2r-kill)
    ("q" nil))
)
#+END_SRC

*** xref-js2

Jump to references/definitions using ag & js2-mode's AST in Emacs

xref-js2 adds navigation to definitions or references to JavaScript projects in Emacs.
xref-js2 adds an xref backend for JavaScript files.

Instead of using a tag system, it relies on ag to query the codebase of a project. This might sound crazy at first, but it turns out that ag is so fast that jumping using xref-js2 is most of the time instantaneous, even on fairly large JavaScript codebases (it has been tested on 50k lines of JS code).

Because line by line regexp search has its limitations, xref-js2 does a second pass on result candidates and eliminates possible false positives using js2-mode's AST, thus giving very accurate results.

xref-js2 uses ag to perform searches, so you’ll need to install it as well.

Keybindings

| M-. | Jump  to definition                         |
| M-? | Jump to references                          |
| M-, | Pop back  to where  M-.  was  last  invoked |

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package xref-js2
  :ensure t
  :defer t
  :config
  ;;(setq xref-js2-search-program 'rg)

  ;; js-mode (which js2 is based on) binds "M-." which conflicts with xref, so
  ;; unbind it.
  (define-key js-mode-map (kbd "M-.") nil)

  (add-hook 'js2-mode-hook (lambda ()
    (add-hook 'xref-backend-functions #'xref-js2-xref-backend nil t)))
)
#+END_SRC
** add-node-modules-path

Adds the node_modules/.bin directory to the buffer exec_path. E.g. support project local eslint installations.
https://github.com/codesuki/add-node-modules-path/tree/master

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package add-node-modules-path
  :ensure t
  :defer t
)
#+END_SRC

** json-snatcher

json-snatcher: get the path of any JSON element easily
https://github.com/Sterlingg/json-snatcher

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package json-snatcher
  :ensure t
  :defer t
  :hook
  (json-mode . js-mode-bindings)
  :config
  (defun js-mode-bindings ()
    "Sets a hotkey for using the json-snatcher plugin"
    (when (string-match  "\\.json$" (buffer-name))
      (local-set-key (kbd "C-c C-g") 'jsons-print-path)))
)
#+END_SRC

** js-import

https://github.com/jakoblind/js-import

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package js-import
  :ensure t
  :defer t
)
#+END_SRC

** PrettierJS

#+BEGIN_SRC emacs-lisp :tangle init.el
;; prettier-emacs: minor-mode to prettify javascript files on save
;; https://github.com/prettier/prettier-emacs
(use-package prettier-js
  :ensure t
  :defer t
  :custom
  (prettier-js-show-errors 'buffer) ;; options: 'buffer, 'echo or nil
  :config
;;   ;; use prettier from local `node_modules' folder if available
;;   (defun tau/use-prettier-if-in-node-modules ()
;;     "Enable prettier-js-mode iff prettier was found installed locally in project"
;;     (interactive)
;;     (let* ((file-name (or (buffer-file-name) default-directory))
;;            (root (locate-dominating-file file-name "node_modules"))
;;            (prettier (and root
;;                           (expand-file-name "node_modules/prettier/bin-prettier.js" root))))
;;       (if (and prettier (file-executable-p prettier))
;;           (progn
;;             (message "Found local prettier executable at %s. Enabling prettier-js-mode" prettier)
;;             (setq prettier-js-command prettier)
;;             (make-variable-buffer-local 'prettier-js-command)
;;             (prettier-js-mode)
;;             (message "Disabling aggressive-indent-mode in favour of prettier")
;;             (aggressive-indent-mode -1))
;;         (progn
;;           (message "Prettier not found in %s. Not enabling prettier-js-mode" root)
;;           (message "Falling back to aggressive-indent-mode")
;;           (aggressive-indent-mode 1)))))
;;   (add-hook 'prettier-js-mode-hook #'tau/use-prettier-if-in-node-modules)
;;
)
#+END_SRC

** Typescript

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package typescript-mode
  :ensure t
  :defer t
  :after company
  :mode
  (("\\.ts\\'" . typescript-mode)
   ("\\.tsx\\'" . typescript-mode))
  :preface
  (defun setup-typescript-mode ()
    (interactive)
    (message "Trying to setup typescript-mode for buffer")
    (lsp)
    (lsp-ui-mode)
    ;; (tide-setup)
    ;; (tide-hl-identifier-mode 1)
    (flycheck-mode 1)
    (eldoc-mode 1)
    (yas-minor-mode 1)
    (add-node-modules-path)
    (editorconfig-mode 1)
    (prettier-js-mode 1)
    (highlight-indent-guides-mode 1)
    (dumb-jump-mode 1)
    (hl-todo-mode 1)
    (smartscan-mode 1)
    (turn-on-visual-line-mode)
  )
  :hook
  (typescript-mode . setup-typescript-mode)
)
#+END_SRC

** Tide
#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package tide
  :ensure t
  :defer t
  :after (typescript-mode company flycheck)
  :preface
  (defun setup-tide-mode ()
    (interactive)
    (tide-setup)
    (flycheck-mode +1)
    (setq flycheck-check-syntax-automatically '(save mode-enabled))
    (eldoc-mode +1)
    (tide-hl-identifier-mode +1)
    (company-mode +1)
  )
  ;;:hook
  ;;(tide-mode . setup-tide-mode)
  ;;(before-save . tide-format-before-save)
  :init
  (setq tide-always-show-documentation t)
  :config
  ;;(add-hook 'before-save-hook 'tide-format-before-save)
  ;;(add-hook 'typescript-mode-hook #'setup-tide-mode)
  ;;(add-hook 'js2-mode-hook #'setup-tide-mode)
)

#+END_SRC


* format-all

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package format-all
  :ensure t
  :defer t
  :bind ("C-c C-f" . format-all-buffer)
)
#+END_SRC

* JSON Mode

json-mode: Major mode for editing JSON files with emacs
https://github.com/joshwnj/json-mode

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package json-mode
  :ensure t
  :mode "\\.js\\(?:on\\|[hl]int\\(rc\\)?\\)\\'"
  :config
  (add-hook 'json-mode-hook #'prettier-js-mode)
  (setq json-reformat:indent-width 2)
  (setq json-reformat:pretty-string? t)
  (setq js-indent-level 2)
)
#+END_SRC

* RJSX Mode

https://github.com/felipeochoa/rjsx-mode

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package rjsx-mode
  :ensure t
  :defer t
  :after js2-mode
  :mode
  ("\\.jsx$" . rjsx-mode)
  ("components/.+\\.js$" . rjsx-mode)
  :hook
  (rjsx-mode . add-node-modules-path)
  (rjsx-mode . prettier-js-mode)
  :config
  ;; auto register for JS files that are inside a `components' folder
  (add-to-list 'auto-mode-alist '("components\\/.*\\.js\\'" . rjsx-mode))

  ;; for better jsx syntax-highlighting in web-mode
  ;; - courtesy of Patrick @halbtuerke
  (defadvice web-mode-highlight-part (around tweak-jsx activate)
    (if (equal web-mode-content-type "jsx")
      (let ((web-mode-enable-part-face nil))
        ad-do-it)
      ad-do-it))
)
#+END_SRC

* Angular

** Angular Open Counterpart

Taken from ng2-mode

#+BEGIN_SRC emacs-lisp :tangle init.el
(defun ng2--counterpart-name (file)
  "Return the file name of FILE's counterpart, or FILE if there is no counterpart."
  (when (not (ng2--is-component file)) file)
  (let ((ext (file-name-extension file))
        (base (file-name-sans-extension file)))
    (if (equal ext "ts")
        (concat base ".html")
      (concat base ".ts"))))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle init.el
(defun ng2--is-component (file)
  "Return whether FILE is a component file."
  (equal (file-name-extension (file-name-sans-extension file)) "component"))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle init.el
(defun ng2-open-counterpart ()
  "Opens the corresponding template or component file to this one."
  (interactive)
  (find-file (ng2--counterpart-name (buffer-file-name))))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle init.el
(global-set-key (kbd "C-x a o") #'ng2-open-counterpart)
#+END_SRC

* format-all

#+BEGIN_SRC emacs-lisp :tangle init.el
  (use-package format-all
  :ensure t
  :bind ("C-c C-f" . format-all-buffer)
  )
#+END_SRC

* JSON Mode

json-mode: Major mode for editing JSON files with emacs
https://github.com/joshwnj/json-mode

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package json-mode
  :mode "\\.js\\(?:on\\|[hl]int\\(rc\\)?\\)\\'"
  :config
  (add-hook 'json-mode-hook #'prettier-js-mode)
  (setq json-reformat:indent-width 2)
  (setq json-reformat:pretty-string? t)
  (setq js-indent-level 2)

  ;;Flycheck setup for JSON Mode
  ;; disable json-jsonlist checking for json files
  (with-eval-after-load 'flycheck
    (setq-default flycheck-disabled-checkers
      (append flycheck-disabled-checkers '(json-jsonlist))))
)

    #+END_SRC

* RJSX Mode

https://github.com/felipeochoa/rjsx-mode

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package rjsx-mode
    :after js2-mode
    :mode
    ("\\.jsx$" . rjsx-mode)
    ("components/.+\\.js$" . rjsx-mode)

    :config
    ;; auto register for JS files that are inside a `components' folder
    (add-to-list 'auto-mode-alist '("components\\/.*\\.js\\'" . rjsx-mode))

    ;; for better jsx syntax-highlighting in web-mode
    ;; - courtesy of Patrick @halbtuerke
    (defadvice web-mode-highlight-part (around tweak-jsx activate)
      (if (equal web-mode-content-type "jsx")
        (let ((web-mode-enable-part-face nil))
          ad-do-it)
        ad-do-it))
)
#+END_SRC

* Docker

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package dockerfile-mode
  :ensure t
  :defer t
  :mode "\\Dockerfile\\'"
)
#+END_SRC

* fun packages

** activate-power-mode
inspired from the function with same name from Atom Editor
Source;

#+BEGIN_SRC emacs-lisp :tangle init.el
(defun animated-self-insert ()
  (let* ((undo-entry (car buffer-undo-list))
         (beginning (and (consp undo-entry) (car undo-entry)))
         (end (and (consp undo-entry) (cdr undo-entry)))
         (str (when (and (numberp beginning)
                       (numberp end))
                (buffer-substring-no-properties beginning end)))
         (animate-n-steps 3))
    (when str
      (delete-region beginning end)
      (animate-string str (1- (line-number-at-pos)) (current-column)))))

;; to disable simply comment this hook
;;; (add-hook 'post-self-insert-hook 'animated-self-insert)
#+END_SRC

** c-c-combo

This package lets you have some kind of encouragement if you are typing fast, it has some unreal tournament sounds, and after 15 seconds of mantaining your WPM, an animation for each insertion will appear. Then it will enable selectric-mode, and highlight trail (WIP) package randomly.

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package c-c-combo
  :ensure t
  :defer t
)
#+END_SRC

** xkcd

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package xkcd
  :ensure t
  :defer t
)
#+END_SRC

** fireplaces

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package fireplace
  :ensure t
  :defer t
  :init (defvar fireplace-mode-map)
  :bind (:map fireplace-mode-map
              ("d" . fireplace-down)
              ("s" . fireplace-toggle-smoke)
              ("u" . fireplace-up))
  :config
  (setq fireplace-toggle-smoke t)
  ;; (fireplace)
)
#+END_SRC

** selectric mode

make emacs sound like a typewritter

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package selectric-mode
  :ensure t
  :defer t
)
#+END_SRC

** tetris

#+BEGIN_SRC emacs-lisp :tangle init.el
(defvar tetris-mode-map
  (make-sparse-keymap 'tetris-mode-map))
(define-key tetris-mode-map (kbd "C-p") 'tetris-rotate-prev)
(define-key tetris-mode-map (kbd "C-n") 'tetris-move-down)
(define-key tetris-mode-map (kbd "C-b") 'tetris-move-left)
(define-key tetris-mode-map (kbd "C-f") 'tetris-move-right)
(define-key tetris-mode-map (kbd "C-SPC") 'tetris-move-bottom)
(defadvice tetris-end-game (around zap-scores activate)
  (save-window-excursion ad-do-it))
#+END_SRC

** pacmacs

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package pacmacs
  :ensure t
  :defer t
)
#+END_SRC

** epaint
#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package epaint
  :defer t
  :if window-system
  :commands (epaint)
  :init
  (with-eval-after-load (quote epaint-context)
    (unless (boundp (quote cl-struct-epaint-drawable))
      (defvar cl-struct-epaint-drawable (quote epaint-drawable)))
    (unless (boundp (quote cl-struct-epaint-gc))
      (defvar cl-struct-epaint-gc (quote epaint-gc))))
)
#+END_SRC

** Speed type, a game to practice touch/speed typing in Emacs.

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package speed-type
  :defer t
)
#+END_SRC

** 2048 Game, an implementation of 2048 in Emacs.
#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package 2048-game
  :defer t
)
#+END_SRC

** Zone
#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package zone
  :ensure nil
  :defer 5
  :config
  ;; (zone-when-idle 600) ; in seconds
  (defun zone-choose (pgm)
    "Choose a PGM to run for `zone'."
    (interactive
     (list
      (completing-read
       "Program: "
       (mapcar 'symbol-name zone-programs))))
    (let ((zone-programs (list (intern pgm))))
      (zone))))
      #+END_SRC

** meme

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package meme
  :ensure nil
  :defer t
  :commands (meme meme-file)
)
#+END_SRC

** zone-nyan

#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package zone-nyan
  :ensure t
  :defer t
)
#+END_SRC

** zone-rainbow
#+BEGIN_SRC emacs-lisp :tangle init.el
(use-package zone-nyan
  :ensure t
  :defer t
)
#+END_SRC


* Helper functions

** Duplicate line

#+BEGIN_SRC emacs-lisp :tangle init.el
(defun duplicate-line()
  "Duplicate current line."
  (interactive)
  (move-beginning-of-line 1)
  (kill-line)
  (yank)
  (open-line 1)
  (next-line 1)
  (yank)
)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle init.el
;;(global-set-key (kbd "M-S-D") 'duplicate-line)
(global-set-key [(meta shift d)] 'duplicate-line)
#+END_SRC

** Copy/Paste To/From System's Clipboard

*** Copy to system clipboard

#+BEGIN_SRC emacs-lisp :tangle init.el
(defun copy-to-clipboard ()
  "Make F8 and F9 Copy and Paste to/from OS Clipboard.  Super usefull."
  (interactive)
  (if (display-graphic-p)
      (progn
          (message "Yanked region to x-clipboard!")
          (call-interactively 'clipboard-kill-ring-save)
          )
      (if (region-active-p)
          (progn
          (shell-command-on-region (region-beginning) (region-end) "xsel -i -b")
          (message "Yanked region to clipboard!")
          (deactivate-mark))
      (message "No region active; can't yank to clipboard!")))
)
#+END_SRC

*** Paste

#+BEGIN_SRC emacs-lisp :tangle init.el
(evil-define-command paste-from-clipboard()
(if (display-graphic-p)
    (progn
        (clipboard-yank)
        (message "graphics active")
        )
    (insert (shell-command-to-string "xsel -o -b")) ) )
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle init.el
(global-set-key [f9] 'copy-to-clipboard)
(global-set-key [f10] 'paste-from-clipboard)
#+END_SRC


* End init.el file
  #+BEGIN_SRC emacs-lisp :tangle init.el
;; Local Variables:
;; coding: utf-8
;; no-byte-compile: t
;; End:


(provide 'init)
;;; .emacs ends here

#+END_SRC
