
#########################################
# If you come from bash you might have to change your $PATH.
# check if exporting this line in .profile is okay
# if not, uncomment it
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# load all my env vars first
if [[ -f $HOME/dotfiles/envvars ]]; then
    source $HOME/dotfiles/envvars
else
    echo "envvars file not found"
fi

#########################################
# my aliases
[[ -e $HOME/dotfiles/aliases ]] && source $HOME/dotfiles/aliases

#########################################
# zplug boostrap

# auto install if not installed
# You can customize where you put it but it's generally recommended that you put in $HOME/.zplug
if [[ ! -d ~/.zplug ]];then
    git clone https://github.com/b4b4r07/zplug ~/.zplug
fi
source ~/.zplug/init.zsh

# if plugins are not installed, install them
# Actually install plugins, prompt user input
if ! zplug check --verbose; then
    printf "Install zplug plugins? [y/N]: "
    if read -q; then
        echo; zplug install
    fi
fi

# vim mode
zplug "softmoth/zsh-vim-mode", from:github

# Async for zsh, used by pure
zplug "mafredri/zsh-async", from:github, defer:0

# Load completion library for those sweet [tab] squares
zplug "lib/completion", from:oh-my-zsh

# Syntax highlighting for commands, load last
zplug "zsh-users/zsh-syntax-highlighting", from:github, defer:3

# Theme!
zplug "sindresorhus/pure", use:pure.zsh, from:github, as:theme

zplug load

#########################################
# THEME AND UI

# set theme
# Theme: PowerLevel10K

echo "## PowerLevel10K theme"
POWERLEVEL10K_DIR=~/.zsh/themes/powerlevel10k
if [ ! -d "$POWERLEVEL10K_DIR" ]; then
    echo "## installing PowerLevel10K theme for zsh"
    git clone --depth=1 https://github.com/romkatv/powerlevel10k.git $POWERLEVEL10K_DIR
    # npm install --global pure-prompt
else
    source $POWERLEVEL10K_DIR/powerlevel10k.zsh-theme
    echo "## PowerLevel10K theme already installed and sourced"
fi

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi


# pure prompt

# add pure prompt to zsh path
#fpath+=("$HOME/.zsh/pure")

# # start prompt plugin
#autoload -U promptinit; promptinit
#prompt pure > /dev/null

#########################################
# PLUGINS SETTINGS

# vim mode plugin settings

MODE_CURSOR_VICMD="green block"
MODE_CURSOR_VIINS="#20d08a blinking bar"
MODE_CURSOR_SEARCH="#ff00ff steady underline"


#########################################
# ZSH settings

# enable command auto-correction.
ENABLE_CORRECTION="true"

# display red dots whilst waiting for completion.
COMPLETION_WAITING_DOTS="true"

# disable marking untracked files under VCS as dirty.
# This makes repository status check for large repositories much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# save history (show previous used commands)
SAVEHIST=1000
HISTFILE=$HOME/.zsh_history

#########################################
# fzf (replaced by oh-my-zsh native fzf plugin)
# [ -f $HOME/.fzf.zsh ] && source $HOME/.fzf.zsh

#########################################
# bind home/end keys
bindkey "${terminfo[khome]}" beginning-of-line
bindkey "${terminfo[kend]}" end-of-line

#########################################
# Tmux
ZSH_TMUX_AUTOSTART="true"
ZSH_TMUX_AUTOSTART_ONCE="true"

# if [ -z "$TMUX" ]
# then
#     tmux attach -t TMUX || tmux new -s TMUX
# fi

if [ -z "$TMUX" ]
then
    tmux new-session
fi

# THIS WAS GIVING ME ERRORS WITH EMACS PACKAGE `exec-path-from-shell`
# if [[ $DISPLAY ]]; then
#   [[ $- != *i* ]] && return
#   [[ -z "$TMUX" ]] && tmux -e zsh
# fi

#########################################
# asdf
[ -s "$HOME/.asdf/asdf.sh" ] && \. $HOME/.asdf/asdf.sh
[ -s "$HOME/.asdf/completions/asdf.bash" ] && \. $HOME/.asdf/completions/asdf.bash

#########################################
# nvm

# first the NVM_DIR env var is exported in .profile
# export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# Calling nvm use automatically in a directory with a .nvmrc file
# place this after nvm initialization!
autoload -U add-zsh-hook
load-nvmrc() {
  local node_version="$(nvm version)"
  local nvmrc_path="$(nvm_find_nvmrc)"

  if [ -n "$nvmrc_path" ]; then
    local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")

    if [ "$nvmrc_node_version" = "N/A" ]; then
      nvm install
    elif [ "$nvmrc_node_version" != "$node_version" ]; then
      nvm use
    fi
  elif [ "$node_version" != "$(nvm version default)" ]; then
    echo "Reverting to nvm default version"
    nvm use default
  fi
}
add-zsh-hook chpwd load-nvmrc
load-nvmrc

#########################################
# Yarn

# first the YARN_DIR is exported in .profile
# export YVM_DIR=$HOME/.yvm
[ -r $YVM_DIR/yvm.sh ] && . $YVM_DIR/yvm.sh



#########################################
# Example aliases
alias zshconfig="vim $HOME/.zshrc"
alias ohmyzsh="vim $HOME/.oh-my-zsh"

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR="/home/tau/.sdkman"
[[ -s "/home/tau/.sdkman/bin/sdkman-init.sh" ]] && source "/home/tau/.sdkman/bin/sdkman-init.sh"



#########################################

# Emacs mode
# bindkey -e

# VI mode
bindkey -v

# change cursor shape according to vi mode
# since zsh doenst use readline's inputrc file, but its own ZLE instaed, this has to be here

function zle-keymap-select zle-line-init
{
    # change cursor shape in iTerm2
    case $KEYMAP in
        vicmd)      print -n -- "\E]50;CursorShape=0\C-G";;  # block cursor
        viins|main) print -n -- "\E]50;CursorShape=1\C-G";;  # line cursor
    esac

    zle reset-prompt
    zle -R
}

function zle-line-finish
{
    print -n -- "\E]50;CursorShape=0\C-G"  # block cursor
}

zle -N zle-line-init
zle -N zle-line-finish
zle -N zle-keymap-select

#########################################
#
# My Binding and Macros

# zjsh does not use readline, instead it uses its own and more powerful zle. It does not read /etc/inputrc or ~/.inputrc. Zle has an emacs mode and a vi mode. By default, it tries to guess whether emacs or vi keys from the $EDITOR environment variable are desired. If it is empty, it will default to emacs. Change this with bindkey -e or bindkey -v respectively for emacs mode or vi mode.

# For a complete list of codes to use for each key, visit: http://zshwiki.org/home/zle/bindkeys
# You may want to call different history search commands, e.g.
# down-line-or-history or down-line-or-search (and up-*)
bindkey '^P' history-search-backward
bindkey '^N' history-search-forward
bindkey '\e[A' history-search-backward
bindkey '\e[B' history-search-forward
# The others should work already

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
