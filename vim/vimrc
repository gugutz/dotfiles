""""""""""""""""""""""""""""""""""""""""""""""
" my vim setup
"""""""""""""""""""""""""""""""""""""""""""""""

" plugins

call plug#begin('~/.vim/plugged')

" Autocomplete
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" Linting
Plug 'w0rp/ale'                          " ALE Asynchronous ESLinter for several languages

" Snippets
Plug 'honza/vim-snippets'

" vim which key on-demand lazy load
Plug 'liuchengxu/vim-which-key', { 'on': ['WhichKey', 'WhichKey!'] }

" UI / Colorscheme / tema
Plug 'tomasiser/vim-code-dark'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'chrisbra/Colorizer'                " Show hex codes as colours

" Vim Airline statusbar
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'mkitt/tabline.vim'                 " Cleaner tabs

" Colour matched brackets
Plug 'kien/rainbow_parentheses.vim'
Plug 'ryanoasis/vim-devicons'            " Icons for dev file types. Has to be loaded after airline

" Rainbow Parentheses Improved
Plug 'luochen1990/rainbow'

Plug 'editorconfig/editorconfig-vim'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'                  " so that vim-surroud actions will be repeatable with dot command .
Plug 'tpope/vim-commentary'              " use with 'gc', equivalent to vscode ctrl+/)
Plug 'terryma/vim-multiple-cursors'       " Install vim-multiple-cursors (equivalent to vscode ctrl+d)
Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'unblevable/quick-scope'            " Highlight jump characters
Plug 'francoiscabrol/ranger.vim'         " Install ranger-vim integration with ranger file manager
Plug 'christoomey/vim-tmux-navigator'
Plug 'RRethy/vim-illuminate'             " illuminate other uses of current word under cursor

" Git interfaces
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-git'
Plug 'airblade/vim-gitgutter'


Plug 'amiorin/vim-project'
Plug 'pbrisbin/vim-runfile'
Plug 'mattn/emmet-vim'

" Vim matchit to extend % function (already comes installed in nvim)
if !has('nvim')
  Plug 'adelarsq/vim-matchit' " Matchit extends the % function, navigating to more than a single character
endif

Plug 'valloric/MatchTagAlways'           " Show matching and closing tags

" Javascript Plugins
Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'                       " JSX syntax colors and indent support. Depends on vim-javascript
Plug 'xojs/vim-xo'                       " Install vim-xo for xo linting support
Plug 'prettier/vim-prettier', { 'do': 'npm install' }

" Typescript
Plug 'heavenshell/vim-tslint'

" Go
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }

" Elixir
Plug 'elixir-editors/vim-elixir'
Plug 'slashmili/alchemist.vim'
Plug 'mhinz/vim-mix-format'

" Ruby
Plug 'vim-ruby/vim-ruby'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-rake'
Plug 'sunaku/vim-ruby-minitest'
Plug 'tpope/vim-bundler'

" Readline shortcuts for insert mode
Plug 'tpope/vim-rsi'


" Markdown
Plug 'plasticboy/vim-markdown'
Plug 'suan/vim-instant-markdown'         " Markdown preview instant-markdown-
Plug 'godlygeek/tabular'                 " Tabular align texts that grow

" FZF
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

" " CtrlP
" Plug 'ctrlp/ctrlp.vim'                 " Tabular align texts that grow
Plug 'gabesoft/vim-ags' " ag, rg support

Plug 'tpope/vim-sensible'
Plug 'tpope/vim-eunuch' " Vim sugar for the UNIX shell commands, like :Delete to delete buffer and file at same time, SudoWrite, etc...
Plug 'ntpeters/vim-better-whitespace' " Highlight trailing whitespace
Plug 'sheerun/vim-polyglot' " Syntax highliht, indent and filetype plugin support for several languages

" Initialize plugin system
call plug#end()
" Rainbow Parentheses Improved
Plug 'luochen1990/rainbow'


" Auto install vim-plug and Plugins
if empty(glob('~/.config/nvim/autoload/plug.vim'))
    if !executable("curl")
        echoerr "You have to install curl or first install vim-plug yourself!"
        execute "q!"
    endif
    echo "Installing Vim-Plug..."
    echo ""
    silent !curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs
                \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif






" SERAPHY BR CONFIG
" REVISAR ISTO
" Put your non-Plugin stuff after this line

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" General:
set autoindent               " Auto-indent new lines
set background=dark
set clipboard=unnamedplus
set cursorline              " Highlight cursor line
set encoding=utf-8          " Define o encoding exibido no terminal
set expandtab               " Use spaces instead of tabs
set fileencoding=utf-8      " Define o encoding na escrita dos arquivos
set hidden
set hlsearch                " Highlight all search results
set ignorecase              " Always case-insensitive
set inccommand=split
set incsearch                     " Searches for strings incrementally
set linebreak                     " Break lines at word (requires Wrap lines)
set list listchars=trail:·,tab:>· " Show trailing spaces as dots
set mouse=a                 " Enable mouse. see :help mouse for info.
set noshowmode
set number                  " Show line numbers
set pumblend=11             " pseudo-transparent popup menu
set pumheight=10
set relativenumber
set scrolloff=1000           " Always show N lines above/below the cursor
set shell=/bin/zsh
set shiftwidth=4            " Number of auto-indent spaces
set showbreak=+++           " Wrap-broken line prefix
set showmatch               " Highlight matching brace
set smartcase               " Enable smart-case search
set smartindent             " Enable smart-indent
set smarttab                " Enable smart-tabs
set softtabstop=4           " Number of spaces per Tab
set spelllang=pt_br,en_us
set splitbelow
set termguicolors
set textwidth=110                    " Line wrap (number of cols)
set virtualedit=insert,block,onemore " Permite mover o cursor onde não há texto
set visualbell                       " Use visual bell (no beeping)
set wildmenu
set wildmode=full

set wildignore+=*.ai,*.bmp,*.gif,*.ico,*.jpg,*.jpeg,*.png,*.psd,*.webp
set wildignore+=*.aux,*.out,*.toc
set wildignore+=*.avi,*.divx,*.mp4,*.webm,*.mov,*.m2ts,*.mkv,*.vob,*.mpg,*.mpeg
set wildignore+=*.doc,*.pdf,*.cbr,*.cbz,*.docx,*.ppt,*.odt
set wildignore+=*.eot,*.otf,*.ttf,*.woff
set wildignore+=*.mp3,*.oga,*.ogg,*.wav,*.flac
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest,*.rbc,*.class,*.jar,*.iso
set wildignore+=*.swp,.lock,.DS_Store,._*
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz,*.kgb
set wildignore+=.git,.hg,.svn

"" Advanced:
set backspace=indent,eol,start " Backspace behaviour
set ruler                      " Show row and column ruler information
set undolevels=1500            " Number of undo levels

"" Persistent Undo:
" Let's save undo info!
if !isdirectory($HOME."/.config/nvim/undo-dir")
    call mkdir($HOME."/.config/nvim/undo-dir", "", 0700)
endif
set undodir=~/.config/nvim/undo-dir
set undofile



















" Configuration only for Neovim:

if has('nvim')
	tnoremap <Esc> <C-\><C-n>
endif

" Configuration only for Vim

if !has('nvim')
	" settings that are default in neovim
	set encoding=utf8         " Set utf8 as standard encoding and en_US as the standard language
	set autoindent
	set autoread              " Set to auto read when a file is changed from the outside


  set backspace=indent,eol,start  " Configure backspace so it acts as it should act


	set belloff=all
	set sidescroll=1

	set history=10000  " Sets how many lines of history VIM has to remember

	" search related settings
	set hlsearch " Highlight search results
	set incsearch  " Makes search act like search in modern browsers

	set ruler  "Always show current position

	" ui related settings
	set wildmenu  " Turn on the Wild menu
	set wildoptions+=pum,tagfile
	set laststatus=2 " Always show the status line (without this airline doenst show up)

	" Don't pass messages to |ins-completion-menu|.
	set shortmess+=c

	set display+=lastline,msgsep
	set showcmd " show partial commands in the status line
	set smarttab  " Be smart when using tabs


	set ttymouse=xterm2
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General


" Shows line numbering
set number

" Use Unix as the standard file type
set ffs=unix,dos,mac

" leader key
let g:mapleader = "\<Space>"
let g:maplocalleader = ","

" which key activate on leader press
nnoremap <silent> <leader> :<c-u>WhichKey '<Space>'<CR>
nnoremap <silent> <localleader> :<c-u>WhichKey ','<CR>


" Fast saving
nmap <leader>w :w!<cr>

" Fast quitting
nmap <leader>q :q!<cr>

" ----------------------------------------------

" Delete trailing whitespace on save
" source: https://stackoverflow.com/questions/19936145/vim-remove-whitespace-for-specific-files
autocmd BufWritePre * %s/\s\+$//e
" ----------------------------------------------

" :W sudo saves the file
" (useful for handling the permission-denied error)
command! W w !sudo tee % > /dev/null

" quicly edit/reload configuration file
nnoremap cfo :e $MYVIMRC<CR>
nnoremap cfe :e ~/.vimrc<CR>
nnoremap cfs :so $MYVIMRC<CR>
" ----------------------------------------------


"##############################################################
" SYNTAX HIGHLIGHTING

" Native vim filetype plugin enables syntax highlighting base on file type
filetype on
filetype plugin on

" enable syntax highlighting
syntax enable


"##############################################################
" INDENTATION

filetype indent on
set autoindent " Auto indent
set smartindent  " Smart indent
set wrap " Wrap lines

" Use spaces instead of tabs
set expandtab


" 1 tab == 4 spaces
set shiftwidth=2
set tabstop=2


"##############################################################
" auto reload (source) vimrc if changed
" this makes unnecessary to restart vim after adding plugins or changing something in the config

if has ('autocmd') " Remain compatible with earlier versions
    augroup vimrc     " Source vim configuration upon save
        autocmd! BufWritePost $MYVIMRC source % | echom "Reloaded " . $MYVIMRC | redraw
        autocmd! BufWritePost $MYGVIMRC if has('gui_running') | so % | echom "Reloaded " . $MYGVIMRC | endif | redraw
    augroup END
endif " has autocmd


" Clipboard
set clipboard=unnamed
set paste               " Paste from a windows or from vim
set go+=a               " Visual selection automatically copied to the clipboard


" Set 7 lines to the cursor - when moving vertically using j/k
set so=7

" Avoid garbled characters in Chinese language windows OS
let $LANG='en'
set langmenu=en


" Ignore compiled files
set wildignore=*.o,*~,*.pyc
if has("win16") || has("win32")
    set wildignore+=.git\*,.hg\*,.svn\*
else
    set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store
endif

" Make wildmenu behave like bash completion. Finding commands are so easy now.
set wildmode=list:longest


set cmdheight=2   " Height of the command bar

" A buffer becomes hidden when it is abandoned
set hid

set whichwrap+=<,>,h,l


" don't duplicate an existing open buffer
set switchbuf=useopen


" Don't redraw while executing macros (good performance config)
set lazyredraw

" For regular expressions turn magic on
set magic

" Show matching brackets when text indicator is over them
set showmatch

" How many tenths of a second to blink when matching brackets
set mat=2

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" Add a bit extra margin to the left
set foldcolumn=1


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" TEXT EDITING SETTINGS

" bindings to move text up and down (line or block)
nnoremap <M-j> :m .+1<CR>==
nnoremap <M-k> :m .-2<CR>==
inoremap <M-j> <Esc>:m .+1<CR>==gi
inoremap <M-k> <Esc>:m .-2<CR>==gi
vnoremap <M-j> :m '>+1<CR>gv=gv
vnoremap <M-k> :m '<-2<CR>gv=gv


" replace all instances of currently selected word for new input (leader + r)
map <leader>r :%s///g<left><left>

" Linebreak on 500 characters
set lbr
set tw=500

" Disable Vim native text folding
set nofoldenable

" Remap VIM 0 to first non-blank character
" not sure what this does, i copied from somewhere
map 0 ^

" Return to last edit position when opening files (You want this!)
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" SEARCH SETTINGS

" Ignore case when searching
set ignorecase

" case insensitive search if all lowercase
set smartcase

" Makes Esc clear last search highlights after searching
nnoremap <esc> :noh<return><esc>


" Visual mode pressing * or # searches for the current selection
" Super useful! From an idea by Michael Naumann
vnoremap <silent> * :<C-u>call VisualSelection('', '')<CR>/<C-R>=@/<CR><CR>
vnoremap <silent> # :<C-u>call VisualSelection('', '')<CR>?<C-R>=@/<CR><CR>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" SPELL CHECKING

" Pressing ,ss will toggle and untoggle spell checking
map <leader>ss :setlocal spell!<cr>

" Spellchecking shortcuts
map <leader>sn ]s
map <leader>sp [s
map <leader>sa zg
map <leader>s? z=


" Persistent undo
"
 if !isdirectory($HOME."/.config/nvim/undo-dir")
	 call mkdir($HOME."/.config/nvim/undo-dir", "", 0700)
 endif
 set undodir=~/.config/nvim/undo-dir
 set undofile


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => CODE EDITING GENERAL SETTINGS

" Delete trailing white space on save, useful for some filetypes ;)
autocmd BufWritePre * %s/\s\+$//e

" alternative i can select which file extensions will be trimmed
" fun! CleanExtraSpaces()
"     let save_cursor = getpos(".")
"     let old_query = getreg('/')
"     silent! %s/\s\+$//e
"     call setpos('.', save_cursor)
"     call setreg('/', old_query)
" endfun

" if has("autocmd")
"     autocmd BufWritePre *.txt,*.js,*.py,*.wiki,*.sh,*.coffee :call CleanExtraSpaces()
" endif


"""""""""""""""""""""""""""""""""""""""
" RunFile() Function (copied from http://urgetopunt.com/2014/02/19/run-scripts-from-vim.html)
" added Shell Scripts and PHP support
function! RunFile()
    if match(@%, '.rb$') != -1
        let argv = input('!ruby % ')
        exec '!ruby % ' . argv
    elseif match(@%, '.py$') != -1
        let argv = input('!python % ')
        exec '!python % ' . argv
    elseif match(@%, '.sh$') != -1
        let argv = input('!sh % ')
        exec '!sh % ' . argv
    elseif match(@%, '.php$') != -1
        let argv = input('!php % ')
        exec '!php % ' . argv
    else
        echo '<< ERROR >> RunFile() only supports ruby and python'
    endif
endfunction
" map the RunFile() function
noremap <Leader>rx :call RunFile()<CR>


"""""""""""""""""""""""""""""""""""""""
" HTML

" auto indent HTML files on save and in open
" disabled in favor o prettier
" autocmd BufWritePre,BufRead *.html :normal gg=G


"""""""""""""""""""""""""""""""""""""""
" RUBY

" run rake
noremap <Leader>rr :!rake<CR>



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => CODE COMPLETION

" Activate Vim native completion engine (Omnicomplete)
" disabled > use COC instead
" set omnifunc=syntaxcomplete#Complete


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" TMUX & VIM STUFF

" set title of tmux window to currently open file in vim
autocmd BufEnter * call system("tmux rename-window " . expand("%:t"))
autocmd VimLeave * call system("tmux setw automatic-rename")
autocmd BufEnter * let &titlestring = ' ' . expand("%:t")
set title


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" UI SETTINGS



:set cursorline " highlight current line
" :set cursorcolumn " highlight current column
" => COLORS AND FONTs

set t_Co=256

" Set extra options when running in GUI mode
if has("gui_running")
    set guioptions-=T
    set guioptions-=e
    set t_Co=256
    set guitablabel=%M\ %t
endif

" Set vim font (using NerdFont pached Hack for devicons plugin)
set guifont=Hack\ Nerd\ Font\ 15

" APPLY THE COLOR SCHEME
" This has to be put after the plugins load. The downloaded color scheme
" only becomes available after the plug#end() line
colorscheme codedark

"############################################
"
" FILES, BACKUPS AND UNDO

" Turn backup off, since most stuff is in SVN, git et.c anyway...
set nobackup
set nowritebackup
set noswapfile

"-----------------------------
" FZF settings

" Mapping selecting mappings
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)

map <leader>ff :Files<cr>
map <leader>b :Buffers<cr>

" Insert mode completion
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)

" Advanced customization using Vim function
inoremap <expr> <c-x><c-k> fzf#vim#complete#word({'left': '15%'})

" Replace the default dictionary completion with fzf-based fuzzy completion
inoremap <expr> <c-x><c-k> fzf#vim#complete('cat /usr/share/dict/words')


"############################################
"
" TABS, WINDOWS AND BUFFERS

" use <leader>s for horizontal split,
" <leader>q closes pane
nnoremap <silent> <leader>sh :split<CR>
nnoremap <silent> <leader>- :split<CR>

" <leader>v or | for vertical split
nnoremap <silent> <leader>sv :vsplit<CR>
nnoremap <silent> <leader>\| :vsplit<CR>

" easier 'vim style' window navigation
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>lR

" easier 'vim style' tab navigation
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" navigate to tabs using <leader><number>, similar to i3 workspaces switch
nnoremap <leader>1 1gt
nnoremap <leader>2 2gt
nnoremap <leader>3 3gt
nnoremap <leader>4 4gt
nnoremap <leader>5 5gt


nnoremap <leader>bl :Buffers<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" TABS AND WINDOW SPLTTING

" Open new split panes to right and bottom, which feels more natural than Vim’s default:
set splitbelow
set splitright

" Useful mappings for managing tabs
map <leader>tn :tabnew<cr>
map <leader>to :tabonly<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove
map <leader>t<leader> :tabnext

" Let 'tl' toggle between this and the last accessed tab
let g:lasttab = 1
nmap <leader>tl :exe "tabn ".g:lasttab<CR>
au TabLeave * let g:lasttab = tabpagenr()


" Opens a new tab with the current buffer's path
" Super useful when editing files in the same directory
map <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/
" Map <Space> to / (search) and Ctrl-<Space> to ? (backwards search)
" map <space> /
" map <c-space> ?

" Disable highlight when <leader><cr> is pressed
map <silent> <leader><cr> :noh<cr>

" Close the current buffer
map <leader>bd :Bclose<cr>:tabclose<cr>gT

" Close all the buffers
map <leader>ba :bufdo bd<cr>

map <leader>l :bnext<cr>
map <leader>h :bprevious<cr>


" Switch CWD to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>:pwd<cr>

" Specify the behavior when switching between buffers
try
    set switchbuf=useopen,usetab,newtab
    set stal=2
catch
endtry



"""""""""""""""""""""""""""""
" => Status line
""""""""""""""""""""""""""""""


" Format the status line
" set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l\ \ Column:\ %c

" set statusline=   " clear the statusline for when vimrc is reloaded
" set statusline+=%-3.3n\                      " buffer number
" set statusline+=%f\                          " file name
" set statusline+=%h%m%r%w                     " flags
" set statusline+=[%{strlen(&ft)?&ft:'none'},  " filetype
" set statusline+=%{strlen(&fenc)?&fenc:&enc}, " encoding
" set statusline+=%{&fileformat}]              " file format
" set statusline+=%=                           " right align
" set statusline+=%{synIDattr(synID(line('.'),col('.'),1),'name')}\  " highlight
" set statusline+=%b,0x%-8B\                   " current char
" set statusline+=%-14.(%l,%c%V%)\ %<%P        " offset


" ######################################
" PLUGINS SETTINGS

" Disable folding on Vim Markdown
let g:vim_markdown_folding_disabled = 1

" RUBY MINITEST SETTINGS (i_ctrl+x_ctrl+u for minitest method completion)
set completefunc=syntaxcomplete#Complete


"############################################
" CtrlP fuzzy finder
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'

"############################################
" AGs (silver searcher, ripgrep supoort)

" use ripgrep instead of the_silver_searcher
let g:ags_agexe = 'rg'

let g:ags_agargs = {
  \ '--column'         : ['', ''],
  \ '--line-number'    : ['', ''],
  \ '--context'        : ['g:ags_agcontext', '-C'],
  \ '--max-count'      : ['g:ags_agmaxcount', ''],
  \ '--heading'        : ['',''],
  \ '--smart-case'     : ['','-S'],
  \ '--color'          : ['always',''],
  \ '--colors'         : [['match:fg:green', 'match:bg:black', 'match:style:nobold', 'path:fg:red', 'path:style:bold', 'line:fg:black', 'line:style:bold'] ,''],
  \ }

" Search for the word under cursor
nnoremap <Leader>s :Ags<Space><C-R>=expand('<cword>')<CR><CR>
" Search for the visually selected text
vnoremap <Leader>s y:Ags<Space><C-R>='"' . escape(@", '"*?()[]{}.') . '"'<CR><CR>
" Run Ags
nnoremap <Leader>a :Ags<Space>
" Quit Ags
nnoremap <Leader><Leader>a :AgsQuit<CR>


"############################################
" ALE LINTER SETTINGS

" show linting errors on a separate window
" let g:ale_open_list = 1
" let g:ale_list_window_size = 5
let g:ale_sign_error = '>>'
let g:ale_sign_warning = '--'

" Show X lines of errors (default: 10)
let g:ale_list_window_size = 10

"############################################
" TSLint settings

" auto lint when saving typescript files
autocmd BufWritePost *.ts,*.tsx call tslint#run('a', win_getid())


"############################################
" AUTOCOMPLETE


" VIM NATIVE'S OMNICOMPLETE COMPLETION ENGINE SETTINGS
" taken from http://vim.wikia.com/wiki/Make_Vim_completion_popup_menu_work_just_like_in_an_IDE

" The above command will change the 'completeopt' option so that Vim's popup menu doesn't select the first completion item, but rather just inserts the longest common text of all matches; and the menu will come up even if there's only one match.
" :set completeopt=longest,menuone

" The following mapping will change the behavior of the <Enter> key when the popup menu is visible. In that case the Enter key will simply select the highlighted menu item, just as <C-Y> does.
" :inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Navigate through suggestions with C-j and C-k
" inoremap <expr> <C-j> pumvisible() ? "\<C-N>" : "\<C-j>"
" inoremap <expr> <C-k> pumvisible() ? "\<C-P>" : "\<C-k>"

" autocmd FileType python set omnifunc=pythoncomplete#Complete
" autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
" autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
" autocmd FileType css set omnifunc=csscomplete#CompleteCSS

"############################################
" SNIPPETS

" UltSnips Snippets settings
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
" let g:UltiSnipsExpandTrigger="<S-tab>"
" let g:UltiSnipsJumpForwardTrigger="<c-b>"
" let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" If you want :UltiSnipsEdit to split your window.
" let g:UltiSnipsEditSplit="vertical"

"############################################
" Airline setup
let g:airline_theme='codedark'                        " this airline theme resembles VSCode blueish status bar
let g:airline#extensions#tabline#enabled = 1       " enable tabline upport
let g:airline#extensions#tabline#tab_nr_type = 1   " show tab numbers
let g:airline#extensions#tabline#show_buffers = 0  " hide buffers
let g:airline#extensions#tabline#tab_min_count = 2 " hide tabline for one tab
let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:airline_powerline_fonts = 1                     " needed by devicons


" SERAPHYBR airline config
"" Airline status line:
set laststatus=2
let g:airline_powerline_fonts = 1
let g:airline_theme='deus'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline#extensions#ale#enabled = 1
let g:airline#extensions#tabline#formatter = 'unique_tail_improved'
let g:airline_section_error = '%{airline#util#wrap(airline#extensions#coc#get_error(),0)}'
let g:airline_section_warning = '%{airline#util#wrap(airline#extensions#coc#get_warning(),0)}'



"############################################
" COC Settings
" settings taken from: https://github.com/neoclide/coc.nvim#example-vim-configuration

" TextEdit might fail if hidden is not set.
set hidden

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
set signcolumn=yes

" to get the correct comment highlighting for jsonc
autocmd FileType json syntax match Comment +\/\/.\+$+

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()


" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <Tab> and <S-Tab> to navigate the completion list:

inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"


" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
if has('patch8.1.1068')
  " Use `complete_info` if your (Neo)Vim version supports it.
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  imap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" To make <cr> select the first completion item and confirm the completion when no item has been selected:
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm() : "\<C-g>u\<CR>"


" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)


" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end


" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current line.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)


" Introduce function text object
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Use <TAB> for selections ranges.
" NOTE: Requires 'textDocument/selectionRange' support from the language server.
" coc-tsserver, coc-python are the examples of servers that support it.
nmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <TAB> <Plug>(coc-range-select)


" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')


" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}


" Mappings using CoCList:
" Show all diagnostics.
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>


" Extensions
let g:coc_global_extensions = [
      \ 'coc-git',
      \ 'coc-highlight',
      \ 'coc-marketplace',
      \ 'coc-pairs',
      " Programming languages
      \ 'coc-html',
      \ 'coc-css',
      \ 'coc-json',
      \ 'coc-java',
      \ 'coc-rls',
      \ 'coc-tsserver',
      \ 'coc-yaml',
      \ 'coc-vimlsp',
      " Tools
      \ 'coc-prettier',
      \ 'coc-project',
      \ 'coc-snippets',
      \ 'coc-actions'
      \ ]


"############################################
" NERDTREE SETTINGS

" Toogle NERDTree
map <leader>e :NERDTreeToggle<CR>

" Toogle NERDTree on currently open file
nnoremap <silent> <Leader>v :NERDTreeFind<CR>

set<F8>=<leader>e

" Open NerdTree on Vim startup
autocmd VimEnter * NERDTree
autocmd VimEnter * if argc() | wincmd p | endif


" Show bookmarks table on Nerdtree
let NERDTreeShowBookmarks=1

" Open nerdtree directly on a specif path
" au VimEnter *  NERDTree /path/to/a/folder/

" Open NerdTree directly on the file currently being edited
set autochdir
" Sets the tree root on the current folder in the terminal
let NERDTreeChDirMode=2

" Make NERDTree prettier
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1

" Automatically close a tab if the only remaining window is NerdTree:
" autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Automatically delete the buffer of the file you just deleted with NerdTree:
let NERDTreeAutoDeleteBuffer = 1

" close nerd tree on opening file
let NERDTreeQuitOnOpen = 0

"############################################
" EMMET SETTINGS
" Use TAB to expand emmet snippets (equivalent to <C-y>,
" let g:user_emmet_expandabbr_key = '<S-tab>'
" Create another binding for emmet, because the default is not great
map <C-Space> <c-y>,

" navigate to edit points
inoremap <C->> <c-y>n<CR>

"" Prettier
let g:prettier#config#print_width = 100
let g:prettier#autoformat = 0
let g:prettier#config#tab_width = 4

"" Rainbow Parentheses Improved
let g:rainbow_active = 1
let g:rainbow_conf = {'guifgs': ['#FFD700','#C466C0','#7AB9E0']}

"############################################
" VIM COLORIZER SETTINGS

" Make colorizer start when opening or creating files
:autocmd BufNewFile,BufRead * ColorHighlight


"############################################
" VIM ILLUMINATE SETTINGS

" disable illuminate words on NerdTREE
let g:Illuminate_ftblacklist = ['nerdtree']


"############################################
" VIM DEVICONS SETTINGS


set guifont=DroidSansMono\ Nerd\ Font\ 11

let g:webdevicons_enable = 1

" adding the flags to NERDTree
let g:webdevicons_enable_nerdtree = 1

" adding to vim-airline's tabline
let g:webdevicons_enable_airline_tabline = 1

" adding to vim-airline's statusline
let g:webdevicons_enable_airline_statusline = 1

" whether or not to show the nerdtree brackets around flags
let g:webdevicons_conceal_nerdtree_brackets = 1

" Force extra padding in NERDTree so that the filetype icons line up vertically
let g:WebDevIconsNerdTreeGitPluginForceVAlign = 1

" Adding the custom source to denite
let g:webdevicons_enable_denite = 1

" This is to solve the issue with NERDTree devicons bugging after
" sourcing vimrc
" this feels like hack (cause it is). try to fix this
if exists("g:loaded_webdevicons")
    call webdevicons#refresh()
endif

"############################################
" VIM RUNFILE CONFIG

" vim-runfile keymap
noremap <Leader>r, :Run<CR>


"############################################
" HELPER METHODS

function! VisualSelection(direction, extra_filter) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", '\\/.*$^~[]')
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'b'
        execute "normal ?" . l:pattern . "^M"
    elseif a:direction == 'gv'
        call CmdLine("Ack \"" . l:pattern . "\" " )
    elseif a:direction == 'replace'
        call CmdLine("%s" . '/'. l:pattern . '/')
    elseif a:direction == 'f'
        execute "normal /" . l:pattern . "^M"
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction

" Returns true if paste mode is enabled
function! HasPaste()
    if &paste
        return 'PASTE MODE  '
    endif
    return ''
endfunction

" Zoom / Restore window.
function! s:ZoomToggle() abort
    if exists('t:zoomed') && t:zoomed
        execute t:zoom_winrestcmd
        let t:zoomed = 0
    else
        let t:zoom_winrestcmd = winrestcmd()
        resize
        vertical resize
        let t:zoomed = 1
    endif
endfunction
command! ZoomToggle call s:ZoomToggle()
" mapping the ZoomToggle function
noremap <leader>z :ZoomToggle<CR>


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" settings to fix the mouse issue on alacritty terminal
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set ttymouse=sgr
